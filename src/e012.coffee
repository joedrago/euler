module.exports = problem = new Problem """

Problem 12: Highly divisible triangular number
----------------------------------------------

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be

                      1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

The first ten terms would be:

                      1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

"""

math = require "math"

# This function does its best to leverage Ramanujan's "Tau function",
# which is supposed to give the number of positive divisors.
#
# The idea is:
# * For primes, T(p^k) = k + 1
# * For any numbers whose GCD is 1, T(mn) = T(m) * T(n)
#
# I already have a method to prime factor a number, so I'll leverage
# every grouping of the same prime number as the first case, and
# multiply them together.
#
# Example: 28
#
# 28's prime factors are [2, 2, 7], or (2^2 + 7)
#
# I can assume that the GCD between any of the prime sets is going to be 1 because duh,
# which means that:
#
# T(28) == T(2^2) * T(7)
#
# T(2^2) == 2 + 1 == 3
# T(7^1) == 1 + 1 == 2
# 3 * 2 = 6
# 28 has 6 divisors.
#
# You're mad.

divisorCount = (n) ->
  return 1 if n == 1

  factors = math.primeFactors(n)
  count = 1
  lastFactor = 0
  exponent = 1
  for factor in factors
    if factor == lastFactor
      exponent++
    else
      if lastFactor != 0
          count *= exponent + 1
      lastFactor = factor
      exponent = 1

  if lastFactor != 0
      count *= exponent + 1

  return count

problem.test = ->
  equal(divisorCount( 1), 1, " 1 has 1 divisors")
  equal(divisorCount( 3), 2, " 3 has 2 divisors")
  equal(divisorCount( 6), 4, " 6 has 4 divisors")
  equal(divisorCount(10), 4, "10 has 4 divisors")
  equal(divisorCount(15), 4, "15 has 4 divisors")
  equal(divisorCount(21), 4, "21 has 4 divisors")
  equal(divisorCount(28), 6, "28 has 6 divisors")

problem.answer = ->
  n = 1
  step = 2

  loop
    count = divisorCount(n)
    if count > 500
      return { n: n, count: count }

    # next triangular number
    n += step
    step++
