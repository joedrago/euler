require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"r1PLSq":[function(require,module,exports){
var problem;

module.exports = problem = new Problem("\nProblem 1: Multiples of 3 and 5\n-------------------------------\n\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\n\nFind the sum of all the multiples of 3 or 5 below 1000.\n");

problem.test = function() {
  var i, sum, _i;
  sum = 0;
  for (i = _i = 1; _i < 10; i = ++_i) {
    if ((i % 3 === 0) || (i % 5 === 0)) {
      sum += i;
    }
  }
  return equal(sum, 23, "Sum of natural numbers < 10: " + sum);
};

problem.answer = function() {
  var i, sum, _i;
  sum = 0;
  for (i = _i = 1; _i < 1000; i = ++_i) {
    if ((i % 3 === 0) || (i % 5 === 0)) {
      sum += i;
    }
  }
  return sum;
};


},{}],"e001":[function(require,module,exports){
module.exports=require('r1PLSq');
},{}],"78QEJ9":[function(require,module,exports){
var problem;

module.exports = problem = new Problem("\nProblem 2: Even Fibonacci numbers\n---------------------------------\n\nEach new term in the Fibonacci sequence is generated by adding the previous two terms.\nBy starting with 1 and 2, the first 10 terms will be:\n\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million,\nfind the sum of the even-valued terms.\n");

problem.answer = function() {
  var curr, next, prev, sum;
  prev = 1;
  curr = 1;
  sum = 0;
  while (curr < 4000000) {
    if ((curr % 2) === 0) {
      sum += curr;
    }
    next = curr + prev;
    prev = curr;
    curr = next;
  }
  return sum;
};


},{}],"e002":[function(require,module,exports){
module.exports=require('78QEJ9');
},{}],"HokIVh":[function(require,module,exports){
var isPrime, largestPrimeFactor, leastFactor, primeFactors, problem;

module.exports = problem = new Problem("\nProblem 3: Largest prime factor\n-------------------------------\n\nThe prime factors of 13195 are 5, 7, 13 and 29.\n\nWhat is the largest prime factor of the number 600851475143 ?\n");

leastFactor = function(n) {
  var i, m, _i;
  if (isNaN(n) || !isFinite(n)) {
    return NaN;
  }
  if (n === 0) {
    return 0;
  }
  if ((n % 1) !== 0 || (n * n) < 2) {
    return 1;
  }
  if ((n % 2) === 0) {
    return 2;
  }
  if ((n % 3) === 0) {
    return 3;
  }
  if ((n % 5) === 0) {
    return 5;
  }
  m = Math.sqrt(n);
  for (i = _i = 7; _i <= m; i = _i += 30) {
    if ((n % i) === 0) {
      return i;
    }
    if ((n % (i + 4)) === 0) {
      return i + 4;
    }
    if ((n % (i + 6)) === 0) {
      return i + 6;
    }
    if ((n % (i + 10)) === 0) {
      return i + 10;
    }
    if ((n % (i + 12)) === 0) {
      return i + 12;
    }
    if ((n % (i + 16)) === 0) {
      return i + 16;
    }
    if ((n % (i + 22)) === 0) {
      return i + 22;
    }
    if ((n % (i + 24)) === 0) {
      return i + 24;
    }
  }
  return n;
};

isPrime = function(n) {
  if (isNaN(n) || !isFinite(n) || (n % 1) !== 0 || (n < 2)) {
    return false;
  }
  if (n === leastFactor(n)) {
    return true;
  }
  return false;
};

primeFactors = function(n) {
  var factor, factors;
  if (n === 1) {
    return [1];
  }
  factors = [];
  while (!isPrime(n)) {
    factor = leastFactor(n);
    factors.push(factor);
    n /= factor;
  }
  factors.push(n);
  return factors;
};

largestPrimeFactor = function(n) {
  var factor;
  if (n === 1) {
    return 1;
  }
  while (!isPrime(n)) {
    factor = leastFactor(n);
    n /= factor;
  }
  return n;
};

problem.answer = function() {
  return largestPrimeFactor(600851475143);
};


},{}],"e003":[function(require,module,exports){
module.exports=require('HokIVh');
},{}],"e004":[function(require,module,exports){
module.exports=require('ys3VZW');
},{}],"ys3VZW":[function(require,module,exports){
var isPalindrome, problem;

module.exports = problem = new Problem("\nProblem 4: Largest palindrome product\n-------------------------------------\n\nA palindromic number reads the same both ways.\n\nFind the largest palindrome made from the product of two 3-digit numbers.\n");

isPalindrome = function(n) {
  var i, str, _i, _ref;
  str = n.toString();
  for (i = _i = 0, _ref = str.length / 2; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    if (str[i] !== str[str.length - 1 - i]) {
      return false;
    }
  }
  return true;
};

problem.test = function() {
  var v, _i, _j, _len, _len1, _ref, _ref1, _results;
  _ref = [1, 11, 121, 1221, 12321, 1234321];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    v = _ref[_i];
    equal(isPalindrome(v), true, "isPalindrome(" + v + ") returns true");
  }
  _ref1 = [12, 123, 1234, 12345, 123456, 12324];
  _results = [];
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    v = _ref1[_j];
    _results.push(equal(isPalindrome(v), false, "isPalindrome(" + v + ") returns false"));
  }
  return _results;
};

problem.answer = function() {
  var i, j, largesti, largestj, largestp, product, _i, _j;
  largesti = 0;
  largestj = 0;
  largestp = 0;
  for (i = _i = 100; _i <= 999; i = ++_i) {
    for (j = _j = 100; _j <= 999; j = ++_j) {
      product = i * j;
      if (isPalindrome(product)) {
        largesti = i;
        largestj = j;
        largestp = product;
      }
    }
  }
  return largestp;
};


},{}],"e005":[function(require,module,exports){
module.exports=require('8Y1Hkt');
},{}],"8Y1Hkt":[function(require,module,exports){
var problem;

module.exports = problem = new Problem("\nProblem 5: Smallest multiple\n----------------------------\n\n2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n\nWhat is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?\n");

problem.answer = function() {
  var found, i, n, _i;
  n = 0;
  while (true) {
    n += 20;
    found = true;
    for (i = _i = 1; _i <= 20; i = ++_i) {
      if ((n % i) !== 0) {
        found = false;
        break;
      }
    }
    if (found) {
      break;
    }
  }
  return n;
};


},{}],"a5iprt":[function(require,module,exports){
var differenceSumSquares, problem, squareOfSum, sumOfSquares;

module.exports = problem = new Problem("\nProblem 6: Sum square difference\n--------------------------------\n\nThe sum of the squares of the first ten natural numbers is,\n\n             1^2 + 2^2 + ... + 10^2 = 385\n\nThe square of the sum of the first ten natural numbers is,\n\n          (1 + 2 + ... + 10)^2 = 55^2 = 3025\n\nHence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 âˆ’ 385 = 2640.\n\nFind the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.\n");

sumOfSquares = function(n) {
  var i, sum, _i;
  sum = 0;
  for (i = _i = 1; 1 <= n ? _i <= n : _i >= n; i = 1 <= n ? ++_i : --_i) {
    sum += i * i;
  }
  return sum;
};

squareOfSum = function(n) {
  var i, sum, _i;
  sum = 0;
  for (i = _i = 1; 1 <= n ? _i <= n : _i >= n; i = 1 <= n ? ++_i : --_i) {
    sum += i;
  }
  return sum * sum;
};

differenceSumSquares = function(n) {
  return squareOfSum(n) - sumOfSquares(n);
};

problem.test = function() {
  equal(sumOfSquares(10), 385, "Sum of squares of first ten natural numbers is 385");
  equal(squareOfSum(10), 3025, "Square of sum of first ten natural numbers is 3025");
  return equal(differenceSumSquares(10), 2640, "Difference in values for the first ten natural numbers is 2640");
};

problem.answer = function() {
  return differenceSumSquares(100);
};


},{}],"e006":[function(require,module,exports){
module.exports=require('a5iprt');
},{}],"e007":[function(require,module,exports){
module.exports=require('v+s2Qb');
},{}],"v+s2Qb":[function(require,module,exports){
var nthPrime, problem;

module.exports = problem = new Problem("\nProblem 7: 10001st prime\n------------------------\n\nBy listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\n\nWhat is the 10,001st prime number?\n");

nthPrime = function(n) {
  var i, sieve, _i;
  sieve = new IncrementalSieve;
  for (i = _i = 1; 1 <= n ? _i < n : _i > n; i = 1 <= n ? ++_i : --_i) {
    sieve.next();
  }
  return sieve.next();
};

problem.test = function() {
  return equal(nthPrime(6), 13, "6th prime is 13");
};

problem.answer = function() {
  return nthPrime(10001);
};


},{}],"e008":[function(require,module,exports){
module.exports=require('4902rv');
},{}],"4902rv":[function(require,module,exports){
var digit, digits, largestProduct, problem, str;

module.exports = problem = new Problem("\nProblem 8: Largest product in a series\n--------------------------------------\n\nThe four adjacent digits in the 1000-digit number that have the greatest product are 9 x 9 x 8 x 9 = 5832.\n\n  73167176531330624919225119674426574742355349194934\n  96983520312774506326239578318016984801869478851843\n  85861560789112949495459501737958331952853208805511\n  12540698747158523863050715693290963295227443043557\n  66896648950445244523161731856403098711121722383113\n  62229893423380308135336276614282806444486645238749\n  30358907296290491560440772390713810515859307960866\n  70172427121883998797908792274921901699720888093776\n  65727333001053367881220235421809751254540594752243\n  52584907711670556013604839586446706324415722155397\n  53697817977846174064955149290862569321978468622482\n  83972241375657056057490261407972968652414535100474\n  82166370484403199890008895243450658541227588666881\n  16427171479924442928230863465674813919123162824586\n  17866458359124566529476545682848912883142607690042\n  24219022671055626321111109370544217506941658960408\n  07198403850962455444362981230987879927244284909188\n  84580156166097919133875499200524063689912560717606\n  05886116467109405077541002256983155200055935729725\n  71636269561882670428252483600823257530420752963450\n\nFind the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?\n");

str = "73167176531330624919225119674426574742355349194934\n96983520312774506326239578318016984801869478851843\n85861560789112949495459501737958331952853208805511\n12540698747158523863050715693290963295227443043557\n66896648950445244523161731856403098711121722383113\n62229893423380308135336276614282806444486645238749\n30358907296290491560440772390713810515859307960866\n70172427121883998797908792274921901699720888093776\n65727333001053367881220235421809751254540594752243\n52584907711670556013604839586446706324415722155397\n53697817977846174064955149290862569321978468622482\n83972241375657056057490261407972968652414535100474\n82166370484403199890008895243450658541227588666881\n16427171479924442928230863465674813919123162824586\n17866458359124566529476545682848912883142607690042\n24219022671055626321111109370544217506941658960408\n07198403850962455444362981230987879927244284909188\n84580156166097919133875499200524063689912560717606\n05886116467109405077541002256983155200055935729725\n71636269561882670428252483600823257530420752963450";

str = str.replace(/[^0-9]/gm, "");

digits = (function() {
  var _i, _len, _results;
  _results = [];
  for (_i = 0, _len = str.length; _i < _len; _i++) {
    digit = str[_i];
    _results.push(parseInt(digit));
  }
  return _results;
})();

largestProduct = function(digitCount) {
  var end, i, largest, product, start, _i, _j, _ref;
  if (digitCount > digits.length) {
    return 0;
  }
  largest = 0;
  for (start = _i = 0, _ref = digits.length - digitCount; 0 <= _ref ? _i <= _ref : _i >= _ref; start = 0 <= _ref ? ++_i : --_i) {
    end = start + digitCount;
    product = 1;
    for (i = _j = start; start <= end ? _j < end : _j > end; i = start <= end ? ++_j : --_j) {
      product *= digits[i];
    }
    if (largest < product) {
      largest = product;
    }
  }
  return largest;
};

problem.test = function() {
  return equal(largestProduct(4), 5832, "Greatest product of 4 adjacent digits is 5832");
};

problem.answer = function() {
  return largestProduct(13);
};


},{}],"e009":[function(require,module,exports){
module.exports=require('w1omiu');
},{}],"w1omiu":[function(require,module,exports){
var findFirstTriplet, isTriplet, problem;

module.exports = problem = new Problem("\nProblem 9: Special Pythagorean triplet\n--------------------------------------\n\nA Pythagorean triplet is a set of three natural numbers, a < b < c, for which,\n\n    a^2 + b^2 = c^2\n\nFor example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.\n\nThere exists exactly one Pythagorean triplet for which a + b + c = 1000.\n\nFind the product abc.\n");

isTriplet = function(a, b, c) {
  return ((a * a) + (b * b)) === (c * c);
};

findFirstTriplet = function(sum) {
  var a, b, c, _i, _j;
  for (a = _i = 1; _i < 1000; a = ++_i) {
    for (b = _j = 1; _j < 1000; b = ++_j) {
      c = 1000 - a - b;
      if (isTriplet(a, b, c)) {
        return [a, b, c];
      }
    }
  }
  return false;
};

problem.test = function() {
  return equal(isTriplet(3, 4, 5), true, "(3,4,5) is a Pythagorean triplet");
};

problem.answer = function() {
  return findFirstTriplet(1000);
};


},{}],"VGQJ6S":[function(require,module,exports){
var primeSum, problem;

module.exports = problem = new Problem("\nProblem 10: Summation of primes\n-------------------------------\n\nThe sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n\nFind the sum of all the primes below two million.\n");

primeSum = function(ceiling) {
  var n, sieve, sum;
  sieve = new IncrementalSieve;
  sum = 0;
  while (true) {
    n = sieve.next();
    if (n >= ceiling) {
      break;
    }
    sum += n;
  }
  return sum;
};

problem.test = function() {
  return equal(primeSum(10), 17, "Sum of primes below 10 is 17");
};

problem.answer = function() {
  return primeSum(2000000);
};


},{}],"e010":[function(require,module,exports){
module.exports=require('VGQJ6S');
},{}],"vx/pw5":[function(require,module,exports){
var getLine, getLineProduct, grid, prepareGrid, problem;

module.exports = problem = new Problem("\nProblem 11: Largest product in a grid\n-------------------------------------\n\nIn the 20x20 grid below, four numbers along a diagonal line have been marked in red.\n\n          08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n          49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n          81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n          52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n          22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n          24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n          32 98 81 28 64 23 67 10 26_38 40 67 59 54 70 66 18 38 64 70\n          67 26 20 68 02 62 12 20 95 63_94 39 63 08 40 91 66 49 94 21\n          24 55 58 05 66 73 99 26 97 17 78_78 96 83 14 88 34 89 63 72\n          21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\n          78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n          16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n          86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n          19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n          04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n          88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n          04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n          20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n          20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n          01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\n\nThe product of these numbers is 26 x 63 x 78 x 14 = 1788696.\n\nWhat is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20x20 grid?\n");

grid = null;

prepareGrid = function() {
  var digit, digits, i, index, j, rawDigits, _i, _j, _results;
  rawDigits = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\n67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\n24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\n21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\n78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48".replace(/[^0-9 ]/gm, " ");
  digits = (function() {
    var _i, _len, _ref, _results;
    _ref = rawDigits.split(" ");
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      digit = _ref[_i];
      _results.push(parseInt(digit));
    }
    return _results;
  })();
  grid = Array(20);
  for (i = _i = 0; _i < 20; i = ++_i) {
    grid[i] = Array(20);
  }
  index = 0;
  _results = [];
  for (j = _j = 0; _j < 20; j = ++_j) {
    _results.push((function() {
      var _k, _results1;
      _results1 = [];
      for (i = _k = 0; _k < 20; i = ++_k) {
        grid[i][j] = digits[index];
        _results1.push(index++);
      }
      return _results1;
    })());
  }
  return _results;
};

prepareGrid();

getLineProduct = function(sx, sy, dx, dy) {
  var ex, ey, i, product, x, y, _i;
  ex = sx + (4 * dx);
  if ((ex < 0) || (ex >= 20)) {
    return -1;
  }
  ey = sy + (4 * dy);
  if ((ey < 0) || (ey >= 20)) {
    return -1;
  }
  x = sx;
  y = sy;
  product = 1;
  for (i = _i = 0; _i < 4; i = ++_i) {
    product *= grid[x][y];
    x += dx;
    y += dy;
  }
  return product;
};

getLine = function(sx, sy, dx, dy) {
  var ex, ey, i, line, x, y, _i;
  ex = sx + (4 * dx);
  if ((ex < 0) || (ex >= 20)) {
    return [];
  }
  ey = sy + (4 * dy);
  if ((ey < 0) || (ey >= 20)) {
    return [];
  }
  line = [];
  x = sx;
  y = sy;
  for (i = _i = 0; _i < 4; i = ++_i) {
    line.push(grid[x][y]);
    x += dx;
    y += dy;
  }
  return line;
};

problem.test = function() {
  return equal(getLineProduct(8, 6, 1, 1), 1788696, "Diagonal value shown in example equals 1,788,696");
};

problem.answer = function() {
  var i, j, max, p, _i, _j;
  max = {
    product: 1,
    i: 0,
    j: 0,
    dir: "right"
  };
  for (j = _i = 0; _i < 20; j = ++_i) {
    for (i = _j = 0; _j < 20; i = ++_j) {
      p = getLineProduct(i, j, 1, 0);
      if (max.product < p) {
        max.product = p;
        max.i = i;
        max.j = j;
        max.dir = "right";
      }
      p = getLineProduct(i, j, 0, 1);
      if (max.product < p) {
        max.product = p;
        max.i = i;
        max.j = j;
        max.dir = "down";
      }
      p = getLineProduct(i, j, 1, 1);
      if (max.product < p) {
        max.product = p;
        max.i = i;
        max.j = j;
        max.dir = "diagonal";
      }
    }
  }
  return max;
};


},{}],"e011":[function(require,module,exports){
module.exports=require('vx/pw5');
},{}],"shared":[function(require,module,exports){
module.exports=require('FiNUfl');
},{}],"FiNUfl":[function(require,module,exports){
var IncrementalSieve, root;

root = window;

IncrementalSieve = (function() {
  function IncrementalSieve() {
    this.n = 0;
  }

  IncrementalSieve.prototype.next = function() {
    var nxt, p2, s;
    this.n += 2;
    if (this.n < 7) {
      if (this.n < 3) {
        this.n = 1;
        return 2;
      }
      if (this.n < 5) {
        return 3;
      }
      this.dict = {};
      this.bps = new IncrementalSieve();
      this.bps.next();
      this.p = this.bps.next();
      this.q = this.p * this.p;
      return 5;
    } else {
      s = this.dict[this.n];
      if (!s) {
        if (this.n < this.q) {
          return this.n;
        } else {
          p2 = this.p << 1;
          this.dict[this.n + p2] = p2;
          this.p = this.bps.next();
          this.q = this.p * this.p;
          return this.next();
        }
      } else {
        delete this.dict[this.n];
        nxt = this.n + s;
        while (this.dict[nxt]) {
          nxt += s;
        }
        this.dict[nxt] = s;
        return this.next();
      }
    }
  };

  return IncrementalSieve;

})();

root.IncrementalSieve = IncrementalSieve;


},{}],"Vazq8s":[function(require,module,exports){
var LAST_PROBLEM, Problem, root;

LAST_PROBLEM = 11;

root = window;

root.escapedStringify = function(o) {
  var str;
  str = JSON.stringify(o);
  str = str.replace("]", "\\]");
  return str;
};

root.runAll = function() {
  var lastPuzzle, loadNextScript, nextIndex;
  lastPuzzle = LAST_PROBLEM;
  nextIndex = 0;
  loadNextScript = function() {
    if (nextIndex < lastPuzzle) {
      nextIndex++;
      return runTest(nextIndex, loadNextScript);
    }
  };
  return loadNextScript();
};

root.iterateProblems = function(args) {
  var indexToProcess, iterateNext;
  indexToProcess = null;
  if (args.endIndex > 0) {
    if (args.startIndex <= args.endIndex) {
      indexToProcess = args.startIndex;
      args.startIndex++;
    }
  } else {
    if (args.list.length > 0) {
      indexToProcess = args.list.shift();
    }
  }
  if (indexToProcess !== null) {
    iterateNext = function() {
      window.args = args;
      return runTest(indexToProcess, function() {
        return iterateProblems(args);
      });
    };
    return iterateNext();
  }
};

root.runTest = function(index, cb) {
  var moduleName, problem;
  moduleName = "e" + (('000' + index).slice(-3));
  window.index = index;
  problem = require(moduleName);
  problem.process();
  if (cb) {
    return window.setTimeout(cb, 0);
  }
};

Problem = (function() {
  function Problem(description) {
    var lines;
    this.description = description;
    this.index = window.index;
    lines = this.description.split(/\n/);
    while (lines.length > 0 && lines[0].length === 0) {
      lines.shift();
    }
    this.title = lines.shift();
    this.line = lines.shift();
    this.description = lines.join("\n");
  }

  Problem.prototype.now = function() {
    if (window.performance) {
      return window.performance.now();
    } else {
      return new Date().getTime();
    }
  };

  Problem.prototype.process = function() {
    var answer, answerFunc, end, formattedTitle, ms, sourceLine, start, testFunc, url;
    if (window.args.description) {
      window.terminal.echo("[[;#444444;]_______________________________________________________________________________________________]\n");
    }
    formattedTitle = $.terminal.format("[[;#ffaa00;]" + this.title + "]");
    url = "?c=" + window.args.cmd + "_" + this.index;
    if (window.args.verbose) {
      url += "_verbose";
    }
    window.terminal.echo("<a href=\"" + url + "\">" + formattedTitle + "</a>", {
      raw: true
    });
    if (window.args.description) {
      window.terminal.echo("[[;#444444;]" + this.line + "]");
      window.terminal.echo("[[;#ccccee;]" + this.description + "]\n");
      sourceLine = $.terminal.format("[[;#444444;]Source:] ");
      sourceLine += (" <a href=\"src/e" + (('000' + this.index).slice(-3)) + ".coffee\">") + $.terminal.format("[[;#773300;]Local]") + "</a> ";
      sourceLine += $.terminal.format("[[;#444444;]/]");
      sourceLine += (" <a href=\"https://github.com/joedrago/euler/blob/master/src/e" + (('000' + this.index).slice(-3)) + ".coffee\">") + $.terminal.format("[[;#773300;]Github]") + "</a>";
      window.terminal.echo(sourceLine, {
        raw: true
      });
      if (window.args.test || window.args.answer) {
        window.terminal.echo("");
      }
    }
    testFunc = this.test;
    answerFunc = this.answer;
    if (window.args.test) {
      if (testFunc === void 0) {
        window.terminal.echo("[[;#444444;] (no tests)]");
      } else {
        testFunc();
      }
    }
    if (window.args.answer) {
      start = this.now();
      answer = answerFunc();
      end = this.now();
      ms = end - start;
      return window.terminal.echo("[[;#ffffff;] -> ][[;#aaffaa;]Answer:] ([[;#aaffff;]" + (ms.toFixed(1)) + "ms]): [[;#ffffff;]" + (escapedStringify(answer)) + "]");
    }
  };

  return Problem;

})();

root.Problem = Problem;

root.ok = function(v, msg) {
  return window.terminal.echo("[[;#ffffff;] *  ]" + v + ": " + msg);
};

root.equal = function(a, b, msg) {
  if (a === b) {
    return window.terminal.echo("[[;#ffffff;] *  ][[;#555555;]PASS: " + msg + "]");
  } else {
    return window.terminal.echo("[[;#ffffff;] *  ][[;#ffaaaa;]FAIL: " + msg + " (" + a + " != " + b + ")]");
  }
};

root.onCommand = (function(_this) {
  return function(command) {
    var arg, args, cmd, process, v, _i, _len, _ref;
    if (command.length === 0) {
      return;
    }
    cmd = $.terminal.parseCommand(command);
    if (cmd.name.length === 0) {
      return;
    }
    args = {
      startIndex: 0,
      endIndex: 0,
      list: [],
      verbose: false,
      description: false,
      test: false,
      answer: false
    };
    process = true;
    _ref = cmd.args;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      arg = _ref[_i];
      arg = String(arg);
      if (arg.length < 1) {
        continue;
      }
      if (arg[0] === 'v') {
        args.verbose = true;
      } else if (arg.match(/^\d+$/)) {
        v = parseInt(arg);
        if ((v >= 1) && (v <= LAST_PROBLEM)) {
          args.list.push(v);
        } else {
          process = false;
          window.terminal.echo("[[;#ffaaaa;]No such test: " + v + " (valid tests 1-" + LAST_PROBLEM + ")]");
        }
      }
    }
    if (args.list.length === 0) {
      args.startIndex = 1;
      args.endIndex = LAST_PROBLEM;
    }
    if (cmd.name[0] === 'l') {
      args.cmd = "list";
    } else if (cmd.name[0] === 'd') {
      args.cmd = "describe";
      args.description = true;
    } else if (cmd.name[0] === 't') {
      args.cmd = "test";
      args.test = true;
    } else if (cmd.name[0] === 'a') {
      args.cmd = "answer";
      args.answer = true;
    } else if (cmd.name[0] === 'r') {
      args.cmd = "run";
      args.test = true;
      args.answer = true;
    } else if (cmd.name[0] === 'd') {
      args.cmd = "describe";
      args.description = true;
    } else if (cmd.name[0] === 'h') {
      args.cmd = "help";
      process = false;
      window.terminal.echo("Commands:\n\n    list [X]     - List problem titles\n    describe [X] - Display full problem descriptions\n    test [X]     - Run unit tests\n    answer [X]   - Time and calculate answer\n    run [X]      - test and answer combined\n    help         - This help\n\n    In all of these, [X] can be a list of one or more problem numbers. (a value from 1 to " + LAST_PROBLEM + "). If absent, it implies all problems.\n    Also, adding the word \"verbose\" to some of these commands will emit the description before performing the task.\n");
    } else {
      process = false;
      window.terminal.echo("[[;#ffaaaa;]Unknown command.]");
    }
    if (args.verbose) {
      args.description = true;
    }
    if (process) {
      return iterateProblems(args);
    }
  };
})(this);


},{}],"terminal":[function(require,module,exports){
module.exports=require('Vazq8s');
},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIuLlxcbm9kZV9tb2R1bGVzXFxicm93c2VyaWZ5XFxub2RlX21vZHVsZXNcXGJyb3dzZXItcGFja1xcX3ByZWx1ZGUuanMiLCIuLlxcc3JjXFxlMDAxLmNvZmZlZSIsIi4uXFxzcmNcXGUwMDIuY29mZmVlIiwiLi5cXHNyY1xcZTAwMy5jb2ZmZWUiLCIuLlxcc3JjXFxlMDA0LmNvZmZlZSIsIi4uXFxzcmNcXGUwMDUuY29mZmVlIiwiLi5cXHNyY1xcZTAwNi5jb2ZmZWUiLCIuLlxcc3JjXFxlMDA3LmNvZmZlZSIsIi4uXFxzcmNcXGUwMDguY29mZmVlIiwiLi5cXHNyY1xcZTAwOS5jb2ZmZWUiLCIuLlxcc3JjXFxlMDEwLmNvZmZlZSIsIi4uXFxzcmNcXGUwMTEuY29mZmVlIiwiLi5cXHNyY1xcc2hhcmVkLmNvZmZlZSIsIi4uXFxzcmNcXHRlcm1pbmFsLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLElBQUEsT0FBQTs7QUFBQSxNQUFNLENBQUMsT0FBUCxHQUFpQixPQUFBLEdBQWMsSUFBQSxPQUFBLENBQVEsdVFBQVIsQ0FBL0IsQ0FBQTs7QUFBQSxPQVlPLENBQUMsSUFBUixHQUFlLFNBQUEsR0FBQTtBQUNiLE1BQUEsVUFBQTtBQUFBLEVBQUEsR0FBQSxHQUFNLENBQU4sQ0FBQTtBQUNBLE9BQVMsNkJBQVQsR0FBQTtBQUNFLElBQUEsSUFBRyxDQUFDLENBQUEsR0FBSSxDQUFKLEtBQVMsQ0FBVixDQUFBLElBQWdCLENBQUMsQ0FBQSxHQUFJLENBQUosS0FBUyxDQUFWLENBQW5CO0FBQ0UsTUFBQSxHQUFBLElBQU8sQ0FBUCxDQURGO0tBREY7QUFBQSxHQURBO1NBSUEsS0FBQSxDQUFNLEdBQU4sRUFBVyxFQUFYLEVBQWdCLCtCQUFBLEdBQThCLEdBQTlDLEVBTGE7QUFBQSxDQVpmLENBQUE7O0FBQUEsT0FtQk8sQ0FBQyxNQUFSLEdBQWlCLFNBQUEsR0FBQTtBQUNmLE1BQUEsVUFB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TUFFQSxJQUFJLENBQUMsTUFBTCxHQUFjLElBRmQsQ0FERztLQUFBLE1BSUEsSUFBRyxHQUFHLENBQUMsSUFBSyxDQUFBLENBQUEsQ0FBVCxLQUFlLEdBQWxCO0FBQ0gsTUFBQSxJQUFJLENBQUMsR0FBTCxHQUFXLFVBQVgsQ0FBQTtBQUFBLE1BQ0EsSUFBSSxDQUFDLFdBQUwsR0FBbUIsSUFEbkIsQ0FERztLQUFBLE1BR0EsSUFBRyxHQUFHLENBQUMsSUFBSyxDQUFBLENBQUEsQ0FBVCxLQUFlLEdBQWxCO0FBQ0gsTUFBQSxJQUFJLENBQUMsR0FBTCxHQUFXLE1BQVgsQ0FBQTtBQUFBLE1BQ0EsT0FBQSxHQUFVLEtBRFYsQ0FBQTtBQUFBLE1BRUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFoQixDQUF3QixxV0FBQSxHQVVrQyxZQVZsQyxHQVVnRCxpS0FWeEUsQ0FGQSxDQURHO0tBQUEsTUFBQTtBQWtCSCxNQUFBLE9BQUEsR0FBVSxLQUFWLENBQUE7QUFBQSxNQUNBLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBaEIsQ0FBcUIsK0JBQXJCLENBREEsQ0FsQkc7S0FuREw7QUF3RUEsSUFBQSxJQUFHLElBQUksQ0FBQyxPQUFSO0FBQ0UsTUFBQSxJQUFJLENBQUMsV0FBTCxHQUFtQixJQUFuQixDQURGO0tBeEVBO0FBMkVBLElBQUEsSUFBRyxPQUFIO2FBQ0UsZUFBQSxDQUFnQixJQUFoQixFQURGO0tBNUVlO0VBQUEsRUFBQTtBQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0F4R2pCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3Rocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIil9dmFyIGY9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGYuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sZixmLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIm1vZHVsZS5leHBvcnRzID0gcHJvYmxlbSA9IG5ldyBQcm9ibGVtIFwiXCJcIlxuXG5Qcm9ibGVtIDE6IE11bHRpcGxlcyBvZiAzIGFuZCA1XG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbklmIHdlIGxpc3QgYWxsIHRoZSBuYXR1cmFsIG51bWJlcnMgYmVsb3cgMTAgdGhhdCBhcmUgbXVsdGlwbGVzIG9mIDMgb3IgNSwgd2UgZ2V0IDMsIDUsIDYgYW5kIDkuXG5UaGUgc3VtIG9mIHRoZXNlIG11bHRpcGxlcyBpcyAyMy5cblxuRmluZCB0aGUgc3VtIG9mIGFsbCB0aGUgbXVsdGlwbGVzIG9mIDMgb3IgNSBiZWxvdyAxMDAwLlxuXG5cIlwiXCJcblxucHJvYmxlbS50ZXN0ID0gLT5cbiAgc3VtID0gMFxuICBmb3IgaSBpbiBbMS4uLjEwXVxuICAgIGlmIChpICUgMyA9PSAwKSBvciAoaSAlIDUgPT0gMClcbiAgICAgIHN1bSArPSBpXG4gIGVxdWFsKHN1bSwgMjMsIFwiU3VtIG9mIG5hdHVyYWwgbnVtYmVycyA8IDEwOiAje3N1bX1cIilcblxucHJvYmxlbS5hbnN3ZXIgPSAtPlxuICBzdW0gPSAwXG4gIGZvciBpIGluIFsxLi4uMTAwMF1cbiAgICBpZiAoaSAlIDMgPT0gMCkgb3IgKGkgJSA1ID09IDApXG4gICAgICBzdW0gKz0gaVxuXG4gIHJldHVybiBzdW1cbiIsIm1vZHVsZS5leHBvcnRzID0gcHJvYmxlbSA9IG5ldyBQcm9ibGVtIFwiXCJcIlxuXG5Qcm9ibGVtIDI6IEV2ZW4gRmlib25hY2NpIG51bWJlcnNcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5FYWNoIG5ldyB0ZXJtIGluIHRoZSBGaWJvbmFjY2kgc2VxdWVuY2UgaXMgZ2VuZXJhdGVkIGJ5IGFkZGluZyB0aGUgcHJldmlvdXMgdHdvIHRlcm1zLlxuQnkgc3RhcnRpbmcgd2l0aCAxIGFuZCAyLCB0aGUgZmlyc3QgMTAgdGVybXMgd2lsbCBiZTpcblxuMSwgMiwgMywgNSwgOCwgMTMsIDIxLCAzNCwgNTUsIDg5LCAuLi5cblxuQnkgY29uc2lkZXJpbmcgdGhlIHRlcm1zIGluIHRoZSBGaWJvbmFjY2kgc2VxdWVuY2Ugd2hvc2UgdmFsdWVzIGRvIG5vdCBleGNlZWQgZm91ciBtaWxsaW9uLFxuZmluZCB0aGUgc3VtIG9mIHRoZSBldmVuLXZhbHVlZCB0ZXJtcy5cblxuXCJcIlwiXG5cbnByb2JsZW0uYW5zd2VyID0gLT5cbiAgcHJldiA9IDFcbiAgY3VyciA9IDFcbiAgc3VtID0gMFxuXG4gIHdoaWxlIGN1cnIgPCA0MDAwMDAwXG4gICAgaWYgKGN1cnIgJSAyKSA9PSAwXG4gICAgICBzdW0gKz0gY3VyclxuXG4gICAgbmV4dCA9IGN1cnIgKyBwcmV2XG4gICAgcHJldiA9IGN1cnJcbiAgICBjdXJyID0gbmV4dFxuXG4gIHJldHVybiBzdW1cbiIsIm1vZHVsZS5leHBvcnRzID0gcHJvYmxlbSA9IG5ldyBQcm9ibGVtIFwiXCJcIlxuXG5Qcm9ibGVtIDM6IExhcmdlc3QgcHJpbWUgZmFjdG9yXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblRoZSBwcmltZSBmYWN0b3JzIG9mIDEzMTk1IGFyZSA1LCA3LCAxMyBhbmQgMjkuXG5cbldoYXQgaXMgdGhlIGxhcmdlc3QgcHJpbWUgZmFjdG9yIG9mIHRoZSBudW1iZXIgNjAwODUxNDc1MTQzID9cblxuXCJcIlwiXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgU2hhbWVsZXNzbHkgcGlsZmVyZWQvYWRvcHRlZCBmcm9tIGh0dHA6Ly93d3cuamF2YXNjcmlwdGVyLm5ldC9mYXEvbnVtYmVyaXNwcmltZS5odG1cblxubGVhc3RGYWN0b3IgPSAobikgLT5cbiAgcmV0dXJuIE5hTiBpZiBpc05hTihuKSBvciBub3QgaXNGaW5pdGUobilcbiAgcmV0dXJuIDAgaWYgbiA9PSAwXG4gIHJldHVybiAxIGlmIChuICUgMSkgIT0gMCBvciAobiAqIG4pIDwgMlxuICByZXR1cm4gMiBpZiAobiAlIDIpID09IDBcbiAgcmV0dXJuIDMgaWYgKG4gJSAzKSA9PSAwXG4gIHJldHVybiA1IGlmIChuICUgNSkgPT0gMFxuXG4gIG0gPSBNYXRoLnNxcnQgblxuICBmb3IgaSBpbiBbNy4ubV0gYnkgMzBcbiAgICByZXR1cm4gaSAgICBpZiAobiAlIGkpICAgICAgPT0gMFxuICAgIHJldHVybiBpKzQgIGlmIChuICUgKGkrNCkpICA9PSAwXG4gICAgcmV0dXJuIGkrNiAgaWYgKG4gJSAoaSs2KSkgID09IDBcbiAgICByZXR1cm4gaSsxMCBpZiAobiAlIChpKzEwKSkgPT0gMFxuICAgIHJldHVybiBpKzEyIGlmIChuICUgKGkrMTIpKSA9PSAwXG4gICAgcmV0dXJuIGkrMTYgaWYgKG4gJSAoaSsxNikpID09IDBcbiAgICByZXR1cm4gaSsyMiBpZiAobiAlIChpKzIyKSkgPT0gMFxuICAgIHJldHVybiBpKzI0IGlmIChuICUgKGkrMjQpKSA9PSAwXG5cbiAgcmV0dXJuIG5cblxuaXNQcmltZSA9IChuKSAtPlxuICBpZiBpc05hTihuKSBvciBub3QgaXNGaW5pdGUobikgb3IgKG4gJSAxKSAhPSAwIG9yIChuIDwgMilcbiAgICByZXR1cm4gZmFsc2VcbiAgaWYgbiA9PSBsZWFzdEZhY3RvcihuKVxuICAgIHJldHVybiB0cnVlXG5cbiAgcmV0dXJuIGZhbHNlXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxucHJpbWVGYWN0b3JzID0gKG4pIC0+XG4gIHJldHVybiBbMV0gaWYgbiA9PSAxXG5cbiAgZmFjdG9ycyA9IFtdXG4gIHdoaWxlIG5vdCBpc1ByaW1lKG4pXG4gICAgZmFjdG9yID0gbGVhc3RGYWN0b3IobilcbiAgICBmYWN0b3JzLnB1c2ggZmFjdG9yXG4gICAgbiAvPSBmYWN0b3JcbiAgZmFjdG9ycy5wdXNoIG5cbiAgcmV0dXJuIGZhY3RvcnNcblxubGFyZ2VzdFByaW1lRmFjdG9yID0gKG4pIC0+XG4gIHJldHVybiAxIGlmIG4gPT0gMVxuXG4gIHdoaWxlIG5vdCBpc1ByaW1lKG4pXG4gICAgZmFjdG9yID0gbGVhc3RGYWN0b3IobilcbiAgICBuIC89IGZhY3RvclxuICByZXR1cm4gblxuXG5wcm9ibGVtLmFuc3dlciA9IC0+XG4gIHJldHVybiBsYXJnZXN0UHJpbWVGYWN0b3IoNjAwODUxNDc1MTQzKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBwcm9ibGVtID0gbmV3IFByb2JsZW0gXCJcIlwiXG5cblByb2JsZW0gNDogTGFyZ2VzdCBwYWxpbmRyb21lIHByb2R1Y3Rcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuQSBwYWxpbmRyb21pYyBudW1iZXIgcmVhZHMgdGhlIHNhbWUgYm90aCB3YXlzLlxuXG5GaW5kIHRoZSBsYXJnZXN0IHBhbGluZHJvbWUgbWFkZSBmcm9tIHRoZSBwcm9kdWN0IG9mIHR3byAzLWRpZ2l0IG51bWJlcnMuXG5cblwiXCJcIlxuXG5pc1BhbGluZHJvbWUgPSAobikgLT5cbiAgc3RyID0gbi50b1N0cmluZygpXG4gIGZvciBpIGluIFswLi4uKHN0ci5sZW5ndGggLyAyKV1cbiAgICBpZiBzdHJbaV0gIT0gc3RyW3N0ci5sZW5ndGggLSAxIC0gaV1cbiAgICAgIHJldHVybiBmYWxzZVxuICByZXR1cm4gdHJ1ZVxuXG5wcm9ibGVtLnRlc3QgPSAtPlxuICAjIE1ha2Ugc3VyZSBpc1BhbGluZHJvbWUgd29ya3MgcHJvcGVybHkgZmlyc3RcbiAgZm9yIHYgaW4gWzEsIDExLCAxMjEsIDEyMjEsIDEyMzIxLCAxMjM0MzIxXVxuICAgIGVxdWFsKGlzUGFsaW5kcm9tZSh2KSwgdHJ1ZSwgXCJpc1BhbGluZHJvbWUoI3t2fSkgcmV0dXJucyB0cnVlXCIpXG4gIGZvciB2IGluIFsxMiwgMTIzLCAxMjM0LCAxMjM0NSwgMTIzNDU2LCAxMjMyNF1cbiAgICBlcXVhbChpc1BhbGluZHJvbWUodiksIGZhbHNlLCBcImlzUGFsaW5kcm9tZSgje3Z9KSByZXR1cm5zIGZhbHNlXCIpXG5cbnByb2JsZW0uYW5zd2VyID0gLT5cbiAgbGFyZ2VzdGkgPSAwXG4gIGxhcmdlc3RqID0gMFxuICBsYXJnZXN0cCA9IDBcblxuICBmb3IgaSBpbiBbMTAwLi45OTldXG4gICAgZm9yIGogaW4gWzEwMC4uOTk5XVxuICAgICAgcHJvZHVjdCA9IGkgKiBqXG4gICAgICBpZiBpc1BhbGluZHJvbWUocHJvZHVjdClcbiAgICAgICAgbGFyZ2VzdGkgPSBpXG4gICAgICAgIGxhcmdlc3RqID0galxuICAgICAgICBsYXJnZXN0cCA9IHByb2R1Y3RcblxuICByZXR1cm4gbGFyZ2VzdHBcbiIsIm1vZHVsZS5leHBvcnRzID0gcHJvYmxlbSA9IG5ldyBQcm9ibGVtIFwiXCJcIlxuXG5Qcm9ibGVtIDU6IFNtYWxsZXN0IG11bHRpcGxlXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbjI1MjAgaXMgdGhlIHNtYWxsZXN0IG51bWJlciB0aGF0IGNhbiBiZSBkaXZpZGVkIGJ5IGVhY2ggb2YgdGhlIG51bWJlcnMgZnJvbSAxIHRvIDEwIHdpdGhvdXQgYW55IHJlbWFpbmRlci5cblxuV2hhdCBpcyB0aGUgc21hbGxlc3QgcG9zaXRpdmUgbnVtYmVyIHRoYXQgaXMgZXZlbmx5IGRpdmlzaWJsZSBieSBhbGwgb2YgdGhlIG51bWJlcnMgZnJvbSAxIHRvIDIwP1xuXG5cIlwiXCJcblxucHJvYmxlbS5hbnN3ZXIgPSAtPlxuICBuID0gMFxuICBsb29wXG4gICAgbiArPSAyMCAjIFByb2JhYmx5IGNvdWxkIGJlIHNvbWUgY2xldmVyIHN1bSBvZiBwcmltZXMgYmV0d2VlbiAxLTIwIG9yIHNvbWV0aGluZy4gSSBkb24ndCBjYXJlLlxuICAgIGZvdW5kID0gdHJ1ZVxuICAgIGZvciBpIGluIFsxLi4yMF1cbiAgICAgIGlmIChuICUgaSkgIT0gMFxuICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgIGJyZWFrXG5cbiAgICBicmVhayBpZiBmb3VuZFxuXG4gIHJldHVybiBuXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHByb2JsZW0gPSBuZXcgUHJvYmxlbSBcIlwiXCJcblxuUHJvYmxlbSA2OiBTdW0gc3F1YXJlIGRpZmZlcmVuY2Vcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblRoZSBzdW0gb2YgdGhlIHNxdWFyZXMgb2YgdGhlIGZpcnN0IHRlbiBuYXR1cmFsIG51bWJlcnMgaXMsXG5cbiAgICAgICAgICAgICAxXjIgKyAyXjIgKyAuLi4gKyAxMF4yID0gMzg1XG5cblRoZSBzcXVhcmUgb2YgdGhlIHN1bSBvZiB0aGUgZmlyc3QgdGVuIG5hdHVyYWwgbnVtYmVycyBpcyxcblxuICAgICAgICAgICgxICsgMiArIC4uLiArIDEwKV4yID0gNTVeMiA9IDMwMjVcblxuSGVuY2UgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgc3VtIG9mIHRoZSBzcXVhcmVzIG9mIHRoZSBmaXJzdCB0ZW4gbmF0dXJhbCBudW1iZXJzIGFuZCB0aGUgc3F1YXJlIG9mIHRoZSBzdW0gaXMgMzAyNSDiiJIgMzg1ID0gMjY0MC5cblxuRmluZCB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBzdW0gb2YgdGhlIHNxdWFyZXMgb2YgdGhlIGZpcnN0IG9uZSBodW5kcmVkIG5hdHVyYWwgbnVtYmVycyBhbmQgdGhlIHNxdWFyZSBvZiB0aGUgc3VtLlxuXG5cIlwiXCJcblxuc3VtT2ZTcXVhcmVzID0gKG4pIC0+XG4gIHN1bSA9IDBcbiAgZm9yIGkgaW4gWzEuLm5dXG4gICAgc3VtICs9IChpICogaSlcbiAgcmV0dXJuIHN1bVxuXG5zcXVhcmVPZlN1bSA9IChuKSAtPlxuICBzdW0gPSAwXG4gIGZvciBpIGluIFsxLi5uXVxuICAgIHN1bSArPSBpXG4gIHJldHVybiAoc3VtICogc3VtKVxuXG5kaWZmZXJlbmNlU3VtU3F1YXJlcyA9IChuKSAtPlxuICByZXR1cm4gc3F1YXJlT2ZTdW0obikgLSBzdW1PZlNxdWFyZXMobilcblxucHJvYmxlbS50ZXN0ID0gLT5cbiAgZXF1YWwoc3VtT2ZTcXVhcmVzKDEwKSwgMzg1LCBcIlN1bSBvZiBzcXVhcmVzIG9mIGZpcnN0IHRlbiBuYXR1cmFsIG51bWJlcnMgaXMgMzg1XCIpXG4gIGVxdWFsKHNxdWFyZU9mU3VtKDEwKSwgMzAyNSwgXCJTcXVhcmUgb2Ygc3VtIG9mIGZpcnN0IHRlbiBuYXR1cmFsIG51bWJlcnMgaXMgMzAyNVwiKVxuICBlcXVhbChkaWZmZXJlbmNlU3VtU3F1YXJlcygxMCksIDI2NDAsIFwiRGlmZmVyZW5jZSBpbiB2YWx1ZXMgZm9yIHRoZSBmaXJzdCB0ZW4gbmF0dXJhbCBudW1iZXJzIGlzIDI2NDBcIilcblxucHJvYmxlbS5hbnN3ZXIgPSAtPlxuICByZXR1cm4gZGlmZmVyZW5jZVN1bVNxdWFyZXMoMTAwKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBwcm9ibGVtID0gbmV3IFByb2JsZW0gXCJcIlwiXG5cblByb2JsZW0gNzogMTAwMDFzdCBwcmltZVxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbkJ5IGxpc3RpbmcgdGhlIGZpcnN0IHNpeCBwcmltZSBudW1iZXJzOiAyLCAzLCA1LCA3LCAxMSwgYW5kIDEzLCB3ZSBjYW4gc2VlIHRoYXQgdGhlIDZ0aCBwcmltZSBpcyAxMy5cblxuV2hhdCBpcyB0aGUgMTAsMDAxc3QgcHJpbWUgbnVtYmVyP1xuXG5cIlwiXCJcblxubnRoUHJpbWUgPSAobikgLT5cbiAgc2lldmUgPSBuZXcgSW5jcmVtZW50YWxTaWV2ZVxuICBmb3IgaSBpbiBbMS4uLm5dXG4gICAgc2lldmUubmV4dCgpXG4gIHJldHVybiBzaWV2ZS5uZXh0KClcblxucHJvYmxlbS50ZXN0ID0gLT5cbiAgZXF1YWwobnRoUHJpbWUoNiksIDEzLCBcIjZ0aCBwcmltZSBpcyAxM1wiKVxuXG5wcm9ibGVtLmFuc3dlciA9IC0+XG4gIHJldHVybiBudGhQcmltZSgxMDAwMSlcbiIsIm1vZHVsZS5leHBvcnRzID0gcHJvYmxlbSA9IG5ldyBQcm9ibGVtIFwiXCJcIlxuXG5Qcm9ibGVtIDg6IExhcmdlc3QgcHJvZHVjdCBpbiBhIHNlcmllc1xuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuVGhlIGZvdXIgYWRqYWNlbnQgZGlnaXRzIGluIHRoZSAxMDAwLWRpZ2l0IG51bWJlciB0aGF0IGhhdmUgdGhlIGdyZWF0ZXN0IHByb2R1Y3QgYXJlIDkgeCA5IHggOCB4IDkgPSA1ODMyLlxuXG4gIDczMTY3MTc2NTMxMzMwNjI0OTE5MjI1MTE5Njc0NDI2NTc0NzQyMzU1MzQ5MTk0OTM0XG4gIDk2OTgzNTIwMzEyNzc0NTA2MzI2MjM5NTc4MzE4MDE2OTg0ODAxODY5NDc4ODUxODQzXG4gIDg1ODYxNTYwNzg5MTEyOTQ5NDk1NDU5NTAxNzM3OTU4MzMxOTUyODUzMjA4ODA1NTExXG4gIDEyNTQwNjk4NzQ3MTU4NTIzODYzMDUwNzE1NjkzMjkwOTYzMjk1MjI3NDQzMDQzNTU3XG4gIDY2ODk2NjQ4OTUwNDQ1MjQ0NTIzMTYxNzMxODU2NDAzMDk4NzExMTIxNzIyMzgzMTEzXG4gIDYyMjI5ODkzNDIzMzgwMzA4MTM1MzM2Mjc2NjE0MjgyODA2NDQ0NDg2NjQ1MjM4NzQ5XG4gIDMwMzU4OTA3Mjk2MjkwNDkxNTYwNDQwNzcyMzkwNzEzODEwNTE1ODU5MzA3OTYwODY2XG4gIDcwMTcyNDI3MTIxODgzOTk4Nzk3OTA4NzkyMjc0OTIxOTAxNjk5NzIwODg4MDkzNzc2XG4gIDY1NzI3MzMzMDAxMDUzMzY3ODgxMjIwMjM1NDIxODA5NzUxMjU0NTQwNTk0NzUyMjQzXG4gIDUyNTg0OTA3NzExNjcwNTU2MDEzNjA0ODM5NTg2NDQ2NzA2MzI0NDE1NzIyMTU1Mzk3XG4gIDUzNjk3ODE3OTc3ODQ2MTc0MDY0OTU1MTQ5MjkwODYyNTY5MzIxOTc4NDY4NjIyNDgyXG4gIDgzOTcyMjQxMzc1NjU3MDU2MDU3NDkwMjYxNDA3OTcyOTY4NjUyNDE0NTM1MTAwNDc0XG4gIDgyMTY2MzcwNDg0NDAzMTk5ODkwMDA4ODk1MjQzNDUwNjU4NTQxMjI3NTg4NjY2ODgxXG4gIDE2NDI3MTcxNDc5OTI0NDQyOTI4MjMwODYzNDY1Njc0ODEzOTE5MTIzMTYyODI0NTg2XG4gIDE3ODY2NDU4MzU5MTI0NTY2NTI5NDc2NTQ1NjgyODQ4OTEyODgzMTQyNjA3NjkwMDQyXG4gIDI0MjE5MDIyNjcxMDU1NjI2MzIxMTExMTA5MzcwNTQ0MjE3NTA2OTQxNjU4OTYwNDA4XG4gIDA3MTk4NDAzODUwOTYyNDU1NDQ0MzYyOTgxMjMwOTg3ODc5OTI3MjQ0Mjg0OTA5MTg4XG4gIDg0NTgwMTU2MTY2MDk3OTE5MTMzODc1NDk5MjAwNTI0MDYzNjg5OTEyNTYwNzE3NjA2XG4gIDA1ODg2MTE2NDY3MTA5NDA1MDc3NTQxMDAyMjU2OTgzMTU1MjAwMDU1OTM1NzI5NzI1XG4gIDcxNjM2MjY5NTYxODgyNjcwNDI4MjUyNDgzNjAwODIzMjU3NTMwNDIwNzUyOTYzNDUwXG5cbkZpbmQgdGhlIHRoaXJ0ZWVuIGFkamFjZW50IGRpZ2l0cyBpbiB0aGUgMTAwMC1kaWdpdCBudW1iZXIgdGhhdCBoYXZlIHRoZSBncmVhdGVzdCBwcm9kdWN0LiBXaGF0IGlzIHRoZSB2YWx1ZSBvZiB0aGlzIHByb2R1Y3Q/XG5cblwiXCJcIlxuXG5zdHIgPSBcIlwiXCJcbiAgICAgIDczMTY3MTc2NTMxMzMwNjI0OTE5MjI1MTE5Njc0NDI2NTc0NzQyMzU1MzQ5MTk0OTM0XG4gICAgICA5Njk4MzUyMDMxMjc3NDUwNjMyNjIzOTU3ODMxODAxNjk4NDgwMTg2OTQ3ODg1MTg0M1xuICAgICAgODU4NjE1NjA3ODkxMTI5NDk0OTU0NTk1MDE3Mzc5NTgzMzE5NTI4NTMyMDg4MDU1MTFcbiAgICAgIDEyNTQwNjk4NzQ3MTU4NTIzODYzMDUwNzE1NjkzMjkwOTYzMjk1MjI3NDQzMDQzNTU3XG4gICAgICA2Njg5NjY0ODk1MDQ0NTI0NDUyMzE2MTczMTg1NjQwMzA5ODcxMTEyMTcyMjM4MzExM1xuICAgICAgNjIyMjk4OTM0MjMzODAzMDgxMzUzMzYyNzY2MTQyODI4MDY0NDQ0ODY2NDUyMzg3NDlcbiAgICAgIDMwMzU4OTA3Mjk2MjkwNDkxNTYwNDQwNzcyMzkwNzEzODEwNTE1ODU5MzA3OTYwODY2XG4gICAgICA3MDE3MjQyNzEyMTg4Mzk5ODc5NzkwODc5MjI3NDkyMTkwMTY5OTcyMDg4ODA5Mzc3NlxuICAgICAgNjU3MjczMzMwMDEwNTMzNjc4ODEyMjAyMzU0MjE4MDk3NTEyNTQ1NDA1OTQ3NTIyNDNcbiAgICAgIDUyNTg0OTA3NzExNjcwNTU2MDEzNjA0ODM5NTg2NDQ2NzA2MzI0NDE1NzIyMTU1Mzk3XG4gICAgICA1MzY5NzgxNzk3Nzg0NjE3NDA2NDk1NTE0OTI5MDg2MjU2OTMyMTk3ODQ2ODYyMjQ4MlxuICAgICAgODM5NzIyNDEzNzU2NTcwNTYwNTc0OTAyNjE0MDc5NzI5Njg2NTI0MTQ1MzUxMDA0NzRcbiAgICAgIDgyMTY2MzcwNDg0NDAzMTk5ODkwMDA4ODk1MjQzNDUwNjU4NTQxMjI3NTg4NjY2ODgxXG4gICAgICAxNjQyNzE3MTQ3OTkyNDQ0MjkyODIzMDg2MzQ2NTY3NDgxMzkxOTEyMzE2MjgyNDU4NlxuICAgICAgMTc4NjY0NTgzNTkxMjQ1NjY1Mjk0NzY1NDU2ODI4NDg5MTI4ODMxNDI2MDc2OTAwNDJcbiAgICAgIDI0MjE5MDIyNjcxMDU1NjI2MzIxMTExMTA5MzcwNTQ0MjE3NTA2OTQxNjU4OTYwNDA4XG4gICAgICAwNzE5ODQwMzg1MDk2MjQ1NTQ0NDM2Mjk4MTIzMDk4Nzg3OTkyNzI0NDI4NDkwOTE4OFxuICAgICAgODQ1ODAxNTYxNjYwOTc5MTkxMzM4NzU0OTkyMDA1MjQwNjM2ODk5MTI1NjA3MTc2MDZcbiAgICAgIDA1ODg2MTE2NDY3MTA5NDA1MDc3NTQxMDAyMjU2OTgzMTU1MjAwMDU1OTM1NzI5NzI1XG4gICAgICA3MTYzNjI2OTU2MTg4MjY3MDQyODI1MjQ4MzYwMDgyMzI1NzUzMDQyMDc1Mjk2MzQ1MFxuICAgICAgXCJcIlwiXG5zdHIgPSBzdHIucmVwbGFjZSgvW14wLTldL2dtLCBcIlwiKVxuZGlnaXRzID0gKHBhcnNlSW50KGRpZ2l0KSBmb3IgZGlnaXQgaW4gc3RyKVxuXG5sYXJnZXN0UHJvZHVjdCA9IChkaWdpdENvdW50KSAtPlxuICByZXR1cm4gMCBpZiBkaWdpdENvdW50ID4gZGlnaXRzLmxlbmd0aFxuXG4gIGxhcmdlc3QgPSAwXG4gIGZvciBzdGFydCBpbiBbMC4uKGRpZ2l0cy5sZW5ndGggLSBkaWdpdENvdW50KV1cbiAgICBlbmQgPSBzdGFydCArIGRpZ2l0Q291bnRcbiAgICBwcm9kdWN0ID0gMVxuICAgIGZvciBpIGluIFtzdGFydC4uLmVuZF1cbiAgICAgIHByb2R1Y3QgKj0gZGlnaXRzW2ldXG4gICAgaWYgbGFyZ2VzdCA8IHByb2R1Y3RcbiAgICAgIGxhcmdlc3QgPSBwcm9kdWN0XG5cbiAgcmV0dXJuIGxhcmdlc3RcblxucHJvYmxlbS50ZXN0ID0gLT5cbiAgZXF1YWwobGFyZ2VzdFByb2R1Y3QoNCksIDU4MzIsIFwiR3JlYXRlc3QgcHJvZHVjdCBvZiA0IGFkamFjZW50IGRpZ2l0cyBpcyA1ODMyXCIpXG5cbnByb2JsZW0uYW5zd2VyID0gLT5cbiAgcmV0dXJuIGxhcmdlc3RQcm9kdWN0KDEzKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBwcm9ibGVtID0gbmV3IFByb2JsZW0gXCJcIlwiXG5cblByb2JsZW0gOTogU3BlY2lhbCBQeXRoYWdvcmVhbiB0cmlwbGV0XG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5BIFB5dGhhZ29yZWFuIHRyaXBsZXQgaXMgYSBzZXQgb2YgdGhyZWUgbmF0dXJhbCBudW1iZXJzLCBhIDwgYiA8IGMsIGZvciB3aGljaCxcblxuICAgIGFeMiArIGJeMiA9IGNeMlxuXG5Gb3IgZXhhbXBsZSwgM14yICsgNF4yID0gOSArIDE2ID0gMjUgPSA1XjIuXG5cblRoZXJlIGV4aXN0cyBleGFjdGx5IG9uZSBQeXRoYWdvcmVhbiB0cmlwbGV0IGZvciB3aGljaCBhICsgYiArIGMgPSAxMDAwLlxuXG5GaW5kIHRoZSBwcm9kdWN0IGFiYy5cblxuXCJcIlwiXG5cbmlzVHJpcGxldCA9IChhLCBiLCBjKSAtPlxuICByZXR1cm4gKChhKmEpICsgKGIqYikpID09IChjKmMpXG5cbmZpbmRGaXJzdFRyaXBsZXQgPSAoc3VtKSAtPlxuICBmb3IgYSBpbiBbMS4uLjEwMDBdXG4gICAgZm9yIGIgaW4gWzEuLi4xMDAwXVxuICAgICAgYyA9IDEwMDAgLSBhIC0gYlxuICAgICAgaWYgaXNUcmlwbGV0KGEsIGIsIGMpXG4gICAgICAgIHJldHVybiBbYSwgYiwgY11cblxuICByZXR1cm4gZmFsc2VcblxuXG5wcm9ibGVtLnRlc3QgPSAtPlxuICBlcXVhbChpc1RyaXBsZXQoMywgNCwgNSksIHRydWUsIFwiKDMsNCw1KSBpcyBhIFB5dGhhZ29yZWFuIHRyaXBsZXRcIilcblxucHJvYmxlbS5hbnN3ZXIgPSAtPlxuICByZXR1cm4gZmluZEZpcnN0VHJpcGxldCgxMDAwKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBwcm9ibGVtID0gbmV3IFByb2JsZW0gXCJcIlwiXG5cblByb2JsZW0gMTA6IFN1bW1hdGlvbiBvZiBwcmltZXNcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuVGhlIHN1bSBvZiB0aGUgcHJpbWVzIGJlbG93IDEwIGlzIDIgKyAzICsgNSArIDcgPSAxNy5cblxuRmluZCB0aGUgc3VtIG9mIGFsbCB0aGUgcHJpbWVzIGJlbG93IHR3byBtaWxsaW9uLlxuXG5cIlwiXCJcblxucHJpbWVTdW0gPSAoY2VpbGluZykgLT5cbiAgc2lldmUgPSBuZXcgSW5jcmVtZW50YWxTaWV2ZVxuXG4gIHN1bSA9IDBcbiAgbG9vcFxuICAgIG4gPSBzaWV2ZS5uZXh0KClcbiAgICBpZiBuID49IGNlaWxpbmdcbiAgICAgIGJyZWFrXG4gICAgc3VtICs9IG5cblxuICByZXR1cm4gc3VtXG5cbnByb2JsZW0udGVzdCA9IC0+XG4gIGVxdWFsKHByaW1lU3VtKDEwKSwgMTcsIFwiU3VtIG9mIHByaW1lcyBiZWxvdyAxMCBpcyAxN1wiKVxuXG5wcm9ibGVtLmFuc3dlciA9IC0+XG4gIHJldHVybiBwcmltZVN1bSgyMDAwMDAwKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBwcm9ibGVtID0gbmV3IFByb2JsZW0gXCJcIlwiXG5cblByb2JsZW0gMTE6IExhcmdlc3QgcHJvZHVjdCBpbiBhIGdyaWRcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuSW4gdGhlIDIweDIwIGdyaWQgYmVsb3csIGZvdXIgbnVtYmVycyBhbG9uZyBhIGRpYWdvbmFsIGxpbmUgaGF2ZSBiZWVuIG1hcmtlZCBpbiByZWQuXG5cbiAgICAgICAgICAwOCAwMiAyMiA5NyAzOCAxNSAwMCA0MCAwMCA3NSAwNCAwNSAwNyA3OCA1MiAxMiA1MCA3NyA5MSAwOFxuICAgICAgICAgIDQ5IDQ5IDk5IDQwIDE3IDgxIDE4IDU3IDYwIDg3IDE3IDQwIDk4IDQzIDY5IDQ4IDA0IDU2IDYyIDAwXG4gICAgICAgICAgODEgNDkgMzEgNzMgNTUgNzkgMTQgMjkgOTMgNzEgNDAgNjcgNTMgODggMzAgMDMgNDkgMTMgMzYgNjVcbiAgICAgICAgICA1MiA3MCA5NSAyMyAwNCA2MCAxMSA0MiA2OSAyNCA2OCA1NiAwMSAzMiA1NiA3MSAzNyAwMiAzNiA5MVxuICAgICAgICAgIDIyIDMxIDE2IDcxIDUxIDY3IDYzIDg5IDQxIDkyIDM2IDU0IDIyIDQwIDQwIDI4IDY2IDMzIDEzIDgwXG4gICAgICAgICAgMjQgNDcgMzIgNjAgOTkgMDMgNDUgMDIgNDQgNzUgMzMgNTMgNzggMzYgODQgMjAgMzUgMTcgMTIgNTBcbiAgICAgICAgICAzMiA5OCA4MSAyOCA2NCAyMyA2NyAxMCAyNl8zOCA0MCA2NyA1OSA1NCA3MCA2NiAxOCAzOCA2NCA3MFxuICAgICAgICAgIDY3IDI2IDIwIDY4IDAyIDYyIDEyIDIwIDk1IDYzXzk0IDM5IDYzIDA4IDQwIDkxIDY2IDQ5IDk0IDIxXG4gICAgICAgICAgMjQgNTUgNTggMDUgNjYgNzMgOTkgMjYgOTcgMTcgNzhfNzggOTYgODMgMTQgODggMzQgODkgNjMgNzJcbiAgICAgICAgICAyMSAzNiAyMyAwOSA3NSAwMCA3NiA0NCAyMCA0NSAzNSAxNCAwMCA2MSAzMyA5NyAzNCAzMSAzMyA5NVxuICAgICAgICAgIDc4IDE3IDUzIDI4IDIyIDc1IDMxIDY3IDE1IDk0IDAzIDgwIDA0IDYyIDE2IDE0IDA5IDUzIDU2IDkyXG4gICAgICAgICAgMTYgMzkgMDUgNDIgOTYgMzUgMzEgNDcgNTUgNTggODggMjQgMDAgMTcgNTQgMjQgMzYgMjkgODUgNTdcbiAgICAgICAgICA4NiA1NiAwMCA0OCAzNSA3MSA4OSAwNyAwNSA0NCA0NCAzNyA0NCA2MCAyMSA1OCA1MSA1NCAxNyA1OFxuICAgICAgICAgIDE5IDgwIDgxIDY4IDA1IDk0IDQ3IDY5IDI4IDczIDkyIDEzIDg2IDUyIDE3IDc3IDA0IDg5IDU1IDQwXG4gICAgICAgICAgMDQgNTIgMDggODMgOTcgMzUgOTkgMTYgMDcgOTcgNTcgMzIgMTYgMjYgMjYgNzkgMzMgMjcgOTggNjZcbiAgICAgICAgICA4OCAzNiA2OCA4NyA1NyA2MiAyMCA3MiAwMyA0NiAzMyA2NyA0NiA1NSAxMiAzMiA2MyA5MyA1MyA2OVxuICAgICAgICAgIDA0IDQyIDE2IDczIDM4IDI1IDM5IDExIDI0IDk0IDcyIDE4IDA4IDQ2IDI5IDMyIDQwIDYyIDc2IDM2XG4gICAgICAgICAgMjAgNjkgMzYgNDEgNzIgMzAgMjMgODggMzQgNjIgOTkgNjkgODIgNjcgNTkgODUgNzQgMDQgMzYgMTZcbiAgICAgICAgICAyMCA3MyAzNSAyOSA3OCAzMSA5MCAwMSA3NCAzMSA0OSA3MSA0OCA4NiA4MSAxNiAyMyA1NyAwNSA1NFxuICAgICAgICAgIDAxIDcwIDU0IDcxIDgzIDUxIDU0IDY5IDE2IDkyIDMzIDQ4IDYxIDQzIDUyIDAxIDg5IDE5IDY3IDQ4XG5cblRoZSBwcm9kdWN0IG9mIHRoZXNlIG51bWJlcnMgaXMgMjYgeCA2MyB4IDc4IHggMTQgPSAxNzg4Njk2LlxuXG5XaGF0IGlzIHRoZSBncmVhdGVzdCBwcm9kdWN0IG9mIGZvdXIgYWRqYWNlbnQgbnVtYmVycyBpbiB0aGUgc2FtZSBkaXJlY3Rpb24gKHVwLCBkb3duLCBsZWZ0LCByaWdodCwgb3IgZGlhZ29uYWxseSkgaW4gdGhlIDIweDIwIGdyaWQ/XG5cblwiXCJcIlxuXG5ncmlkID0gbnVsbFxuXG5wcmVwYXJlR3JpZCA9IC0+XG4gIHJhd0RpZ2l0cyA9IFwiXCJcIlxuICAgIDA4IDAyIDIyIDk3IDM4IDE1IDAwIDQwIDAwIDc1IDA0IDA1IDA3IDc4IDUyIDEyIDUwIDc3IDkxIDA4XG4gICAgNDkgNDkgOTkgNDAgMTcgODEgMTggNTcgNjAgODcgMTcgNDAgOTggNDMgNjkgNDggMDQgNTYgNjIgMDBcbiAgICA4MSA0OSAzMSA3MyA1NSA3OSAxNCAyOSA5MyA3MSA0MCA2NyA1MyA4OCAzMCAwMyA0OSAxMyAzNiA2NVxuICAgIDUyIDcwIDk1IDIzIDA0IDYwIDExIDQyIDY5IDI0IDY4IDU2IDAxIDMyIDU2IDcxIDM3IDAyIDM2IDkxXG4gICAgMjIgMzEgMTYgNzEgNTEgNjcgNjMgODkgNDEgOTIgMzYgNTQgMjIgNDAgNDAgMjggNjYgMzMgMTMgODBcbiAgICAyNCA0NyAzMiA2MCA5OSAwMyA0NSAwMiA0NCA3NSAzMyA1MyA3OCAzNiA4NCAyMCAzNSAxNyAxMiA1MFxuICAgIDMyIDk4IDgxIDI4IDY0IDIzIDY3IDEwIDI2IDM4IDQwIDY3IDU5IDU0IDcwIDY2IDE4IDM4IDY0IDcwXG4gICAgNjcgMjYgMjAgNjggMDIgNjIgMTIgMjAgOTUgNjMgOTQgMzkgNjMgMDggNDAgOTEgNjYgNDkgOTQgMjFcbiAgICAyNCA1NSA1OCAwNSA2NiA3MyA5OSAyNiA5NyAxNyA3OCA3OCA5NiA4MyAxNCA4OCAzNCA4OSA2MyA3MlxuICAgIDIxIDM2IDIzIDA5IDc1IDAwIDc2IDQ0IDIwIDQ1IDM1IDE0IDAwIDYxIDMzIDk3IDM0IDMxIDMzIDk1XG4gICAgNzggMTcgNTMgMjggMjIgNzUgMzEgNjcgMTUgOTQgMDMgODAgMDQgNjIgMTYgMTQgMDkgNTMgNTYgOTJcbiAgICAxNiAzOSAwNSA0MiA5NiAzNSAzMSA0NyA1NSA1OCA4OCAyNCAwMCAxNyA1NCAyNCAzNiAyOSA4NSA1N1xuICAgIDg2IDU2IDAwIDQ4IDM1IDcxIDg5IDA3IDA1IDQ0IDQ0IDM3IDQ0IDYwIDIxIDU4IDUxIDU0IDE3IDU4XG4gICAgMTkgODAgODEgNjggMDUgOTQgNDcgNjkgMjggNzMgOTIgMTMgODYgNTIgMTcgNzcgMDQgODkgNTUgNDBcbiAgICAwNCA1MiAwOCA4MyA5NyAzNSA5OSAxNiAwNyA5NyA1NyAzMiAxNiAyNiAyNiA3OSAzMyAyNyA5OCA2NlxuICAgIDg4IDM2IDY4IDg3IDU3IDYyIDIwIDcyIDAzIDQ2IDMzIDY3IDQ2IDU1IDEyIDMyIDYzIDkzIDUzIDY5XG4gICAgMDQgNDIgMTYgNzMgMzggMjUgMzkgMTEgMjQgOTQgNzIgMTggMDggNDYgMjkgMzIgNDAgNjIgNzYgMzZcbiAgICAyMCA2OSAzNiA0MSA3MiAzMCAyMyA4OCAzNCA2MiA5OSA2OSA4MiA2NyA1OSA4NSA3NCAwNCAzNiAxNlxuICAgIDIwIDczIDM1IDI5IDc4IDMxIDkwIDAxIDc0IDMxIDQ5IDcxIDQ4IDg2IDgxIDE2IDIzIDU3IDA1IDU0XG4gICAgMDEgNzAgNTQgNzEgODMgNTEgNTQgNjkgMTYgOTIgMzMgNDggNjEgNDMgNTIgMDEgODkgMTkgNjcgNDhcbiAgXCJcIlwiLnJlcGxhY2UoL1teMC05IF0vZ20sIFwiIFwiKVxuXG4gIGRpZ2l0cyA9IChwYXJzZUludChkaWdpdCkgZm9yIGRpZ2l0IGluIHJhd0RpZ2l0cy5zcGxpdChcIiBcIikpXG4gIGdyaWQgPSBBcnJheSgyMClcbiAgZm9yIGkgaW4gWzAuLi4yMF1cbiAgICBncmlkW2ldID0gQXJyYXkoMjApXG5cbiAgaW5kZXggPSAwXG4gIGZvciBqIGluIFswLi4uMjBdXG4gICAgZm9yIGkgaW4gWzAuLi4yMF1cbiAgICAgIGdyaWRbaV1bal0gPSBkaWdpdHNbaW5kZXhdXG4gICAgICBpbmRleCsrXG5cbnByZXBhcmVHcmlkKClcblxuIyBHZXRzIGEgcHJvZHVjdCBvZiA0IHZhbHVlcyBzdGFydGluZyBhdCAoc3gsIHN5KSwgaGVhZGluZyBpbiB0aGUgZGlyZWN0aW9uIChkeCwgZHkpXG4jIFJldHVybnMgLTEgaWYgdGhlcmUgaXMgbm8gcm9vbSB0byBtYWtlIGEgc3RyaXBlIG9mIDQuXG5nZXRMaW5lUHJvZHVjdCA9IChzeCwgc3ksIGR4LCBkeSkgLT5cbiAgZXggPSBzeCArICg0ICogZHgpXG4gIHJldHVybiAtMSBpZiAoZXggPCAwKSBvciAoZXggPj0gMjApXG4gIGV5ID0gc3kgKyAoNCAqIGR5KVxuICByZXR1cm4gLTEgaWYgKGV5IDwgMCkgb3IgKGV5ID49IDIwKVxuXG4gIHggPSBzeFxuICB5ID0gc3lcbiAgcHJvZHVjdCA9IDFcbiAgZm9yIGkgaW4gWzAuLi40XVxuICAgIHByb2R1Y3QgKj0gZ3JpZFt4XVt5XVxuICAgIHggKz0gZHhcbiAgICB5ICs9IGR5XG5cbiAgcmV0dXJuIHByb2R1Y3RcblxuZ2V0TGluZSA9IChzeCwgc3ksIGR4LCBkeSkgLT5cbiAgZXggPSBzeCArICg0ICogZHgpXG4gIHJldHVybiBbXSBpZiAoZXggPCAwKSBvciAoZXggPj0gMjApXG4gIGV5ID0gc3kgKyAoNCAqIGR5KVxuICByZXR1cm4gW10gaWYgKGV5IDwgMCkgb3IgKGV5ID49IDIwKVxuXG4gIGxpbmUgPSBbXVxuXG4gIHggPSBzeFxuICB5ID0gc3lcbiAgZm9yIGkgaW4gWzAuLi40XVxuICAgIGxpbmUucHVzaCBncmlkW3hdW3ldXG4gICAgeCArPSBkeFxuICAgIHkgKz0gZHlcblxuICByZXR1cm4gbGluZVxuXG5wcm9ibGVtLnRlc3QgPSAtPlxuICAjIEV4YW1wbGUgaXMgZGlhZ29uYWwgcmlnaHQvZG93biBmcm9tICg4LDYpXG4gIGVxdWFsKGdldExpbmVQcm9kdWN0KDgsIDYsIDEsIDEpLCAxNzg4Njk2LCBcIkRpYWdvbmFsIHZhbHVlIHNob3duIGluIGV4YW1wbGUgZXF1YWxzIDEsNzg4LDY5NlwiKVxuXG5wcm9ibGVtLmFuc3dlciA9IC0+XG4gIG1heCA9XG4gICAgcHJvZHVjdDogMVxuICAgIGk6IDBcbiAgICBqOiAwXG4gICAgZGlyOiBcInJpZ2h0XCJcblxuICBmb3IgaiBpbiBbMC4uLjIwXVxuICAgIGZvciBpIGluIFswLi4uMjBdXG4gICAgICBwID0gZ2V0TGluZVByb2R1Y3QoaSwgaiwgMSwgMClcbiAgICAgIGlmIG1heC5wcm9kdWN0IDwgcFxuICAgICAgICBtYXgucHJvZHVjdCA9IHBcbiAgICAgICAgbWF4LmkgPSBpXG4gICAgICAgIG1heC5qID0galxuICAgICAgICBtYXguZGlyID0gXCJyaWdodFwiXG4gICAgICBwID0gZ2V0TGluZVByb2R1Y3QoaSwgaiwgMCwgMSlcbiAgICAgIGlmIG1heC5wcm9kdWN0IDwgcFxuICAgICAgICBtYXgucHJvZHVjdCA9IHBcbiAgICAgICAgbWF4LmkgPSBpXG4gICAgICAgIG1heC5qID0galxuICAgICAgICBtYXguZGlyID0gXCJkb3duXCJcbiAgICAgIHAgPSBnZXRMaW5lUHJvZHVjdChpLCBqLCAxLCAxKVxuICAgICAgaWYgbWF4LnByb2R1Y3QgPCBwXG4gICAgICAgIG1heC5wcm9kdWN0ID0gcFxuICAgICAgICBtYXguaSA9IGlcbiAgICAgICAgbWF4LmogPSBqXG4gICAgICAgIG1heC5kaXIgPSBcImRpYWdvbmFsXCJcblxuICByZXR1cm4gbWF4XG4iLCJyb290ID0gd2luZG93ICMgZXhwb3J0cyA/IHRoaXNcclxuXHJcbiMgU2lldmUgd2FzIGJsaW5kbHkgdGFrZW4vYWRhcHRlZCBmcm9tIFJvc2V0dGFDb2RlLiBET05UIEVWRU4gQ0FSRVxyXG5jbGFzcyBJbmNyZW1lbnRhbFNpZXZlXHJcbiAgY29uc3RydWN0b3I6IC0+XHJcbiAgICBAbiA9IDBcclxuXHJcbiAgbmV4dDogLT5cclxuICAgIEBuICs9IDJcclxuICAgIGlmIEBuIDwgN1xyXG4gICAgICBpZiBAbiA8IDNcclxuICAgICAgICBAbiA9IDFcclxuICAgICAgICByZXR1cm4gMlxyXG4gICAgICBpZiBAbiA8IDVcclxuICAgICAgICByZXR1cm4gM1xyXG4gICAgICBAZGljdCA9IHt9XHJcbiAgICAgIEBicHMgPSBuZXcgSW5jcmVtZW50YWxTaWV2ZSgpXHJcbiAgICAgIEBicHMubmV4dCgpXHJcbiAgICAgIEBwID0gQGJwcy5uZXh0KClcclxuICAgICAgQHEgPSBAcCAqIEBwXHJcbiAgICAgIHJldHVybiA1XHJcbiAgICBlbHNlXHJcbiAgICAgIHMgPSBAZGljdFtAbl1cclxuICAgICAgaWYgbm90IHNcclxuICAgICAgICBpZiBAbiA8IEBxXHJcbiAgICAgICAgICByZXR1cm4gQG5cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICBwMiA9IEBwIDw8IDFcclxuICAgICAgICAgIEBkaWN0W0BuICsgcDJdID0gcDJcclxuICAgICAgICAgIEBwID0gQGJwcy5uZXh0KClcclxuICAgICAgICAgIEBxID0gQHAgKiBAcFxyXG4gICAgICAgICAgcmV0dXJuIEBuZXh0KClcclxuICAgICAgZWxzZVxyXG4gICAgICAgIGRlbGV0ZSBAZGljdFtAbl1cclxuICAgICAgICBueHQgPSBAbiArIHNcclxuICAgICAgICB3aGlsZSAoQGRpY3Rbbnh0XSlcclxuICAgICAgICAgIG54dCArPSBzXHJcbiAgICAgICAgQGRpY3Rbbnh0XSA9IHNcclxuICAgICAgICByZXR1cm4gQG5leHQoKVxyXG5cclxucm9vdC5JbmNyZW1lbnRhbFNpZXZlID0gSW5jcmVtZW50YWxTaWV2ZVxyXG4iLCJMQVNUX1BST0JMRU0gPSAxMVxyXG5cclxucm9vdCA9IHdpbmRvdyAjIGV4cG9ydHMgPyB0aGlzXHJcblxyXG5yb290LmVzY2FwZWRTdHJpbmdpZnkgPSAobykgLT5cclxuICBzdHIgPSBKU09OLnN0cmluZ2lmeShvKVxyXG4gIHN0ciA9IHN0ci5yZXBsYWNlKFwiXVwiLCBcIlxcXFxdXCIpXHJcbiAgcmV0dXJuIHN0clxyXG5cclxucm9vdC5ydW5BbGwgPSAtPlxyXG4gIGxhc3RQdXp6bGUgPSBMQVNUX1BST0JMRU1cclxuICBuZXh0SW5kZXggPSAwXHJcblxyXG4gIGxvYWROZXh0U2NyaXB0ID0gLT5cclxuICAgIGlmIG5leHRJbmRleCA8IGxhc3RQdXp6bGVcclxuICAgICAgbmV4dEluZGV4KytcclxuICAgICAgcnVuVGVzdChuZXh0SW5kZXgsIGxvYWROZXh0U2NyaXB0KVxyXG4gIGxvYWROZXh0U2NyaXB0KClcclxuXHJcbnJvb3QuaXRlcmF0ZVByb2JsZW1zID0gKGFyZ3MpIC0+XHJcblxyXG4gIGluZGV4VG9Qcm9jZXNzID0gbnVsbFxyXG4gIGlmIGFyZ3MuZW5kSW5kZXggPiAwXHJcbiAgICBpZiBhcmdzLnN0YXJ0SW5kZXggPD0gYXJncy5lbmRJbmRleFxyXG4gICAgICBpbmRleFRvUHJvY2VzcyA9IGFyZ3Muc3RhcnRJbmRleFxyXG4gICAgICBhcmdzLnN0YXJ0SW5kZXgrK1xyXG4gIGVsc2VcclxuICAgIGlmIGFyZ3MubGlzdC5sZW5ndGggPiAwXHJcbiAgICAgIGluZGV4VG9Qcm9jZXNzID0gYXJncy5saXN0LnNoaWZ0KClcclxuXHJcbiAgaWYgaW5kZXhUb1Byb2Nlc3MgIT0gbnVsbFxyXG4gICAgaXRlcmF0ZU5leHQgPSAtPlxyXG4gICAgICB3aW5kb3cuYXJncyA9IGFyZ3NcclxuICAgICAgcnVuVGVzdCBpbmRleFRvUHJvY2VzcywgLT5cclxuICAgICAgICBpdGVyYXRlUHJvYmxlbXMoYXJncylcclxuICAgIGl0ZXJhdGVOZXh0KClcclxuXHJcbnJvb3QucnVuVGVzdCA9IChpbmRleCwgY2IpIC0+XHJcbiAgbW9kdWxlTmFtZSA9IFwiZSN7KCcwMDAnK2luZGV4KS5zbGljZSgtMyl9XCJcclxuICB3aW5kb3cuaW5kZXggPSBpbmRleFxyXG4gIHByb2JsZW0gPSByZXF1aXJlKG1vZHVsZU5hbWUpXHJcbiAgcHJvYmxlbS5wcm9jZXNzKClcclxuICB3aW5kb3cuc2V0VGltZW91dChjYiwgMCkgaWYgY2JcclxuXHJcbmNsYXNzIFByb2JsZW1cclxuICBjb25zdHJ1Y3RvcjogKEBkZXNjcmlwdGlvbikgLT5cclxuICAgIEBpbmRleCA9IHdpbmRvdy5pbmRleFxyXG4gICAgbGluZXMgPSBAZGVzY3JpcHRpb24uc3BsaXQoL1xcbi8pXHJcbiAgICBsaW5lcy5zaGlmdCgpIHdoaWxlIGxpbmVzLmxlbmd0aCA+IDAgYW5kIGxpbmVzWzBdLmxlbmd0aCA9PSAwXHJcbiAgICBAdGl0bGUgPSBsaW5lcy5zaGlmdCgpXHJcbiAgICBAbGluZSA9IGxpbmVzLnNoaWZ0KClcclxuICAgIEBkZXNjcmlwdGlvbiA9IGxpbmVzLmpvaW4oXCJcXG5cIilcclxuXHJcbiAgbm93OiAtPlxyXG4gICAgcmV0dXJuIGlmIHdpbmRvdy5wZXJmb3JtYW5jZSB0aGVuIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSBlbHNlIG5ldyBEYXRlKCkuZ2V0VGltZSgpXHJcblxyXG4gIHByb2Nlc3M6IC0+XHJcbiAgICBpZiB3aW5kb3cuYXJncy5kZXNjcmlwdGlvblxyXG4gICAgICB3aW5kb3cudGVybWluYWwuZWNobyBcIltbOyM0NDQ0NDQ7XV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXVxcblwiXHJcblxyXG4gICAgZm9ybWF0dGVkVGl0bGUgPSAkLnRlcm1pbmFsLmZvcm1hdChcIltbOyNmZmFhMDA7XSN7QHRpdGxlfV1cIilcclxuICAgIHVybCA9IFwiP2M9I3t3aW5kb3cuYXJncy5jbWR9XyN7QGluZGV4fVwiXHJcbiAgICBpZiB3aW5kb3cuYXJncy52ZXJib3NlXHJcbiAgICAgIHVybCArPSBcIl92ZXJib3NlXCJcclxuICAgIHdpbmRvdy50ZXJtaW5hbC5lY2hvIFwiPGEgaHJlZj1cXFwiI3t1cmx9XFxcIj4je2Zvcm1hdHRlZFRpdGxlfTwvYT5cIiwgeyByYXc6IHRydWUgfVxyXG5cclxuICAgIGlmIHdpbmRvdy5hcmdzLmRlc2NyaXB0aW9uXHJcbiAgICAgIHdpbmRvdy50ZXJtaW5hbC5lY2hvIFwiW1s7IzQ0NDQ0NDtdI3tAbGluZX1dXCJcclxuICAgICAgd2luZG93LnRlcm1pbmFsLmVjaG8gXCJbWzsjY2NjY2VlO10je0BkZXNjcmlwdGlvbn1dXFxuXCJcclxuICAgICAgc291cmNlTGluZSA9ICQudGVybWluYWwuZm9ybWF0KFwiW1s7IzQ0NDQ0NDtdU291cmNlOl0gXCIpXHJcbiAgICAgIHNvdXJjZUxpbmUgKz0gXCIgPGEgaHJlZj1cXFwic3JjL2UjeygnMDAwJytAaW5kZXgpLnNsaWNlKC0zKX0uY29mZmVlXFxcIj5cIiArICQudGVybWluYWwuZm9ybWF0KFwiW1s7Izc3MzMwMDtdTG9jYWxdXCIpICsgXCI8L2E+IFwiXHJcbiAgICAgIHNvdXJjZUxpbmUgKz0gJC50ZXJtaW5hbC5mb3JtYXQoXCJbWzsjNDQ0NDQ0O10vXVwiKVxyXG4gICAgICBzb3VyY2VMaW5lICs9IFwiIDxhIGhyZWY9XFxcImh0dHBzOi8vZ2l0aHViLmNvbS9qb2VkcmFnby9ldWxlci9ibG9iL21hc3Rlci9zcmMvZSN7KCcwMDAnK0BpbmRleCkuc2xpY2UoLTMpfS5jb2ZmZWVcXFwiPlwiICsgJC50ZXJtaW5hbC5mb3JtYXQoXCJbWzsjNzczMzAwO11HaXRodWJdXCIpICsgXCI8L2E+XCJcclxuICAgICAgd2luZG93LnRlcm1pbmFsLmVjaG8gc291cmNlTGluZSwgeyByYXc6IHRydWUgfVxyXG4gICAgICBpZiB3aW5kb3cuYXJncy50ZXN0IG9yIHdpbmRvdy5hcmdzLmFuc3dlclxyXG4gICAgICAgIHdpbmRvdy50ZXJtaW5hbC5lY2hvIFwiXCJcclxuXHJcbiAgICB0ZXN0RnVuYyA9IEB0ZXN0XHJcbiAgICBhbnN3ZXJGdW5jID0gQGFuc3dlclxyXG5cclxuICAgIGlmIHdpbmRvdy5hcmdzLnRlc3RcclxuICAgICAgaWYgdGVzdEZ1bmMgPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgd2luZG93LnRlcm1pbmFsLmVjaG8gXCJbWzsjNDQ0NDQ0O10gKG5vIHRlc3RzKV1cIlxyXG4gICAgICBlbHNlXHJcbiAgICAgICAgdGVzdEZ1bmMoKVxyXG5cclxuICAgIGlmIHdpbmRvdy5hcmdzLmFuc3dlclxyXG4gICAgICBzdGFydCA9IEBub3coKVxyXG4gICAgICBhbnN3ZXIgPSBhbnN3ZXJGdW5jKClcclxuICAgICAgZW5kID0gQG5vdygpXHJcbiAgICAgIG1zID0gZW5kIC0gc3RhcnRcclxuICAgICAgd2luZG93LnRlcm1pbmFsLmVjaG8gXCJbWzsjZmZmZmZmO10gLT4gXVtbOyNhYWZmYWE7XUFuc3dlcjpdIChbWzsjYWFmZmZmO10je21zLnRvRml4ZWQoMSl9bXNdKTogW1s7I2ZmZmZmZjtdI3tlc2NhcGVkU3RyaW5naWZ5KGFuc3dlcil9XVwiXHJcblxyXG5yb290LlByb2JsZW0gPSBQcm9ibGVtXHJcblxyXG5yb290Lm9rID0gKHYsIG1zZykgLT5cclxuICB3aW5kb3cudGVybWluYWwuZWNobyBcIltbOyNmZmZmZmY7XSAqICBdI3t2fTogI3ttc2d9XCJcclxuXHJcbnJvb3QuZXF1YWwgPSAoYSwgYiwgbXNnKSAtPlxyXG4gIGlmIGEgPT0gYlxyXG4gICAgd2luZG93LnRlcm1pbmFsLmVjaG8gXCJbWzsjZmZmZmZmO10gKiAgXVtbOyM1NTU1NTU7XVBBU1M6ICN7bXNnfV1cIlxyXG4gIGVsc2VcclxuICAgIHdpbmRvdy50ZXJtaW5hbC5lY2hvIFwiW1s7I2ZmZmZmZjtdICogIF1bWzsjZmZhYWFhO11GQUlMOiAje21zZ30gKCN7YX0gIT0gI3tifSldXCJcclxuXHJcbnJvb3Qub25Db21tYW5kID0gKGNvbW1hbmQpID0+XHJcbiAgcmV0dXJuIGlmIGNvbW1hbmQubGVuZ3RoID09IDBcclxuICBjbWQgPSAkLnRlcm1pbmFsLnBhcnNlQ29tbWFuZChjb21tYW5kKVxyXG4gIHJldHVybiBpZiBjbWQubmFtZS5sZW5ndGggPT0gMFxyXG5cclxuICBhcmdzID1cclxuICAgIHN0YXJ0SW5kZXg6IDBcclxuICAgIGVuZEluZGV4OiAwXHJcbiAgICBsaXN0OiBbXVxyXG4gICAgdmVyYm9zZTogZmFsc2VcclxuICAgIGRlc2NyaXB0aW9uOiBmYWxzZVxyXG4gICAgdGVzdDogZmFsc2VcclxuICAgIGFuc3dlcjogZmFsc2VcclxuXHJcbiAgcHJvY2VzcyA9IHRydWVcclxuXHJcbiAgZm9yIGFyZyBpbiBjbWQuYXJnc1xyXG4gICAgYXJnID0gU3RyaW5nKGFyZylcclxuICAgIGNvbnRpbnVlIGlmIGFyZy5sZW5ndGggPCAxXHJcbiAgICBpZiBhcmdbMF0gPT0gJ3YnXHJcbiAgICAgIGFyZ3MudmVyYm9zZSA9IHRydWVcclxuICAgIGVsc2UgaWYgYXJnLm1hdGNoKC9eXFxkKyQvKVxyXG4gICAgICB2ID0gcGFyc2VJbnQoYXJnKVxyXG4gICAgICBpZiAodiA+PSAxKSBhbmQgKHYgPD0gTEFTVF9QUk9CTEVNKVxyXG4gICAgICAgIGFyZ3MubGlzdC5wdXNoKHYpXHJcbiAgICAgIGVsc2VcclxuICAgICAgICBwcm9jZXNzID0gZmFsc2VcclxuICAgICAgICB3aW5kb3cudGVybWluYWwuZWNobyBcIltbOyNmZmFhYWE7XU5vIHN1Y2ggdGVzdDogI3t2fSAodmFsaWQgdGVzdHMgMS0je0xBU1RfUFJPQkxFTX0pXVwiXHJcblxyXG4gIGlmIGFyZ3MubGlzdC5sZW5ndGggPT0gMFxyXG4gICAgYXJncy5zdGFydEluZGV4ID0gMVxyXG4gICAgYXJncy5lbmRJbmRleCA9IExBU1RfUFJPQkxFTVxyXG5cclxuICAjIFNpbmNlIGFsbCBvZiBvdXIgY29tbWFuZHMgaGFwcGVuIHRvIGhhdmUgdW5pcXVlIGZpcnN0IGxldHRlcnMsIGxldCBwZW9wbGUgYmUgc3VwZXIgbGF6eS9zaWxseVxyXG4gIGlmIGNtZC5uYW1lWzBdID09ICdsJ1xyXG4gICAgYXJncy5jbWQgPSBcImxpc3RcIlxyXG4gIGVsc2UgaWYgY21kLm5hbWVbMF0gPT0gJ2QnXHJcbiAgICBhcmdzLmNtZCA9IFwiZGVzY3JpYmVcIlxyXG4gICAgYXJncy5kZXNjcmlwdGlvbiA9IHRydWVcclxuICBlbHNlIGlmIGNtZC5uYW1lWzBdID09ICd0J1xyXG4gICAgYXJncy5jbWQgPSBcInRlc3RcIlxyXG4gICAgYXJncy50ZXN0ID0gdHJ1ZVxyXG4gIGVsc2UgaWYgY21kLm5hbWVbMF0gPT0gJ2EnXHJcbiAgICBhcmdzLmNtZCA9IFwiYW5zd2VyXCJcclxuICAgIGFyZ3MuYW5zd2VyID0gdHJ1ZVxyXG4gIGVsc2UgaWYgY21kLm5hbWVbMF0gPT0gJ3InXHJcbiAgICBhcmdzLmNtZCA9IFwicnVuXCJcclxuICAgIGFyZ3MudGVzdCA9IHRydWVcclxuICAgIGFyZ3MuYW5zd2VyID0gdHJ1ZVxyXG4gIGVsc2UgaWYgY21kLm5hbWVbMF0gPT0gJ2QnXHJcbiAgICBhcmdzLmNtZCA9IFwiZGVzY3JpYmVcIlxyXG4gICAgYXJncy5kZXNjcmlwdGlvbiA9IHRydWVcclxuICBlbHNlIGlmIGNtZC5uYW1lWzBdID09ICdoJ1xyXG4gICAgYXJncy5jbWQgPSBcImhlbHBcIlxyXG4gICAgcHJvY2VzcyA9IGZhbHNlXHJcbiAgICB3aW5kb3cudGVybWluYWwuZWNobyBcIlwiXCJcclxuICAgIENvbW1hbmRzOlxyXG5cclxuICAgICAgICBsaXN0IFtYXSAgICAgLSBMaXN0IHByb2JsZW0gdGl0bGVzXHJcbiAgICAgICAgZGVzY3JpYmUgW1hdIC0gRGlzcGxheSBmdWxsIHByb2JsZW0gZGVzY3JpcHRpb25zXHJcbiAgICAgICAgdGVzdCBbWF0gICAgIC0gUnVuIHVuaXQgdGVzdHNcclxuICAgICAgICBhbnN3ZXIgW1hdICAgLSBUaW1lIGFuZCBjYWxjdWxhdGUgYW5zd2VyXHJcbiAgICAgICAgcnVuIFtYXSAgICAgIC0gdGVzdCBhbmQgYW5zd2VyIGNvbWJpbmVkXHJcbiAgICAgICAgaGVscCAgICAgICAgIC0gVGhpcyBoZWxwXHJcblxyXG4gICAgICAgIEluIGFsbCBvZiB0aGVzZSwgW1hdIGNhbiBiZSBhIGxpc3Qgb2Ygb25lIG9yIG1vcmUgcHJvYmxlbSBudW1iZXJzLiAoYSB2YWx1ZSBmcm9tIDEgdG8gI3tMQVNUX1BST0JMRU19KS4gSWYgYWJzZW50LCBpdCBpbXBsaWVzIGFsbCBwcm9ibGVtcy5cclxuICAgICAgICBBbHNvLCBhZGRpbmcgdGhlIHdvcmQgXCJ2ZXJib3NlXCIgdG8gc29tZSBvZiB0aGVzZSBjb21tYW5kcyB3aWxsIGVtaXQgdGhlIGRlc2NyaXB0aW9uIGJlZm9yZSBwZXJmb3JtaW5nIHRoZSB0YXNrLlxyXG5cclxuICAgIFwiXCJcIlxyXG4gIGVsc2VcclxuICAgIHByb2Nlc3MgPSBmYWxzZVxyXG4gICAgd2luZG93LnRlcm1pbmFsLmVjaG8gXCJbWzsjZmZhYWFhO11Vbmtub3duIGNvbW1hbmQuXVwiXHJcblxyXG4gIGlmIGFyZ3MudmVyYm9zZVxyXG4gICAgYXJncy5kZXNjcmlwdGlvbiA9IHRydWVcclxuXHJcbiAgaWYgcHJvY2Vzc1xyXG4gICAgaXRlcmF0ZVByb2JsZW1zKGFyZ3MpXHJcbiJdfQ==
