require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"r1PLSq":[function(require,module,exports){
var problem;

module.exports = problem = new Problem("\nProblem 1: Multiples of 3 and 5\n-------------------------------\n\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\n\nFind the sum of all the multiples of 3 or 5 below 1000.\n");

problem.run = {
  test: function() {
    var i, sum, _i;
    sum = 0;
    for (i = _i = 1; _i < 10; i = ++_i) {
      if ((i % 3 === 0) || (i % 5 === 0)) {
        sum += i;
      }
    }
    return equal(sum, 23, "Sum of natural numbers < 10: " + sum);
  },
  answer: function() {
    var i, sum, _i;
    sum = 0;
    for (i = _i = 1; _i < 1000; i = ++_i) {
      if ((i % 3 === 0) || (i % 5 === 0)) {
        sum += i;
      }
    }
    return sum;
  }
};


},{}],"e001":[function(require,module,exports){
module.exports=require('r1PLSq');
},{}],"78QEJ9":[function(require,module,exports){
var problem;

module.exports = problem = new Problem("\nProblem 2: Even Fibonacci numbers\n---------------------------------\n\nEach new term in the Fibonacci sequence is generated by adding the previous two terms.\nBy starting with 1 and 2, the first 10 terms will be:\n\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million,\nfind the sum of the even-valued terms.\n");

problem.run = function() {
  var curr, next, prev, sum;
  prev = 1;
  curr = 1;
  sum = 0;
  while (curr < 4000000) {
    if ((curr % 2) === 0) {
      sum += curr;
    }
    next = curr + prev;
    prev = curr;
    curr = next;
  }
  return sum;
};


},{}],"e002":[function(require,module,exports){
module.exports=require('78QEJ9');
},{}],"HokIVh":[function(require,module,exports){
var isPrime, largestPrimeFactor, leastFactor, primeFactors, problem;

module.exports = problem = new Problem("\nProblem 3: Largest prime factor\n-------------------------------\n\nThe prime factors of 13195 are 5, 7, 13 and 29.\n\nWhat is the largest prime factor of the number 600851475143 ?\n");

leastFactor = function(n) {
  var i, m, _i;
  if (isNaN(n) || !isFinite(n)) {
    return NaN;
  }
  if (n === 0) {
    return 0;
  }
  if ((n % 1) !== 0 || (n * n) < 2) {
    return 1;
  }
  if ((n % 2) === 0) {
    return 2;
  }
  if ((n % 3) === 0) {
    return 3;
  }
  if ((n % 5) === 0) {
    return 5;
  }
  m = Math.sqrt(n);
  for (i = _i = 7; _i <= m; i = _i += 30) {
    if ((n % i) === 0) {
      return i;
    }
    if ((n % (i + 4)) === 0) {
      return i + 4;
    }
    if ((n % (i + 6)) === 0) {
      return i + 6;
    }
    if ((n % (i + 10)) === 0) {
      return i + 10;
    }
    if ((n % (i + 12)) === 0) {
      return i + 12;
    }
    if ((n % (i + 16)) === 0) {
      return i + 16;
    }
    if ((n % (i + 22)) === 0) {
      return i + 22;
    }
    if ((n % (i + 24)) === 0) {
      return i + 24;
    }
  }
  return n;
};

isPrime = function(n) {
  if (isNaN(n) || !isFinite(n) || (n % 1) !== 0 || (n < 2)) {
    return false;
  }
  if (n === leastFactor(n)) {
    return true;
  }
  return false;
};

primeFactors = function(n) {
  var factor, factors;
  if (n === 1) {
    return [1];
  }
  factors = [];
  while (!isPrime(n)) {
    factor = leastFactor(n);
    factors.push(factor);
    n /= factor;
  }
  factors.push(n);
  return factors;
};

largestPrimeFactor = function(n) {
  var factor;
  if (n === 1) {
    return 1;
  }
  while (!isPrime(n)) {
    factor = leastFactor(n);
    n /= factor;
  }
  return n;
};

problem.run = function() {
  return largestPrimeFactor(600851475143);
};


},{}],"e003":[function(require,module,exports){
module.exports=require('HokIVh');
},{}],"e004":[function(require,module,exports){
module.exports=require('ys3VZW');
},{}],"ys3VZW":[function(require,module,exports){
var isPalindrome, problem;

module.exports = problem = new Problem("\nProblem 4: Largest palindrome product\n-------------------------------------\n\nA palindromic number reads the same both ways.\n\nFind the largest palindrome made from the product of two 3-digit numbers.\n");

isPalindrome = function(n) {
  var i, str, _i, _ref;
  str = n.toString();
  for (i = _i = 0, _ref = str.length / 2; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    if (str[i] !== str[str.length - 1 - i]) {
      return false;
    }
  }
  return true;
};

problem.run = {
  test: function() {
    var v, _i, _j, _len, _len1, _ref, _ref1, _results;
    _ref = [1, 11, 121, 1221, 12321, 1234321];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      v = _ref[_i];
      equal(isPalindrome(v), true, "isPalindrome(" + v + ") returns true");
    }
    _ref1 = [12, 123, 1234, 12345, 123456, 12324];
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      v = _ref1[_j];
      _results.push(equal(isPalindrome(v), false, "isPalindrome(" + v + ") returns false"));
    }
    return _results;
  },
  answer: function() {
    var i, j, largesti, largestj, largestp, product, _i, _j;
    largesti = 0;
    largestj = 0;
    largestp = 0;
    for (i = _i = 100; _i <= 999; i = ++_i) {
      for (j = _j = 100; _j <= 999; j = ++_j) {
        product = i * j;
        if (isPalindrome(product)) {
          largesti = i;
          largestj = j;
          largestp = product;
        }
      }
    }
    return largestp;
  }
};


},{}],"e005":[function(require,module,exports){
module.exports=require('8Y1Hkt');
},{}],"8Y1Hkt":[function(require,module,exports){
var problem;

module.exports = problem = new Problem("\nProblem 5: Smallest multiple\n----------------------------\n\n2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n\nWhat is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?\n");

problem.run = function() {
  var found, i, n, _i;
  n = 0;
  while (true) {
    n += 20;
    found = true;
    for (i = _i = 1; _i <= 20; i = ++_i) {
      if ((n % i) !== 0) {
        found = false;
        break;
      }
    }
    if (found) {
      break;
    }
  }
  return n;
};


},{}],"e006":[function(require,module,exports){
module.exports=require('a5iprt');
},{}],"a5iprt":[function(require,module,exports){
var differenceSumSquares, problem, squareOfSum, sumOfSquares;

module.exports = problem = new Problem("\nProblem 6: Sum square difference\n--------------------------------\n\nThe sum of the squares of the first ten natural numbers is,\n\n             1^2 + 2^2 + ... + 10^2 = 385\n\nThe square of the sum of the first ten natural numbers is,\n\n          (1 + 2 + ... + 10)^2 = 55^2 = 3025\n\nHence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 âˆ’ 385 = 2640.\n\nFind the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.\n");

sumOfSquares = function(n) {
  var i, sum, _i;
  sum = 0;
  for (i = _i = 1; 1 <= n ? _i <= n : _i >= n; i = 1 <= n ? ++_i : --_i) {
    sum += i * i;
  }
  return sum;
};

squareOfSum = function(n) {
  var i, sum, _i;
  sum = 0;
  for (i = _i = 1; 1 <= n ? _i <= n : _i >= n; i = 1 <= n ? ++_i : --_i) {
    sum += i;
  }
  return sum * sum;
};

differenceSumSquares = function(n) {
  return squareOfSum(n) - sumOfSquares(n);
};

problem.run = {
  test: function() {
    equal(sumOfSquares(10), 385, "Sum of squares of first ten natural numbers is 385");
    equal(squareOfSum(10), 3025, "Square of sum of first ten natural numbers is 3025");
    return equal(differenceSumSquares(10), 2640, "Difference in values for the first ten natural numbers is 2640");
  },
  answer: function() {
    return differenceSumSquares(100);
  }
};


},{}],"e007":[function(require,module,exports){
module.exports=require('v+s2Qb');
},{}],"v+s2Qb":[function(require,module,exports){
var nthPrime, problem;

module.exports = problem = new Problem("\nProblem 7: 10001st prime\n------------------------\n\nBy listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\n\nWhat is the 10,001st prime number?\n");

nthPrime = function(n) {
  var i, sieve, _i;
  sieve = new IncrementalSieve;
  for (i = _i = 1; 1 <= n ? _i < n : _i > n; i = 1 <= n ? ++_i : --_i) {
    sieve.next();
  }
  return sieve.next();
};

problem.run = {
  test: function() {
    return equal(nthPrime(6), 13, "6th prime is 13");
  },
  answer: function() {
    return nthPrime(10001);
  }
};


},{}],"e008":[function(require,module,exports){
module.exports=require('4902rv');
},{}],"4902rv":[function(require,module,exports){
var digit, digits, largestProduct, problem, str;

module.exports = problem = new Problem("\nProblem 8: Largest product in a series\n--------------------------------------\n\nThe four adjacent digits in the 1000-digit number that have the greatest product are 9 x 9 x 8 x 9 = 5832.\n\n  73167176531330624919225119674426574742355349194934\n  96983520312774506326239578318016984801869478851843\n  85861560789112949495459501737958331952853208805511\n  12540698747158523863050715693290963295227443043557\n  66896648950445244523161731856403098711121722383113\n  62229893423380308135336276614282806444486645238749\n  30358907296290491560440772390713810515859307960866\n  70172427121883998797908792274921901699720888093776\n  65727333001053367881220235421809751254540594752243\n  52584907711670556013604839586446706324415722155397\n  53697817977846174064955149290862569321978468622482\n  83972241375657056057490261407972968652414535100474\n  82166370484403199890008895243450658541227588666881\n  16427171479924442928230863465674813919123162824586\n  17866458359124566529476545682848912883142607690042\n  24219022671055626321111109370544217506941658960408\n  07198403850962455444362981230987879927244284909188\n  84580156166097919133875499200524063689912560717606\n  05886116467109405077541002256983155200055935729725\n  71636269561882670428252483600823257530420752963450\n\nFind the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?\n");

str = "73167176531330624919225119674426574742355349194934\n96983520312774506326239578318016984801869478851843\n85861560789112949495459501737958331952853208805511\n12540698747158523863050715693290963295227443043557\n66896648950445244523161731856403098711121722383113\n62229893423380308135336276614282806444486645238749\n30358907296290491560440772390713810515859307960866\n70172427121883998797908792274921901699720888093776\n65727333001053367881220235421809751254540594752243\n52584907711670556013604839586446706324415722155397\n53697817977846174064955149290862569321978468622482\n83972241375657056057490261407972968652414535100474\n82166370484403199890008895243450658541227588666881\n16427171479924442928230863465674813919123162824586\n17866458359124566529476545682848912883142607690042\n24219022671055626321111109370544217506941658960408\n07198403850962455444362981230987879927244284909188\n84580156166097919133875499200524063689912560717606\n05886116467109405077541002256983155200055935729725\n71636269561882670428252483600823257530420752963450";

str = str.replace(/[^0-9]/gm, "");

digits = (function() {
  var _i, _len, _results;
  _results = [];
  for (_i = 0, _len = str.length; _i < _len; _i++) {
    digit = str[_i];
    _results.push(parseInt(digit));
  }
  return _results;
})();

largestProduct = function(digitCount) {
  var end, i, largest, product, start, _i, _j, _ref;
  if (digitCount > digits.length) {
    return 0;
  }
  largest = 0;
  for (start = _i = 0, _ref = digits.length - digitCount; 0 <= _ref ? _i <= _ref : _i >= _ref; start = 0 <= _ref ? ++_i : --_i) {
    end = start + digitCount;
    product = 1;
    for (i = _j = start; start <= end ? _j < end : _j > end; i = start <= end ? ++_j : --_j) {
      product *= digits[i];
    }
    if (largest < product) {
      largest = product;
    }
  }
  return largest;
};

problem.run = {
  test: function() {
    return equal(largestProduct(4), 5832, "Greatest product of 4 adjacent digits is 5832");
  },
  answer: function() {
    return largestProduct(13);
  }
};


},{}],"e009":[function(require,module,exports){
module.exports=require('w1omiu');
},{}],"w1omiu":[function(require,module,exports){
var findFirstTriplet, isTriplet, problem;

module.exports = problem = new Problem("\nProblem 9: Special Pythagorean triplet\n--------------------------------------\n\nA Pythagorean triplet is a set of three natural numbers, a < b < c, for which,\n\n    a^2 + b^2 = c^2\n\nFor example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.\n\nThere exists exactly one Pythagorean triplet for which a + b + c = 1000.\n\nFind the product abc.\n");

isTriplet = function(a, b, c) {
  return ((a * a) + (b * b)) === (c * c);
};

findFirstTriplet = function(sum) {
  var a, b, c, _i, _j;
  for (a = _i = 1; _i < 1000; a = ++_i) {
    for (b = _j = 1; _j < 1000; b = ++_j) {
      c = 1000 - a - b;
      if (isTriplet(a, b, c)) {
        return [a, b, c];
      }
    }
  }
  return false;
};

problem.run = {
  test: function() {
    return equal(isTriplet(3, 4, 5), true, "(3,4,5) is a Pythagorean triplet");
  },
  answer: function() {
    return findFirstTriplet(1000);
  }
};


},{}],"VGQJ6S":[function(require,module,exports){
var primeSum, problem;

module.exports = problem = new Problem("\nProblem 10: Summation of primes\n-------------------------------\n\nThe sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n\nFind the sum of all the primes below two million.\n");

primeSum = function(ceiling) {
  var n, sieve, sum;
  sieve = new IncrementalSieve;
  sum = 0;
  while (true) {
    n = sieve.next();
    if (n >= ceiling) {
      break;
    }
    sum += n;
  }
  return sum;
};

problem.run = {
  test: function() {
    return equal(primeSum(10), 17, "Sum of primes below 10 is 17");
  },
  answer: function() {
    return primeSum(2000000);
  }
};


},{}],"e010":[function(require,module,exports){
module.exports=require('VGQJ6S');
},{}],"shared":[function(require,module,exports){
module.exports=require('FiNUfl');
},{}],"FiNUfl":[function(require,module,exports){
var IncrementalSieve, LAST_PROBLEM, Problem, root;

LAST_PROBLEM = 10;

root = window;

root.escapedStringify = function(o) {
  var str;
  str = JSON.stringify(o);
  str = str.replace("]", "\\]");
  return str;
};

root.runAll = function() {
  var lastPuzzle, loadNextScript, nextIndex;
  lastPuzzle = LAST_PROBLEM;
  nextIndex = 0;
  loadNextScript = function() {
    if (nextIndex < lastPuzzle) {
      nextIndex++;
      return runTest(nextIndex, loadNextScript);
    }
  };
  return loadNextScript();
};

root.iterateProblems = function(args) {
  var indexToProcess, iterateNext;
  indexToProcess = null;
  if (args.endIndex > 0) {
    if (args.startIndex <= args.endIndex) {
      indexToProcess = args.startIndex;
      args.startIndex++;
    }
  } else {
    if (args.list.length > 0) {
      indexToProcess = args.list.shift();
    }
  }
  if (indexToProcess !== null) {
    iterateNext = function() {
      window.args = args;
      return runTest(indexToProcess, function() {
        return iterateProblems(args);
      });
    };
    return iterateNext();
  }
};

root.runTest = function(index, cb) {
  var moduleName, problem;
  moduleName = "e" + (('000' + index).slice(-3));
  window.index = index;
  problem = require(moduleName);
  problem.process();
  if (cb) {
    return window.setTimeout(cb, 0);
  }
};

Problem = (function() {
  function Problem(description) {
    var lines;
    this.description = description;
    this.index = window.index;
    lines = this.description.split(/\n/);
    while (lines.length > 0 && lines[0].length === 0) {
      lines.shift();
    }
    this.title = lines.shift();
    this.line = lines.shift();
    this.description = lines.join("\n");
  }

  Problem.prototype.now = function() {
    if (window.performance) {
      return window.performance.now();
    } else {
      return new Date().getTime();
    }
  };

  Problem.prototype.process = function() {
    var answer, answerFunc, end, formattedTitle, ms, start, testFunc;
    if (window.args.description) {
      window.terminal.echo("[[;#444444;]_______________________________________________________________________________________________]\n");
    }
    formattedTitle = $.terminal.format("[[;#ffaa00;]" + this.title + "]");
    window.terminal.echo("<a href=\"?c=" + window.args.cmd + "%20" + this.index + "\">" + formattedTitle + "</a>", {
      raw: true
    });
    if (window.args.description) {
      window.terminal.echo("[[;#444444;]" + this.line + "]");
      window.terminal.echo("[[;#ccccee;]" + this.description + "]\n");
    }
    if (this.run.hasOwnProperty('test')) {
      answerFunc = this.run.answer;
      testFunc = this.run.test;
    } else {
      answerFunc = this.run;
      testFunc = void 0;
    }
    if (window.args.test) {
      if (testFunc === void 0) {
        window.terminal.echo("[[;#444444;] (no tests)]");
      } else {
        testFunc();
      }
    }
    if (window.args.answer) {
      start = this.now();
      answer = answerFunc();
      end = this.now();
      ms = end - start;
      return window.terminal.echo("[[;#ffffff;] -> ][[;#aaffaa;]Answer:] ([[;#aaffff;]" + (ms.toFixed(1)) + "ms]): [[;#ffffff;]" + (escapedStringify(answer)) + "]");
    }
  };

  return Problem;

})();

root.Problem = Problem;

root.ok = function(v, msg) {
  return window.terminal.echo("[[;#ffffff;] *  ]" + v + ": " + msg);
};

root.equal = function(a, b, msg) {
  if (a === b) {
    return window.terminal.echo("[[;#ffffff;] *  ][[;#555555;]" + msg + "]");
  } else {
    return window.terminal.echo("[[;#ffffff;] *  ][[;#ffaaaa;]" + msg + "]");
  }
};

root.onCommand = (function(_this) {
  return function(command) {
    var arg, args, cmd, process, v, verbose, _i, _len, _ref;
    if (command.length === 0) {
      return;
    }
    cmd = $.terminal.parseCommand(command);
    if (cmd.name.length === 0) {
      return;
    }
    console.log(cmd);
    verbose = false;
    args = {
      startIndex: 0,
      endIndex: 0,
      list: [],
      description: false,
      test: false,
      answer: false
    };
    _ref = cmd.args;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      arg = _ref[_i];
      arg = String(arg);
      if (arg.length < 1) {
        continue;
      }
      if (arg[0] === 'v') {
        verbose = true;
      } else if (arg.match(/^\d+$/)) {
        v = parseInt(arg);
        if ((v >= 1) && (v <= LAST_PROBLEM)) {
          args.list.push(v);
        }
      }
    }
    if (args.list.length === 0) {
      args.startIndex = 1;
      args.endIndex = LAST_PROBLEM;
    }
    process = true;
    if (cmd.name[0] === 'l') {
      args.cmd = "list";
    } else if (cmd.name[0] === 'd') {
      args.cmd = "describe";
      args.description = true;
    } else if (cmd.name[0] === 't') {
      args.cmd = "test";
      args.test = true;
    } else if (cmd.name[0] === 'a') {
      args.cmd = "answer";
      args.answer = true;
    } else if (cmd.name[0] === 'r') {
      args.cmd = "run";
      args.test = true;
      args.answer = true;
    } else if (cmd.name[0] === 'd') {
      args.cmd = "describe";
      args.description = true;
    } else if (cmd.name[0] === 'h') {
      args.cmd = "help";
      process = false;
      window.terminal.echo("Commands:\n\n    list [X]     - List problem titles\n    describe [X] - Display full problem descriptions\n    test [X]     - Run unit tests\n    answer [X]   - Time and calculate answer\n    run [X]      - test and answer combined\n    help         - This help\n\n    In all of these, [X] can be a list of one or more problem numbers. (a value from 1 to " + LAST_PROBLEM + "). If absent, it implies all problems.\n    Also, adding the word \"verbose\" to some of these commands will emit the description before performing the task.\n");
    } else {
      process = false;
      window.terminal.echo("[[;#ffaaaa;]Unknown command.]");
    }
    if (verbose) {
      args.description = true;
    }
    if (process) {
      return iterateProblems(args);
    }
  };
})(this);

IncrementalSieve = (function() {
  function IncrementalSieve() {
    this.n = 0;
  }

  IncrementalSieve.prototype.next = function() {
    var nxt, p2, s;
    this.n += 2;
    if (this.n < 7) {
      if (this.n < 3) {
        this.n = 1;
        return 2;
      }
      if (this.n < 5) {
        return 3;
      }
      this.dict = {};
      this.bps = new IncrementalSieve();
      this.bps.next();
      this.p = this.bps.next();
      this.q = this.p * this.p;
      return 5;
    } else {
      s = this.dict[this.n];
      if (!s) {
        if (this.n < this.q) {
          return this.n;
        } else {
          p2 = this.p << 1;
          this.dict[this.n + p2] = p2;
          this.p = this.bps.next();
          this.q = this.p * this.p;
          return this.next();
        }
      } else {
        delete this.dict[this.n];
        nxt = this.n + s;
        while (this.dict[nxt]) {
          nxt += s;
        }
        this.dict[nxt] = s;
        return this.next();
      }
    }
  };

  return IncrementalSieve;

})();

root.IncrementalSieve = IncrementalSieve;


},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIuLlxcbm9kZV9tb2R1bGVzXFxicm93c2VyaWZ5XFxub2RlX21vZHVsZXNcXGJyb3dzZXItcGFja1xcX3ByZWx1ZGUuanMiLCIuLlxcc3JjXFxlMDAxLmNvZmZlZSIsIi4uXFxzcmNcXGUwMDIuY29mZmVlIiwiLi5cXHNyY1xcZTAwMy5jb2ZmZWUiLCIuLlxcc3JjXFxlMDA0LmNvZmZlZSIsIi4uXFxzcmNcXGUwMDUuY29mZmVlIiwiLi5cXHNyY1xcZTAwNi5jb2ZmZWUiLCIuLlxcc3JjXFxlMDA3LmNvZmZlZSIsIi4uXFxzcmNcXGUwMDguY29mZmVlIiwiLi5cXHNyY1xcZTAwOS5jb2ZmZWUiLCIuLlxcc3JjXFxlMDEwLmNvZmZlZSIsIi4uXFxzcmNcXHNoYXJlZC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxJQUFBLE9BQUE7O0FBQUEsTUFBTSxDQUFDLE9BQVAsR0FBaUIsT0FBQSxHQUFjLElBQUEsT0FBQSxDQUFRLHVRQUFSLENBQS9CLENBQUE7O0FBQUEsT0FZTyxDQUFDLEdBQVIsR0FDRTtBQUFBLEVBQUEsSUFBQSxFQUFNLFNBQUEsR0FBQTtBQUNKLFFBQUEsVUFBQTtBQUFBLElBQUEsR0FBQSxHQUFNLENBQU4sQ0FBQTtBQUNBLFNBQVMsNkJBQVQsR0FBQTtBQUNFLE1BQUEsSUFBRyxDQUFDLENBQUEsR0FBSSxDQUFKLEtBQVMsQ0FBVixDQUFBLElBQWdCLENBQUMsQ0FBQSxHQUFJLENBQUosS0FBUyxDQUFWLENBQW5CO0FBQ0UsUUFBQSxHQUFBLElBQU8sQ0FBUCxDQURGO09BREY7QUFBQSxLQURBO1dBSUEsS0FBQSxDQUFNLEdBQU4sRUFBVyxFQUFYLEVBQWdCLCtCQUFBLEdBQThCLEdBQTlDLEVBTEk7RUFBQSxDQUFOO0FBQUEsRUFPQSxNQUFBLEVBQVEsU0FBQSxHQUFBO0FBQ04sUUFBQSxVQUFBO0FBQUEsSUFBQSxHQUFBLEdBQU0sQ0FBTixDQUFBO0FBQ0EsU0FBUywr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ZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3Rocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIil9dmFyIGY9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGYuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sZixmLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIm1vZHVsZS5leHBvcnRzID0gcHJvYmxlbSA9IG5ldyBQcm9ibGVtIFwiXCJcIlxuXG5Qcm9ibGVtIDE6IE11bHRpcGxlcyBvZiAzIGFuZCA1XG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbklmIHdlIGxpc3QgYWxsIHRoZSBuYXR1cmFsIG51bWJlcnMgYmVsb3cgMTAgdGhhdCBhcmUgbXVsdGlwbGVzIG9mIDMgb3IgNSwgd2UgZ2V0IDMsIDUsIDYgYW5kIDkuXG5UaGUgc3VtIG9mIHRoZXNlIG11bHRpcGxlcyBpcyAyMy5cblxuRmluZCB0aGUgc3VtIG9mIGFsbCB0aGUgbXVsdGlwbGVzIG9mIDMgb3IgNSBiZWxvdyAxMDAwLlxuXG5cIlwiXCJcblxucHJvYmxlbS5ydW4gPVxuICB0ZXN0OiAtPlxuICAgIHN1bSA9IDBcbiAgICBmb3IgaSBpbiBbMS4uLjEwXVxuICAgICAgaWYgKGkgJSAzID09IDApIG9yIChpICUgNSA9PSAwKVxuICAgICAgICBzdW0gKz0gaVxuICAgIGVxdWFsKHN1bSwgMjMsIFwiU3VtIG9mIG5hdHVyYWwgbnVtYmVycyA8IDEwOiAje3N1bX1cIilcblxuICBhbnN3ZXI6IC0+XG4gICAgc3VtID0gMFxuICAgIGZvciBpIGluIFsxLi4uMTAwMF1cbiAgICAgIGlmIChpICUgMyA9PSAwKSBvciAoaSAlIDUgPT0gMClcbiAgICAgICAgc3VtICs9IGlcblxuICAgIHJldHVybiBzdW1cbiIsIm1vZHVsZS5leHBvcnRzID0gcHJvYmxlbSA9IG5ldyBQcm9ibGVtIFwiXCJcIlxuXG5Qcm9ibGVtIDI6IEV2ZW4gRmlib25hY2NpIG51bWJlcnNcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5FYWNoIG5ldyB0ZXJtIGluIHRoZSBGaWJvbmFjY2kgc2VxdWVuY2UgaXMgZ2VuZXJhdGVkIGJ5IGFkZGluZyB0aGUgcHJldmlvdXMgdHdvIHRlcm1zLlxuQnkgc3RhcnRpbmcgd2l0aCAxIGFuZCAyLCB0aGUgZmlyc3QgMTAgdGVybXMgd2lsbCBiZTpcblxuMSwgMiwgMywgNSwgOCwgMTMsIDIxLCAzNCwgNTUsIDg5LCAuLi5cblxuQnkgY29uc2lkZXJpbmcgdGhlIHRlcm1zIGluIHRoZSBGaWJvbmFjY2kgc2VxdWVuY2Ugd2hvc2UgdmFsdWVzIGRvIG5vdCBleGNlZWQgZm91ciBtaWxsaW9uLFxuZmluZCB0aGUgc3VtIG9mIHRoZSBldmVuLXZhbHVlZCB0ZXJtcy5cblxuXCJcIlwiXG5cbnByb2JsZW0ucnVuID0gLT5cblxuICBwcmV2ID0gMVxuICBjdXJyID0gMVxuICBzdW0gPSAwXG5cbiAgd2hpbGUgY3VyciA8IDQwMDAwMDBcbiAgICBpZiAoY3VyciAlIDIpID09IDBcbiAgICAgIHN1bSArPSBjdXJyXG5cbiAgICBuZXh0ID0gY3VyciArIHByZXZcbiAgICBwcmV2ID0gY3VyclxuICAgIGN1cnIgPSBuZXh0XG5cbiAgcmV0dXJuIHN1bVxuIiwibW9kdWxlLmV4cG9ydHMgPSBwcm9ibGVtID0gbmV3IFByb2JsZW0gXCJcIlwiXG5cblByb2JsZW0gMzogTGFyZ2VzdCBwcmltZSBmYWN0b3Jcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuVGhlIHByaW1lIGZhY3RvcnMgb2YgMTMxOTUgYXJlIDUsIDcsIDEzIGFuZCAyOS5cblxuV2hhdCBpcyB0aGUgbGFyZ2VzdCBwcmltZSBmYWN0b3Igb2YgdGhlIG51bWJlciA2MDA4NTE0NzUxNDMgP1xuXG5cIlwiXCJcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIyBTaGFtZWxlc3NseSBwaWxmZXJlZC9hZG9wdGVkIGZyb20gaHR0cDovL3d3dy5qYXZhc2NyaXB0ZXIubmV0L2ZhcS9udW1iZXJpc3ByaW1lLmh0bVxuXG5sZWFzdEZhY3RvciA9IChuKSAtPlxuICByZXR1cm4gTmFOIGlmIGlzTmFOKG4pIG9yIG5vdCBpc0Zpbml0ZShuKVxuICByZXR1cm4gMCBpZiBuID09IDBcbiAgcmV0dXJuIDEgaWYgKG4gJSAxKSAhPSAwIG9yIChuICogbikgPCAyXG4gIHJldHVybiAyIGlmIChuICUgMikgPT0gMFxuICByZXR1cm4gMyBpZiAobiAlIDMpID09IDBcbiAgcmV0dXJuIDUgaWYgKG4gJSA1KSA9PSAwXG5cbiAgbSA9IE1hdGguc3FydCBuXG4gIGZvciBpIGluIFs3Li5tXSBieSAzMFxuICAgIHJldHVybiBpICAgIGlmIChuICUgaSkgICAgICA9PSAwXG4gICAgcmV0dXJuIGkrNCAgaWYgKG4gJSAoaSs0KSkgID09IDBcbiAgICByZXR1cm4gaSs2ICBpZiAobiAlIChpKzYpKSAgPT0gMFxuICAgIHJldHVybiBpKzEwIGlmIChuICUgKGkrMTApKSA9PSAwXG4gICAgcmV0dXJuIGkrMTIgaWYgKG4gJSAoaSsxMikpID09IDBcbiAgICByZXR1cm4gaSsxNiBpZiAobiAlIChpKzE2KSkgPT0gMFxuICAgIHJldHVybiBpKzIyIGlmIChuICUgKGkrMjIpKSA9PSAwXG4gICAgcmV0dXJuIGkrMjQgaWYgKG4gJSAoaSsyNCkpID09IDBcblxuICByZXR1cm4gblxuXG5pc1ByaW1lID0gKG4pIC0+XG4gIGlmIGlzTmFOKG4pIG9yIG5vdCBpc0Zpbml0ZShuKSBvciAobiAlIDEpICE9IDAgb3IgKG4gPCAyKVxuICAgIHJldHVybiBmYWxzZVxuICBpZiBuID09IGxlYXN0RmFjdG9yKG4pXG4gICAgcmV0dXJuIHRydWVcblxuICByZXR1cm4gZmFsc2VcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5wcmltZUZhY3RvcnMgPSAobikgLT5cbiAgcmV0dXJuIFsxXSBpZiBuID09IDFcblxuICBmYWN0b3JzID0gW11cbiAgd2hpbGUgbm90IGlzUHJpbWUobilcbiAgICBmYWN0b3IgPSBsZWFzdEZhY3RvcihuKVxuICAgIGZhY3RvcnMucHVzaCBmYWN0b3JcbiAgICBuIC89IGZhY3RvclxuICBmYWN0b3JzLnB1c2ggblxuICByZXR1cm4gZmFjdG9yc1xuXG5sYXJnZXN0UHJpbWVGYWN0b3IgPSAobikgLT5cbiAgcmV0dXJuIDEgaWYgbiA9PSAxXG5cbiAgd2hpbGUgbm90IGlzUHJpbWUobilcbiAgICBmYWN0b3IgPSBsZWFzdEZhY3RvcihuKVxuICAgIG4gLz0gZmFjdG9yXG4gIHJldHVybiBuXG5cbnByb2JsZW0ucnVuID0gLT5cbiAgcmV0dXJuIGxhcmdlc3RQcmltZUZhY3Rvcig2MDA4NTE0NzUxNDMpXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHByb2JsZW0gPSBuZXcgUHJvYmxlbSBcIlwiXCJcblxuUHJvYmxlbSA0OiBMYXJnZXN0IHBhbGluZHJvbWUgcHJvZHVjdFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5BIHBhbGluZHJvbWljIG51bWJlciByZWFkcyB0aGUgc2FtZSBib3RoIHdheXMuXG5cbkZpbmQgdGhlIGxhcmdlc3QgcGFsaW5kcm9tZSBtYWRlIGZyb20gdGhlIHByb2R1Y3Qgb2YgdHdvIDMtZGlnaXQgbnVtYmVycy5cblxuXCJcIlwiXG5cbmlzUGFsaW5kcm9tZSA9IChuKSAtPlxuICBzdHIgPSBuLnRvU3RyaW5nKClcbiAgZm9yIGkgaW4gWzAuLi4oc3RyLmxlbmd0aCAvIDIpXVxuICAgIGlmIHN0cltpXSAhPSBzdHJbc3RyLmxlbmd0aCAtIDEgLSBpXVxuICAgICAgcmV0dXJuIGZhbHNlXG4gIHJldHVybiB0cnVlXG5cbnByb2JsZW0ucnVuID1cbiAgdGVzdDogLT5cbiAgICAjIE1ha2Ugc3VyZSBpc1BhbGluZHJvbWUgd29ya3MgcHJvcGVybHkgZmlyc3RcbiAgICBmb3IgdiBpbiBbMSwgMTEsIDEyMSwgMTIyMSwgMTIzMjEsIDEyMzQzMjFdXG4gICAgICBlcXVhbChpc1BhbGluZHJvbWUodiksIHRydWUsIFwiaXNQYWxpbmRyb21lKCN7dn0pIHJldHVybnMgdHJ1ZVwiKVxuICAgIGZvciB2IGluIFsxMiwgMTIzLCAxMjM0LCAxMjM0NSwgMTIzNDU2LCAxMjMyNF1cbiAgICAgIGVxdWFsKGlzUGFsaW5kcm9tZSh2KSwgZmFsc2UsIFwiaXNQYWxpbmRyb21lKCN7dn0pIHJldHVybnMgZmFsc2VcIilcblxuICBhbnN3ZXI6IC0+XG4gICAgbGFyZ2VzdGkgPSAwXG4gICAgbGFyZ2VzdGogPSAwXG4gICAgbGFyZ2VzdHAgPSAwXG5cbiAgICBmb3IgaSBpbiBbMTAwLi45OTldXG4gICAgICBmb3IgaiBpbiBbMTAwLi45OTldXG4gICAgICAgIHByb2R1Y3QgPSBpICogalxuICAgICAgICBpZiBpc1BhbGluZHJvbWUocHJvZHVjdClcbiAgICAgICAgICBsYXJnZXN0aSA9IGlcbiAgICAgICAgICBsYXJnZXN0aiA9IGpcbiAgICAgICAgICBsYXJnZXN0cCA9IHByb2R1Y3RcblxuICAgIHJldHVybiBsYXJnZXN0cFxuIiwibW9kdWxlLmV4cG9ydHMgPSBwcm9ibGVtID0gbmV3IFByb2JsZW0gXCJcIlwiXG5cblByb2JsZW0gNTogU21hbGxlc3QgbXVsdGlwbGVcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuMjUyMCBpcyB0aGUgc21hbGxlc3QgbnVtYmVyIHRoYXQgY2FuIGJlIGRpdmlkZWQgYnkgZWFjaCBvZiB0aGUgbnVtYmVycyBmcm9tIDEgdG8gMTAgd2l0aG91dCBhbnkgcmVtYWluZGVyLlxuXG5XaGF0IGlzIHRoZSBzbWFsbGVzdCBwb3NpdGl2ZSBudW1iZXIgdGhhdCBpcyBldmVubHkgZGl2aXNpYmxlIGJ5IGFsbCBvZiB0aGUgbnVtYmVycyBmcm9tIDEgdG8gMjA/XG5cblwiXCJcIlxuXG5wcm9ibGVtLnJ1biA9IC0+XG5cbiAgbiA9IDBcbiAgbG9vcFxuICAgIG4gKz0gMjAgIyBQcm9iYWJseSBjb3VsZCBiZSBzb21lIGNsZXZlciBzdW0gb2YgcHJpbWVzIGJldHdlZW4gMS0yMCBvciBzb21ldGhpbmcuIEkgZG9uJ3QgY2FyZS5cbiAgICBmb3VuZCA9IHRydWVcbiAgICBmb3IgaSBpbiBbMS4uMjBdXG4gICAgICBpZiAobiAlIGkpICE9IDBcbiAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICBicmVha1xuXG4gICAgYnJlYWsgaWYgZm91bmRcblxuICByZXR1cm4gblxuIiwibW9kdWxlLmV4cG9ydHMgPSBwcm9ibGVtID0gbmV3IFByb2JsZW0gXCJcIlwiXG5cblByb2JsZW0gNjogU3VtIHNxdWFyZSBkaWZmZXJlbmNlXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5UaGUgc3VtIG9mIHRoZSBzcXVhcmVzIG9mIHRoZSBmaXJzdCB0ZW4gbmF0dXJhbCBudW1iZXJzIGlzLFxuXG4gICAgICAgICAgICAgMV4yICsgMl4yICsgLi4uICsgMTBeMiA9IDM4NVxuXG5UaGUgc3F1YXJlIG9mIHRoZSBzdW0gb2YgdGhlIGZpcnN0IHRlbiBuYXR1cmFsIG51bWJlcnMgaXMsXG5cbiAgICAgICAgICAoMSArIDIgKyAuLi4gKyAxMCleMiA9IDU1XjIgPSAzMDI1XG5cbkhlbmNlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIHN1bSBvZiB0aGUgc3F1YXJlcyBvZiB0aGUgZmlyc3QgdGVuIG5hdHVyYWwgbnVtYmVycyBhbmQgdGhlIHNxdWFyZSBvZiB0aGUgc3VtIGlzIDMwMjUg4oiSIDM4NSA9IDI2NDAuXG5cbkZpbmQgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgc3VtIG9mIHRoZSBzcXVhcmVzIG9mIHRoZSBmaXJzdCBvbmUgaHVuZHJlZCBuYXR1cmFsIG51bWJlcnMgYW5kIHRoZSBzcXVhcmUgb2YgdGhlIHN1bS5cblxuXCJcIlwiXG5cbnN1bU9mU3F1YXJlcyA9IChuKSAtPlxuICBzdW0gPSAwXG4gIGZvciBpIGluIFsxLi5uXVxuICAgIHN1bSArPSAoaSAqIGkpXG4gIHJldHVybiBzdW1cblxuc3F1YXJlT2ZTdW0gPSAobikgLT5cbiAgc3VtID0gMFxuICBmb3IgaSBpbiBbMS4ubl1cbiAgICBzdW0gKz0gaVxuICByZXR1cm4gKHN1bSAqIHN1bSlcblxuZGlmZmVyZW5jZVN1bVNxdWFyZXMgPSAobikgLT5cbiAgcmV0dXJuIHNxdWFyZU9mU3VtKG4pIC0gc3VtT2ZTcXVhcmVzKG4pXG5cbnByb2JsZW0ucnVuID1cbiAgdGVzdDogLT5cbiAgICBlcXVhbChzdW1PZlNxdWFyZXMoMTApLCAzODUsIFwiU3VtIG9mIHNxdWFyZXMgb2YgZmlyc3QgdGVuIG5hdHVyYWwgbnVtYmVycyBpcyAzODVcIilcbiAgICBlcXVhbChzcXVhcmVPZlN1bSgxMCksIDMwMjUsIFwiU3F1YXJlIG9mIHN1bSBvZiBmaXJzdCB0ZW4gbmF0dXJhbCBudW1iZXJzIGlzIDMwMjVcIilcbiAgICBlcXVhbChkaWZmZXJlbmNlU3VtU3F1YXJlcygxMCksIDI2NDAsIFwiRGlmZmVyZW5jZSBpbiB2YWx1ZXMgZm9yIHRoZSBmaXJzdCB0ZW4gbmF0dXJhbCBudW1iZXJzIGlzIDI2NDBcIilcblxuICBhbnN3ZXI6IC0+XG4gICAgcmV0dXJuIGRpZmZlcmVuY2VTdW1TcXVhcmVzKDEwMClcbiIsIm1vZHVsZS5leHBvcnRzID0gcHJvYmxlbSA9IG5ldyBQcm9ibGVtIFwiXCJcIlxuXG5Qcm9ibGVtIDc6IDEwMDAxc3QgcHJpbWVcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5CeSBsaXN0aW5nIHRoZSBmaXJzdCBzaXggcHJpbWUgbnVtYmVyczogMiwgMywgNSwgNywgMTEsIGFuZCAxMywgd2UgY2FuIHNlZSB0aGF0IHRoZSA2dGggcHJpbWUgaXMgMTMuXG5cbldoYXQgaXMgdGhlIDEwLDAwMXN0IHByaW1lIG51bWJlcj9cblxuXCJcIlwiXG5cbm50aFByaW1lID0gKG4pIC0+XG4gIHNpZXZlID0gbmV3IEluY3JlbWVudGFsU2lldmVcbiAgZm9yIGkgaW4gWzEuLi5uXVxuICAgIHNpZXZlLm5leHQoKVxuICByZXR1cm4gc2lldmUubmV4dCgpXG5cbnByb2JsZW0ucnVuID1cbiAgdGVzdDogLT5cbiAgICBlcXVhbChudGhQcmltZSg2KSwgMTMsIFwiNnRoIHByaW1lIGlzIDEzXCIpXG5cbiAgYW5zd2VyOiAtPlxuICAgIHJldHVybiBudGhQcmltZSgxMDAwMSlcbiIsIm1vZHVsZS5leHBvcnRzID0gcHJvYmxlbSA9IG5ldyBQcm9ibGVtIFwiXCJcIlxuXG5Qcm9ibGVtIDg6IExhcmdlc3QgcHJvZHVjdCBpbiBhIHNlcmllc1xuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuVGhlIGZvdXIgYWRqYWNlbnQgZGlnaXRzIGluIHRoZSAxMDAwLWRpZ2l0IG51bWJlciB0aGF0IGhhdmUgdGhlIGdyZWF0ZXN0IHByb2R1Y3QgYXJlIDkgeCA5IHggOCB4IDkgPSA1ODMyLlxuXG4gIDczMTY3MTc2NTMxMzMwNjI0OTE5MjI1MTE5Njc0NDI2NTc0NzQyMzU1MzQ5MTk0OTM0XG4gIDk2OTgzNTIwMzEyNzc0NTA2MzI2MjM5NTc4MzE4MDE2OTg0ODAxODY5NDc4ODUxODQzXG4gIDg1ODYxNTYwNzg5MTEyOTQ5NDk1NDU5NTAxNzM3OTU4MzMxOTUyODUzMjA4ODA1NTExXG4gIDEyNTQwNjk4NzQ3MTU4NTIzODYzMDUwNzE1NjkzMjkwOTYzMjk1MjI3NDQzMDQzNTU3XG4gIDY2ODk2NjQ4OTUwNDQ1MjQ0NTIzMTYxNzMxODU2NDAzMDk4NzExMTIxNzIyMzgzMTEzXG4gIDYyMjI5ODkzNDIzMzgwMzA4MTM1MzM2Mjc2NjE0MjgyODA2NDQ0NDg2NjQ1MjM4NzQ5XG4gIDMwMzU4OTA3Mjk2MjkwNDkxNTYwNDQwNzcyMzkwNzEzODEwNTE1ODU5MzA3OTYwODY2XG4gIDcwMTcyNDI3MTIxODgzOTk4Nzk3OTA4NzkyMjc0OTIxOTAxNjk5NzIwODg4MDkzNzc2XG4gIDY1NzI3MzMzMDAxMDUzMzY3ODgxMjIwMjM1NDIxODA5NzUxMjU0NTQwNTk0NzUyMjQzXG4gIDUyNTg0OTA3NzExNjcwNTU2MDEzNjA0ODM5NTg2NDQ2NzA2MzI0NDE1NzIyMTU1Mzk3XG4gIDUzNjk3ODE3OTc3ODQ2MTc0MDY0OTU1MTQ5MjkwODYyNTY5MzIxOTc4NDY4NjIyNDgyXG4gIDgzOTcyMjQxMzc1NjU3MDU2MDU3NDkwMjYxNDA3OTcyOTY4NjUyNDE0NTM1MTAwNDc0XG4gIDgyMTY2MzcwNDg0NDAzMTk5ODkwMDA4ODk1MjQzNDUwNjU4NTQxMjI3NTg4NjY2ODgxXG4gIDE2NDI3MTcxNDc5OTI0NDQyOTI4MjMwODYzNDY1Njc0ODEzOTE5MTIzMTYyODI0NTg2XG4gIDE3ODY2NDU4MzU5MTI0NTY2NTI5NDc2NTQ1NjgyODQ4OTEyODgzMTQyNjA3NjkwMDQyXG4gIDI0MjE5MDIyNjcxMDU1NjI2MzIxMTExMTA5MzcwNTQ0MjE3NTA2OTQxNjU4OTYwNDA4XG4gIDA3MTk4NDAzODUwOTYyNDU1NDQ0MzYyOTgxMjMwOTg3ODc5OTI3MjQ0Mjg0OTA5MTg4XG4gIDg0NTgwMTU2MTY2MDk3OTE5MTMzODc1NDk5MjAwNTI0MDYzNjg5OTEyNTYwNzE3NjA2XG4gIDA1ODg2MTE2NDY3MTA5NDA1MDc3NTQxMDAyMjU2OTgzMTU1MjAwMDU1OTM1NzI5NzI1XG4gIDcxNjM2MjY5NTYxODgyNjcwNDI4MjUyNDgzNjAwODIzMjU3NTMwNDIwNzUyOTYzNDUwXG5cbkZpbmQgdGhlIHRoaXJ0ZWVuIGFkamFjZW50IGRpZ2l0cyBpbiB0aGUgMTAwMC1kaWdpdCBudW1iZXIgdGhhdCBoYXZlIHRoZSBncmVhdGVzdCBwcm9kdWN0LiBXaGF0IGlzIHRoZSB2YWx1ZSBvZiB0aGlzIHByb2R1Y3Q/XG5cblwiXCJcIlxuXG5zdHIgPSBcIlwiXCJcbiAgICAgIDczMTY3MTc2NTMxMzMwNjI0OTE5MjI1MTE5Njc0NDI2NTc0NzQyMzU1MzQ5MTk0OTM0XG4gICAgICA5Njk4MzUyMDMxMjc3NDUwNjMyNjIzOTU3ODMxODAxNjk4NDgwMTg2OTQ3ODg1MTg0M1xuICAgICAgODU4NjE1NjA3ODkxMTI5NDk0OTU0NTk1MDE3Mzc5NTgzMzE5NTI4NTMyMDg4MDU1MTFcbiAgICAgIDEyNTQwNjk4NzQ3MTU4NTIzODYzMDUwNzE1NjkzMjkwOTYzMjk1MjI3NDQzMDQzNTU3XG4gICAgICA2Njg5NjY0ODk1MDQ0NTI0NDUyMzE2MTczMTg1NjQwMzA5ODcxMTEyMTcyMjM4MzExM1xuICAgICAgNjIyMjk4OTM0MjMzODAzMDgxMzUzMzYyNzY2MTQyODI4MDY0NDQ0ODY2NDUyMzg3NDlcbiAgICAgIDMwMzU4OTA3Mjk2MjkwNDkxNTYwNDQwNzcyMzkwNzEzODEwNTE1ODU5MzA3OTYwODY2XG4gICAgICA3MDE3MjQyNzEyMTg4Mzk5ODc5NzkwODc5MjI3NDkyMTkwMTY5OTcyMDg4ODA5Mzc3NlxuICAgICAgNjU3MjczMzMwMDEwNTMzNjc4ODEyMjAyMzU0MjE4MDk3NTEyNTQ1NDA1OTQ3NTIyNDNcbiAgICAgIDUyNTg0OTA3NzExNjcwNTU2MDEzNjA0ODM5NTg2NDQ2NzA2MzI0NDE1NzIyMTU1Mzk3XG4gICAgICA1MzY5NzgxNzk3Nzg0NjE3NDA2NDk1NTE0OTI5MDg2MjU2OTMyMTk3ODQ2ODYyMjQ4MlxuICAgICAgODM5NzIyNDEzNzU2NTcwNTYwNTc0OTAyNjE0MDc5NzI5Njg2NTI0MTQ1MzUxMDA0NzRcbiAgICAgIDgyMTY2MzcwNDg0NDAzMTk5ODkwMDA4ODk1MjQzNDUwNjU4NTQxMjI3NTg4NjY2ODgxXG4gICAgICAxNjQyNzE3MTQ3OTkyNDQ0MjkyODIzMDg2MzQ2NTY3NDgxMzkxOTEyMzE2MjgyNDU4NlxuICAgICAgMTc4NjY0NTgzNTkxMjQ1NjY1Mjk0NzY1NDU2ODI4NDg5MTI4ODMxNDI2MDc2OTAwNDJcbiAgICAgIDI0MjE5MDIyNjcxMDU1NjI2MzIxMTExMTA5MzcwNTQ0MjE3NTA2OTQxNjU4OTYwNDA4XG4gICAgICAwNzE5ODQwMzg1MDk2MjQ1NTQ0NDM2Mjk4MTIzMDk4Nzg3OTkyNzI0NDI4NDkwOTE4OFxuICAgICAgODQ1ODAxNTYxNjYwOTc5MTkxMzM4NzU0OTkyMDA1MjQwNjM2ODk5MTI1NjA3MTc2MDZcbiAgICAgIDA1ODg2MTE2NDY3MTA5NDA1MDc3NTQxMDAyMjU2OTgzMTU1MjAwMDU1OTM1NzI5NzI1XG4gICAgICA3MTYzNjI2OTU2MTg4MjY3MDQyODI1MjQ4MzYwMDgyMzI1NzUzMDQyMDc1Mjk2MzQ1MFxuICAgICAgXCJcIlwiXG5zdHIgPSBzdHIucmVwbGFjZSgvW14wLTldL2dtLCBcIlwiKVxuZGlnaXRzID0gKHBhcnNlSW50KGRpZ2l0KSBmb3IgZGlnaXQgaW4gc3RyKVxuXG5sYXJnZXN0UHJvZHVjdCA9IChkaWdpdENvdW50KSAtPlxuICByZXR1cm4gMCBpZiBkaWdpdENvdW50ID4gZGlnaXRzLmxlbmd0aFxuXG4gIGxhcmdlc3QgPSAwXG4gIGZvciBzdGFydCBpbiBbMC4uKGRpZ2l0cy5sZW5ndGggLSBkaWdpdENvdW50KV1cbiAgICBlbmQgPSBzdGFydCArIGRpZ2l0Q291bnRcbiAgICBwcm9kdWN0ID0gMVxuICAgIGZvciBpIGluIFtzdGFydC4uLmVuZF1cbiAgICAgIHByb2R1Y3QgKj0gZGlnaXRzW2ldXG4gICAgaWYgbGFyZ2VzdCA8IHByb2R1Y3RcbiAgICAgIGxhcmdlc3QgPSBwcm9kdWN0XG5cbiAgcmV0dXJuIGxhcmdlc3RcblxucHJvYmxlbS5ydW4gPVxuICB0ZXN0OiAtPlxuICAgIGVxdWFsKGxhcmdlc3RQcm9kdWN0KDQpLCA1ODMyLCBcIkdyZWF0ZXN0IHByb2R1Y3Qgb2YgNCBhZGphY2VudCBkaWdpdHMgaXMgNTgzMlwiKVxuXG4gIGFuc3dlcjogLT5cbiAgICByZXR1cm4gbGFyZ2VzdFByb2R1Y3QoMTMpXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHByb2JsZW0gPSBuZXcgUHJvYmxlbSBcIlwiXCJcblxuUHJvYmxlbSA5OiBTcGVjaWFsIFB5dGhhZ29yZWFuIHRyaXBsZXRcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbkEgUHl0aGFnb3JlYW4gdHJpcGxldCBpcyBhIHNldCBvZiB0aHJlZSBuYXR1cmFsIG51bWJlcnMsIGEgPCBiIDwgYywgZm9yIHdoaWNoLFxuXG4gICAgYV4yICsgYl4yID0gY14yXG5cbkZvciBleGFtcGxlLCAzXjIgKyA0XjIgPSA5ICsgMTYgPSAyNSA9IDVeMi5cblxuVGhlcmUgZXhpc3RzIGV4YWN0bHkgb25lIFB5dGhhZ29yZWFuIHRyaXBsZXQgZm9yIHdoaWNoIGEgKyBiICsgYyA9IDEwMDAuXG5cbkZpbmQgdGhlIHByb2R1Y3QgYWJjLlxuXG5cIlwiXCJcblxuaXNUcmlwbGV0ID0gKGEsIGIsIGMpIC0+XG4gIHJldHVybiAoKGEqYSkgKyAoYipiKSkgPT0gKGMqYylcblxuZmluZEZpcnN0VHJpcGxldCA9IChzdW0pIC0+XG4gIGZvciBhIGluIFsxLi4uMTAwMF1cbiAgICBmb3IgYiBpbiBbMS4uLjEwMDBdXG4gICAgICBjID0gMTAwMCAtIGEgLSBiXG4gICAgICBpZiBpc1RyaXBsZXQoYSwgYiwgYylcbiAgICAgICAgcmV0dXJuIFthLCBiLCBjXVxuXG4gIHJldHVybiBmYWxzZVxuXG5cbnByb2JsZW0ucnVuID1cbiAgdGVzdDogLT5cbiAgICBlcXVhbChpc1RyaXBsZXQoMywgNCwgNSksIHRydWUsIFwiKDMsNCw1KSBpcyBhIFB5dGhhZ29yZWFuIHRyaXBsZXRcIilcblxuICBhbnN3ZXI6IC0+XG4gICAgcmV0dXJuIGZpbmRGaXJzdFRyaXBsZXQoMTAwMClcbiIsIm1vZHVsZS5leHBvcnRzID0gcHJvYmxlbSA9IG5ldyBQcm9ibGVtIFwiXCJcIlxuXG5Qcm9ibGVtIDEwOiBTdW1tYXRpb24gb2YgcHJpbWVzXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblRoZSBzdW0gb2YgdGhlIHByaW1lcyBiZWxvdyAxMCBpcyAyICsgMyArIDUgKyA3ID0gMTcuXG5cbkZpbmQgdGhlIHN1bSBvZiBhbGwgdGhlIHByaW1lcyBiZWxvdyB0d28gbWlsbGlvbi5cblxuXCJcIlwiXG5cbnByaW1lU3VtID0gKGNlaWxpbmcpIC0+XG4gIHNpZXZlID0gbmV3IEluY3JlbWVudGFsU2lldmVcblxuICBzdW0gPSAwXG4gIGxvb3BcbiAgICBuID0gc2lldmUubmV4dCgpXG4gICAgaWYgbiA+PSBjZWlsaW5nXG4gICAgICBicmVha1xuICAgIHN1bSArPSBuXG5cbiAgcmV0dXJuIHN1bVxuXG5wcm9ibGVtLnJ1biA9XG4gIHRlc3Q6IC0+XG4gICAgZXF1YWwocHJpbWVTdW0oMTApLCAxNywgXCJTdW0gb2YgcHJpbWVzIGJlbG93IDEwIGlzIDE3XCIpXG5cbiAgYW5zd2VyOiAtPlxuICAgIHJldHVybiBwcmltZVN1bSgyMDAwMDAwKVxuIiwiTEFTVF9QUk9CTEVNID0gMTBcclxuXHJcbnJvb3QgPSB3aW5kb3cgIyBleHBvcnRzID8gdGhpc1xyXG5cclxucm9vdC5lc2NhcGVkU3RyaW5naWZ5ID0gKG8pIC0+XHJcbiAgc3RyID0gSlNPTi5zdHJpbmdpZnkobylcclxuICBzdHIgPSBzdHIucmVwbGFjZShcIl1cIiwgXCJcXFxcXVwiKVxyXG4gIHJldHVybiBzdHJcclxuXHJcbnJvb3QucnVuQWxsID0gLT5cclxuICBsYXN0UHV6emxlID0gTEFTVF9QUk9CTEVNXHJcbiAgbmV4dEluZGV4ID0gMFxyXG5cclxuICBsb2FkTmV4dFNjcmlwdCA9IC0+XHJcbiAgICBpZiBuZXh0SW5kZXggPCBsYXN0UHV6emxlXHJcbiAgICAgIG5leHRJbmRleCsrXHJcbiAgICAgIHJ1blRlc3QobmV4dEluZGV4LCBsb2FkTmV4dFNjcmlwdClcclxuICBsb2FkTmV4dFNjcmlwdCgpXHJcblxyXG5yb290Lml0ZXJhdGVQcm9ibGVtcyA9IChhcmdzKSAtPlxyXG5cclxuICBpbmRleFRvUHJvY2VzcyA9IG51bGxcclxuICBpZiBhcmdzLmVuZEluZGV4ID4gMFxyXG4gICAgaWYgYXJncy5zdGFydEluZGV4IDw9IGFyZ3MuZW5kSW5kZXhcclxuICAgICAgaW5kZXhUb1Byb2Nlc3MgPSBhcmdzLnN0YXJ0SW5kZXhcclxuICAgICAgYXJncy5zdGFydEluZGV4KytcclxuICBlbHNlXHJcbiAgICBpZiBhcmdzLmxpc3QubGVuZ3RoID4gMFxyXG4gICAgICBpbmRleFRvUHJvY2VzcyA9IGFyZ3MubGlzdC5zaGlmdCgpXHJcblxyXG4gIGlmIGluZGV4VG9Qcm9jZXNzICE9IG51bGxcclxuICAgIGl0ZXJhdGVOZXh0ID0gLT5cclxuICAgICAgd2luZG93LmFyZ3MgPSBhcmdzXHJcbiAgICAgIHJ1blRlc3QgaW5kZXhUb1Byb2Nlc3MsIC0+XHJcbiAgICAgICAgaXRlcmF0ZVByb2JsZW1zKGFyZ3MpXHJcbiAgICBpdGVyYXRlTmV4dCgpXHJcblxyXG5yb290LnJ1blRlc3QgPSAoaW5kZXgsIGNiKSAtPlxyXG4gIG1vZHVsZU5hbWUgPSBcImUjeygnMDAwJytpbmRleCkuc2xpY2UoLTMpfVwiXHJcbiAgd2luZG93LmluZGV4ID0gaW5kZXhcclxuICBwcm9ibGVtID0gcmVxdWlyZShtb2R1bGVOYW1lKVxyXG4gIHByb2JsZW0ucHJvY2VzcygpXHJcbiAgd2luZG93LnNldFRpbWVvdXQoY2IsIDApIGlmIGNiXHJcblxyXG5jbGFzcyBQcm9ibGVtXHJcbiAgY29uc3RydWN0b3I6IChAZGVzY3JpcHRpb24pIC0+XHJcbiAgICBAaW5kZXggPSB3aW5kb3cuaW5kZXhcclxuICAgIGxpbmVzID0gQGRlc2NyaXB0aW9uLnNwbGl0KC9cXG4vKVxyXG4gICAgbGluZXMuc2hpZnQoKSB3aGlsZSBsaW5lcy5sZW5ndGggPiAwIGFuZCBsaW5lc1swXS5sZW5ndGggPT0gMFxyXG4gICAgQHRpdGxlID0gbGluZXMuc2hpZnQoKVxyXG4gICAgQGxpbmUgPSBsaW5lcy5zaGlmdCgpXHJcbiAgICBAZGVzY3JpcHRpb24gPSBsaW5lcy5qb2luKFwiXFxuXCIpXHJcblxyXG4gIG5vdzogLT5cclxuICAgIHJldHVybiBpZiB3aW5kb3cucGVyZm9ybWFuY2UgdGhlbiB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCkgZWxzZSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxyXG5cclxuICBwcm9jZXNzOiAtPlxyXG4gICAgaWYgd2luZG93LmFyZ3MuZGVzY3JpcHRpb25cclxuICAgICAgd2luZG93LnRlcm1pbmFsLmVjaG8gXCJbWzsjNDQ0NDQ0O11fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX11cXG5cIlxyXG5cclxuICAgIGZvcm1hdHRlZFRpdGxlID0gJC50ZXJtaW5hbC5mb3JtYXQoXCJbWzsjZmZhYTAwO10je0B0aXRsZX1dXCIpXHJcbiAgICB3aW5kb3cudGVybWluYWwuZWNobyBcIjxhIGhyZWY9XFxcIj9jPSN7d2luZG93LmFyZ3MuY21kfSUyMCN7QGluZGV4fVxcXCI+I3tmb3JtYXR0ZWRUaXRsZX08L2E+XCIsIHsgcmF3OiB0cnVlIH1cclxuXHJcbiAgICBpZiB3aW5kb3cuYXJncy5kZXNjcmlwdGlvblxyXG4gICAgICB3aW5kb3cudGVybWluYWwuZWNobyBcIltbOyM0NDQ0NDQ7XSN7QGxpbmV9XVwiXHJcbiAgICAgIHdpbmRvdy50ZXJtaW5hbC5lY2hvIFwiW1s7I2NjY2NlZTtdI3tAZGVzY3JpcHRpb259XVxcblwiXHJcblxyXG4gICAgaWYgQHJ1bi5oYXNPd25Qcm9wZXJ0eSAndGVzdCdcclxuICAgICAgYW5zd2VyRnVuYyA9IEBydW4uYW5zd2VyXHJcbiAgICAgIHRlc3RGdW5jID0gQHJ1bi50ZXN0XHJcbiAgICBlbHNlXHJcbiAgICAgIGFuc3dlckZ1bmMgPSBAcnVuXHJcbiAgICAgIHRlc3RGdW5jID0gdW5kZWZpbmVkXHJcblxyXG4gICAgaWYgd2luZG93LmFyZ3MudGVzdFxyXG4gICAgICBpZiB0ZXN0RnVuYyA9PSB1bmRlZmluZWRcclxuICAgICAgICB3aW5kb3cudGVybWluYWwuZWNobyBcIltbOyM0NDQ0NDQ7XSAobm8gdGVzdHMpXVwiXHJcbiAgICAgIGVsc2VcclxuICAgICAgICB0ZXN0RnVuYygpXHJcblxyXG4gICAgaWYgd2luZG93LmFyZ3MuYW5zd2VyXHJcbiAgICAgIHN0YXJ0ID0gQG5vdygpXHJcbiAgICAgIGFuc3dlciA9IGFuc3dlckZ1bmMoKVxyXG4gICAgICBlbmQgPSBAbm93KClcclxuICAgICAgbXMgPSBlbmQgLSBzdGFydFxyXG4gICAgICB3aW5kb3cudGVybWluYWwuZWNobyBcIltbOyNmZmZmZmY7XSAtPiBdW1s7I2FhZmZhYTtdQW5zd2VyOl0gKFtbOyNhYWZmZmY7XSN7bXMudG9GaXhlZCgxKX1tc10pOiBbWzsjZmZmZmZmO10je2VzY2FwZWRTdHJpbmdpZnkoYW5zd2VyKX1dXCJcclxuXHJcbnJvb3QuUHJvYmxlbSA9IFByb2JsZW1cclxuXHJcbnJvb3Qub2sgPSAodiwgbXNnKSAtPlxyXG4gIHdpbmRvdy50ZXJtaW5hbC5lY2hvIFwiW1s7I2ZmZmZmZjtdICogIF0je3Z9OiAje21zZ31cIlxyXG5cclxucm9vdC5lcXVhbCA9IChhLCBiLCBtc2cpIC0+XHJcbiAgaWYgYSA9PSBiXHJcbiAgICB3aW5kb3cudGVybWluYWwuZWNobyBcIltbOyNmZmZmZmY7XSAqICBdW1s7IzU1NTU1NTtdI3ttc2d9XVwiXHJcbiAgZWxzZVxyXG4gICAgd2luZG93LnRlcm1pbmFsLmVjaG8gXCJbWzsjZmZmZmZmO10gKiAgXVtbOyNmZmFhYWE7XSN7bXNnfV1cIlxyXG5cclxucm9vdC5vbkNvbW1hbmQgPSAoY29tbWFuZCkgPT5cclxuICByZXR1cm4gaWYgY29tbWFuZC5sZW5ndGggPT0gMFxyXG4gIGNtZCA9ICQudGVybWluYWwucGFyc2VDb21tYW5kKGNvbW1hbmQpXHJcbiAgcmV0dXJuIGlmIGNtZC5uYW1lLmxlbmd0aCA9PSAwXHJcblxyXG4gIGNvbnNvbGUubG9nIGNtZFxyXG5cclxuICB2ZXJib3NlID0gZmFsc2VcclxuXHJcbiAgYXJncyA9XHJcbiAgICBzdGFydEluZGV4OiAwXHJcbiAgICBlbmRJbmRleDogMFxyXG4gICAgbGlzdDogW11cclxuICAgIGRlc2NyaXB0aW9uOiBmYWxzZVxyXG4gICAgdGVzdDogZmFsc2VcclxuICAgIGFuc3dlcjogZmFsc2VcclxuXHJcbiAgZm9yIGFyZyBpbiBjbWQuYXJnc1xyXG4gICAgYXJnID0gU3RyaW5nKGFyZylcclxuICAgIGNvbnRpbnVlIGlmIGFyZy5sZW5ndGggPCAxXHJcbiAgICBpZiBhcmdbMF0gPT0gJ3YnXHJcbiAgICAgIHZlcmJvc2UgPSB0cnVlXHJcbiAgICBlbHNlIGlmIGFyZy5tYXRjaCgvXlxcZCskLylcclxuICAgICAgdiA9IHBhcnNlSW50KGFyZylcclxuICAgICAgaWYgKHYgPj0gMSkgYW5kICh2IDw9IExBU1RfUFJPQkxFTSlcclxuICAgICAgICBhcmdzLmxpc3QucHVzaCh2KVxyXG5cclxuICBpZiBhcmdzLmxpc3QubGVuZ3RoID09IDBcclxuICAgIGFyZ3Muc3RhcnRJbmRleCA9IDFcclxuICAgIGFyZ3MuZW5kSW5kZXggPSBMQVNUX1BST0JMRU1cclxuXHJcbiAgcHJvY2VzcyA9IHRydWVcclxuXHJcbiAgIyBTaW5jZSBhbGwgb2Ygb3VyIGNvbW1hbmRzIGhhcHBlbiB0byBoYXZlIHVuaXF1ZSBmaXJzdCBsZXR0ZXJzLCBsZXQgcGVvcGxlIGJlIHN1cGVyIGxhenkvc2lsbHlcclxuICBpZiBjbWQubmFtZVswXSA9PSAnbCdcclxuICAgIGFyZ3MuY21kID0gXCJsaXN0XCJcclxuICBlbHNlIGlmIGNtZC5uYW1lWzBdID09ICdkJ1xyXG4gICAgYXJncy5jbWQgPSBcImRlc2NyaWJlXCJcclxuICAgIGFyZ3MuZGVzY3JpcHRpb24gPSB0cnVlXHJcbiAgZWxzZSBpZiBjbWQubmFtZVswXSA9PSAndCdcclxuICAgIGFyZ3MuY21kID0gXCJ0ZXN0XCJcclxuICAgIGFyZ3MudGVzdCA9IHRydWVcclxuICBlbHNlIGlmIGNtZC5uYW1lWzBdID09ICdhJ1xyXG4gICAgYXJncy5jbWQgPSBcImFuc3dlclwiXHJcbiAgICBhcmdzLmFuc3dlciA9IHRydWVcclxuICBlbHNlIGlmIGNtZC5uYW1lWzBdID09ICdyJ1xyXG4gICAgYXJncy5jbWQgPSBcInJ1blwiXHJcbiAgICBhcmdzLnRlc3QgPSB0cnVlXHJcbiAgICBhcmdzLmFuc3dlciA9IHRydWVcclxuICBlbHNlIGlmIGNtZC5uYW1lWzBdID09ICdkJ1xyXG4gICAgYXJncy5jbWQgPSBcImRlc2NyaWJlXCJcclxuICAgIGFyZ3MuZGVzY3JpcHRpb24gPSB0cnVlXHJcbiAgZWxzZSBpZiBjbWQubmFtZVswXSA9PSAnaCdcclxuICAgIGFyZ3MuY21kID0gXCJoZWxwXCJcclxuICAgIHByb2Nlc3MgPSBmYWxzZVxyXG4gICAgd2luZG93LnRlcm1pbmFsLmVjaG8gXCJcIlwiXHJcbiAgICBDb21tYW5kczpcclxuXHJcbiAgICAgICAgbGlzdCBbWF0gICAgIC0gTGlzdCBwcm9ibGVtIHRpdGxlc1xyXG4gICAgICAgIGRlc2NyaWJlIFtYXSAtIERpc3BsYXkgZnVsbCBwcm9ibGVtIGRlc2NyaXB0aW9uc1xyXG4gICAgICAgIHRlc3QgW1hdICAgICAtIFJ1biB1bml0IHRlc3RzXHJcbiAgICAgICAgYW5zd2VyIFtYXSAgIC0gVGltZSBhbmQgY2FsY3VsYXRlIGFuc3dlclxyXG4gICAgICAgIHJ1biBbWF0gICAgICAtIHRlc3QgYW5kIGFuc3dlciBjb21iaW5lZFxyXG4gICAgICAgIGhlbHAgICAgICAgICAtIFRoaXMgaGVscFxyXG5cclxuICAgICAgICBJbiBhbGwgb2YgdGhlc2UsIFtYXSBjYW4gYmUgYSBsaXN0IG9mIG9uZSBvciBtb3JlIHByb2JsZW0gbnVtYmVycy4gKGEgdmFsdWUgZnJvbSAxIHRvICN7TEFTVF9QUk9CTEVNfSkuIElmIGFic2VudCwgaXQgaW1wbGllcyBhbGwgcHJvYmxlbXMuXHJcbiAgICAgICAgQWxzbywgYWRkaW5nIHRoZSB3b3JkIFwidmVyYm9zZVwiIHRvIHNvbWUgb2YgdGhlc2UgY29tbWFuZHMgd2lsbCBlbWl0IHRoZSBkZXNjcmlwdGlvbiBiZWZvcmUgcGVyZm9ybWluZyB0aGUgdGFzay5cclxuXHJcbiAgICBcIlwiXCJcclxuICBlbHNlXHJcbiAgICBwcm9jZXNzID0gZmFsc2VcclxuICAgIHdpbmRvdy50ZXJtaW5hbC5lY2hvIFwiW1s7I2ZmYWFhYTtdVW5rbm93biBjb21tYW5kLl1cIlxyXG5cclxuICBpZiB2ZXJib3NlXHJcbiAgICBhcmdzLmRlc2NyaXB0aW9uID0gdHJ1ZVxyXG5cclxuICBpZiBwcm9jZXNzXHJcbiAgICBpdGVyYXRlUHJvYmxlbXMoYXJncylcclxuXHJcbiMgU2lldmUgd2FzIGJsaW5kbHkgdGFrZW4vYWRhcHRlZCBmcm9tIFJvc2V0dGFDb2RlLiBET05UIEVWRU4gQ0FSRVxyXG5jbGFzcyBJbmNyZW1lbnRhbFNpZXZlXHJcbiAgY29uc3RydWN0b3I6IC0+XHJcbiAgICBAbiA9IDBcclxuXHJcbiAgbmV4dDogLT5cclxuICAgIEBuICs9IDJcclxuICAgIGlmIEBuIDwgN1xyXG4gICAgICBpZiBAbiA8IDNcclxuICAgICAgICBAbiA9IDFcclxuICAgICAgICByZXR1cm4gMlxyXG4gICAgICBpZiBAbiA8IDVcclxuICAgICAgICByZXR1cm4gM1xyXG4gICAgICBAZGljdCA9IHt9XHJcbiAgICAgIEBicHMgPSBuZXcgSW5jcmVtZW50YWxTaWV2ZSgpXHJcbiAgICAgIEBicHMubmV4dCgpXHJcbiAgICAgIEBwID0gQGJwcy5uZXh0KClcclxuICAgICAgQHEgPSBAcCAqIEBwXHJcbiAgICAgIHJldHVybiA1XHJcbiAgICBlbHNlXHJcbiAgICAgIHMgPSBAZGljdFtAbl1cclxuICAgICAgaWYgbm90IHNcclxuICAgICAgICBpZiBAbiA8IEBxXHJcbiAgICAgICAgICByZXR1cm4gQG5cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICBwMiA9IEBwIDw8IDFcclxuICAgICAgICAgIEBkaWN0W0BuICsgcDJdID0gcDJcclxuICAgICAgICAgIEBwID0gQGJwcy5uZXh0KClcclxuICAgICAgICAgIEBxID0gQHAgKiBAcFxyXG4gICAgICAgICAgcmV0dXJuIEBuZXh0KClcclxuICAgICAgZWxzZVxyXG4gICAgICAgIGRlbGV0ZSBAZGljdFtAbl1cclxuICAgICAgICBueHQgPSBAbiArIHNcclxuICAgICAgICB3aGlsZSAoQGRpY3Rbbnh0XSlcclxuICAgICAgICAgIG54dCArPSBzXHJcbiAgICAgICAgQGRpY3Rbbnh0XSA9IHNcclxuICAgICAgICByZXR1cm4gQG5leHQoKVxyXG5cclxucm9vdC5JbmNyZW1lbnRhbFNpZXZlID0gSW5jcmVtZW50YWxTaWV2ZVxyXG4iXX0=
