require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"r1PLSq":[function(require,module,exports){
var problem;

module.exports = problem = new Problem("\nProblem 1: Multiples of 3 and 5\n-------------------------------\n\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\n\nFind the sum of all the multiples of 3 or 5 below 1000.\n");

problem.test = function() {
  var i, sum, _i;
  sum = 0;
  for (i = _i = 1; _i < 10; i = ++_i) {
    if ((i % 3 === 0) || (i % 5 === 0)) {
      sum += i;
    }
  }
  return equal(sum, 23, "Sum of natural numbers < 10: " + sum);
};

problem.answer = function() {
  var i, sum, _i;
  sum = 0;
  for (i = _i = 1; _i < 1000; i = ++_i) {
    if ((i % 3 === 0) || (i % 5 === 0)) {
      sum += i;
    }
  }
  return sum;
};


},{}],"e001":[function(require,module,exports){
module.exports=require('r1PLSq');
},{}],"e002":[function(require,module,exports){
module.exports=require('78QEJ9');
},{}],"78QEJ9":[function(require,module,exports){
var problem;

module.exports = problem = new Problem("\nProblem 2: Even Fibonacci numbers\n---------------------------------\n\nEach new term in the Fibonacci sequence is generated by adding the previous two terms.\nBy starting with 1 and 2, the first 10 terms will be:\n\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million,\nfind the sum of the even-valued terms.\n");

problem.answer = function() {
  var curr, next, prev, sum;
  prev = 1;
  curr = 1;
  sum = 0;
  while (curr < 4000000) {
    if ((curr % 2) === 0) {
      sum += curr;
    }
    next = curr + prev;
    prev = curr;
    curr = next;
  }
  return sum;
};


},{}],"HokIVh":[function(require,module,exports){
var isPrime, largestPrimeFactor, leastFactor, primeFactors, problem;

module.exports = problem = new Problem("\nProblem 3: Largest prime factor\n-------------------------------\n\nThe prime factors of 13195 are 5, 7, 13 and 29.\n\nWhat is the largest prime factor of the number 600851475143 ?\n");

leastFactor = function(n) {
  var i, m, _i;
  if (isNaN(n) || !isFinite(n)) {
    return NaN;
  }
  if (n === 0) {
    return 0;
  }
  if ((n % 1) !== 0 || (n * n) < 2) {
    return 1;
  }
  if ((n % 2) === 0) {
    return 2;
  }
  if ((n % 3) === 0) {
    return 3;
  }
  if ((n % 5) === 0) {
    return 5;
  }
  m = Math.sqrt(n);
  for (i = _i = 7; _i <= m; i = _i += 30) {
    if ((n % i) === 0) {
      return i;
    }
    if ((n % (i + 4)) === 0) {
      return i + 4;
    }
    if ((n % (i + 6)) === 0) {
      return i + 6;
    }
    if ((n % (i + 10)) === 0) {
      return i + 10;
    }
    if ((n % (i + 12)) === 0) {
      return i + 12;
    }
    if ((n % (i + 16)) === 0) {
      return i + 16;
    }
    if ((n % (i + 22)) === 0) {
      return i + 22;
    }
    if ((n % (i + 24)) === 0) {
      return i + 24;
    }
  }
  return n;
};

isPrime = function(n) {
  if (isNaN(n) || !isFinite(n) || (n % 1) !== 0 || (n < 2)) {
    return false;
  }
  if (n === leastFactor(n)) {
    return true;
  }
  return false;
};

primeFactors = function(n) {
  var factor, factors;
  if (n === 1) {
    return [1];
  }
  factors = [];
  while (!isPrime(n)) {
    factor = leastFactor(n);
    factors.push(factor);
    n /= factor;
  }
  factors.push(n);
  return factors;
};

largestPrimeFactor = function(n) {
  var factor;
  if (n === 1) {
    return 1;
  }
  while (!isPrime(n)) {
    factor = leastFactor(n);
    n /= factor;
  }
  return n;
};

problem.answer = function() {
  return largestPrimeFactor(600851475143);
};


},{}],"e003":[function(require,module,exports){
module.exports=require('HokIVh');
},{}],"ys3VZW":[function(require,module,exports){
var isPalindrome, problem;

module.exports = problem = new Problem("\nProblem 4: Largest palindrome product\n-------------------------------------\n\nA palindromic number reads the same both ways.\n\nFind the largest palindrome made from the product of two 3-digit numbers.\n");

isPalindrome = function(n) {
  var i, str, _i, _ref;
  str = n.toString();
  for (i = _i = 0, _ref = str.length / 2; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    if (str[i] !== str[str.length - 1 - i]) {
      return false;
    }
  }
  return true;
};

problem.test = function() {
  var v, _i, _j, _len, _len1, _ref, _ref1, _results;
  _ref = [1, 11, 121, 1221, 12321, 1234321];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    v = _ref[_i];
    equal(isPalindrome(v), true, "isPalindrome(" + v + ") returns true");
  }
  _ref1 = [12, 123, 1234, 12345, 123456, 12324];
  _results = [];
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    v = _ref1[_j];
    _results.push(equal(isPalindrome(v), false, "isPalindrome(" + v + ") returns false"));
  }
  return _results;
};

problem.answer = function() {
  var i, j, largesti, largestj, largestp, product, _i, _j;
  largesti = 0;
  largestj = 0;
  largestp = 0;
  for (i = _i = 100; _i <= 999; i = ++_i) {
    for (j = _j = 100; _j <= 999; j = ++_j) {
      product = i * j;
      if (isPalindrome(product)) {
        largesti = i;
        largestj = j;
        largestp = product;
      }
    }
  }
  return largestp;
};


},{}],"e004":[function(require,module,exports){
module.exports=require('ys3VZW');
},{}],"e005":[function(require,module,exports){
module.exports=require('8Y1Hkt');
},{}],"8Y1Hkt":[function(require,module,exports){
var problem;

module.exports = problem = new Problem("\nProblem 5: Smallest multiple\n----------------------------\n\n2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n\nWhat is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?\n");

problem.answer = function() {
  var found, i, n, _i;
  n = 0;
  while (true) {
    n += 20;
    found = true;
    for (i = _i = 1; _i <= 20; i = ++_i) {
      if ((n % i) !== 0) {
        found = false;
        break;
      }
    }
    if (found) {
      break;
    }
  }
  return n;
};


},{}],"e006":[function(require,module,exports){
module.exports=require('a5iprt');
},{}],"a5iprt":[function(require,module,exports){
var differenceSumSquares, problem, squareOfSum, sumOfSquares;

module.exports = problem = new Problem("\nProblem 6: Sum square difference\n--------------------------------\n\nThe sum of the squares of the first ten natural numbers is,\n\n             1^2 + 2^2 + ... + 10^2 = 385\n\nThe square of the sum of the first ten natural numbers is,\n\n          (1 + 2 + ... + 10)^2 = 55^2 = 3025\n\nHence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 âˆ’ 385 = 2640.\n\nFind the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.\n");

sumOfSquares = function(n) {
  var i, sum, _i;
  sum = 0;
  for (i = _i = 1; 1 <= n ? _i <= n : _i >= n; i = 1 <= n ? ++_i : --_i) {
    sum += i * i;
  }
  return sum;
};

squareOfSum = function(n) {
  var i, sum, _i;
  sum = 0;
  for (i = _i = 1; 1 <= n ? _i <= n : _i >= n; i = 1 <= n ? ++_i : --_i) {
    sum += i;
  }
  return sum * sum;
};

differenceSumSquares = function(n) {
  return squareOfSum(n) - sumOfSquares(n);
};

problem.test = function() {
  equal(sumOfSquares(10), 385, "Sum of squares of first ten natural numbers is 385");
  equal(squareOfSum(10), 3025, "Square of sum of first ten natural numbers is 3025");
  return equal(differenceSumSquares(10), 2640, "Difference in values for the first ten natural numbers is 2640");
};

problem.answer = function() {
  return differenceSumSquares(100);
};


},{}],"e007":[function(require,module,exports){
module.exports=require('v+s2Qb');
},{}],"v+s2Qb":[function(require,module,exports){
var math, nthPrime, problem;

module.exports = problem = new Problem("\nProblem 7: 10001st prime\n------------------------\n\nBy listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\n\nWhat is the 10,001st prime number?\n");

math = require("math");

nthPrime = function(n) {
  var i, sieve, _i;
  sieve = new math.IncrementalSieve;
  for (i = _i = 1; 1 <= n ? _i < n : _i > n; i = 1 <= n ? ++_i : --_i) {
    sieve.next();
  }
  return sieve.next();
};

problem.test = function() {
  return equal(nthPrime(6), 13, "6th prime is 13");
};

problem.answer = function() {
  return nthPrime(10001);
};


},{"math":"LOkceL"}],"e008":[function(require,module,exports){
module.exports=require('4902rv');
},{}],"4902rv":[function(require,module,exports){
var digit, digits, largestProduct, problem, str;

module.exports = problem = new Problem("\nProblem 8: Largest product in a series\n--------------------------------------\n\nThe four adjacent digits in the 1000-digit number that have the greatest product are 9 x 9 x 8 x 9 = 5832.\n\n  73167176531330624919225119674426574742355349194934\n  96983520312774506326239578318016984801869478851843\n  85861560789112949495459501737958331952853208805511\n  12540698747158523863050715693290963295227443043557\n  66896648950445244523161731856403098711121722383113\n  62229893423380308135336276614282806444486645238749\n  30358907296290491560440772390713810515859307960866\n  70172427121883998797908792274921901699720888093776\n  65727333001053367881220235421809751254540594752243\n  52584907711670556013604839586446706324415722155397\n  53697817977846174064955149290862569321978468622482\n  83972241375657056057490261407972968652414535100474\n  82166370484403199890008895243450658541227588666881\n  16427171479924442928230863465674813919123162824586\n  17866458359124566529476545682848912883142607690042\n  24219022671055626321111109370544217506941658960408\n  07198403850962455444362981230987879927244284909188\n  84580156166097919133875499200524063689912560717606\n  05886116467109405077541002256983155200055935729725\n  71636269561882670428252483600823257530420752963450\n\nFind the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?\n");

str = "73167176531330624919225119674426574742355349194934\n96983520312774506326239578318016984801869478851843\n85861560789112949495459501737958331952853208805511\n12540698747158523863050715693290963295227443043557\n66896648950445244523161731856403098711121722383113\n62229893423380308135336276614282806444486645238749\n30358907296290491560440772390713810515859307960866\n70172427121883998797908792274921901699720888093776\n65727333001053367881220235421809751254540594752243\n52584907711670556013604839586446706324415722155397\n53697817977846174064955149290862569321978468622482\n83972241375657056057490261407972968652414535100474\n82166370484403199890008895243450658541227588666881\n16427171479924442928230863465674813919123162824586\n17866458359124566529476545682848912883142607690042\n24219022671055626321111109370544217506941658960408\n07198403850962455444362981230987879927244284909188\n84580156166097919133875499200524063689912560717606\n05886116467109405077541002256983155200055935729725\n71636269561882670428252483600823257530420752963450";

str = str.replace(/[^0-9]/gm, "");

digits = (function() {
  var _i, _len, _results;
  _results = [];
  for (_i = 0, _len = str.length; _i < _len; _i++) {
    digit = str[_i];
    _results.push(parseInt(digit));
  }
  return _results;
})();

largestProduct = function(digitCount) {
  var end, i, largest, product, start, _i, _j, _ref;
  if (digitCount > digits.length) {
    return 0;
  }
  largest = 0;
  for (start = _i = 0, _ref = digits.length - digitCount; 0 <= _ref ? _i <= _ref : _i >= _ref; start = 0 <= _ref ? ++_i : --_i) {
    end = start + digitCount;
    product = 1;
    for (i = _j = start; start <= end ? _j < end : _j > end; i = start <= end ? ++_j : --_j) {
      product *= digits[i];
    }
    if (largest < product) {
      largest = product;
    }
  }
  return largest;
};

problem.test = function() {
  equal(largestProduct(4), 5832, "Greatest product of 4 adjacent digits is 5832");
  return equal(largestProduct(5), 40824, "Greatest product of 5 adjacent digits is 40824");
};

problem.answer = function() {
  return largestProduct(13);
};


},{}],"e009":[function(require,module,exports){
module.exports=require('w1omiu');
},{}],"w1omiu":[function(require,module,exports){
var findFirstTriplet, isTriplet, problem;

module.exports = problem = new Problem("\nProblem 9: Special Pythagorean triplet\n--------------------------------------\n\nA Pythagorean triplet is a set of three natural numbers, a < b < c, for which,\n\n    a^2 + b^2 = c^2\n\nFor example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.\n\nThere exists exactly one Pythagorean triplet for which a + b + c = 1000.\n\nFind the product abc.\n");

isTriplet = function(a, b, c) {
  return ((a * a) + (b * b)) === (c * c);
};

findFirstTriplet = function(sum) {
  var a, b, c, _i, _j;
  for (a = _i = 1; _i < 1000; a = ++_i) {
    for (b = _j = 1; _j < 1000; b = ++_j) {
      c = 1000 - a - b;
      if (isTriplet(a, b, c)) {
        return [a, b, c];
      }
    }
  }
  return false;
};

problem.test = function() {
  return equal(isTriplet(3, 4, 5), true, "(3,4,5) is a Pythagorean triplet");
};

problem.answer = function() {
  return findFirstTriplet(1000);
};


},{}],"VGQJ6S":[function(require,module,exports){
var math, primeSum, problem;

module.exports = problem = new Problem("\nProblem 10: Summation of primes\n-------------------------------\n\nThe sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n\nFind the sum of all the primes below two million.\n");

math = require("math");

primeSum = function(ceiling) {
  var n, sieve, sum;
  sieve = new math.IncrementalSieve;
  sum = 0;
  while (true) {
    n = sieve.next();
    if (n >= ceiling) {
      break;
    }
    sum += n;
  }
  return sum;
};

problem.test = function() {
  return equal(primeSum(10), 17, "Sum of primes below 10 is 17");
};

problem.answer = function() {
  return primeSum(2000000);
};


},{"math":"LOkceL"}],"e010":[function(require,module,exports){
module.exports=require('VGQJ6S');
},{}],"e011":[function(require,module,exports){
module.exports=require('vx/pw5');
},{}],"vx/pw5":[function(require,module,exports){
var getLine, getLineProduct, grid, prepareGrid, problem;

module.exports = problem = new Problem("\nProblem 11: Largest product in a grid\n-------------------------------------\n\nIn the 20x20 grid below, four numbers along a diagonal line have been marked in red.\n\n          08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n          49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n          81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n          52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n          22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n          24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n          32 98 81 28 64 23 67 10 26_38 40 67 59 54 70 66 18 38 64 70\n          67 26 20 68 02 62 12 20 95 63_94 39 63 08 40 91 66 49 94 21\n          24 55 58 05 66 73 99 26 97 17 78_78 96 83 14 88 34 89 63 72\n          21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\n          78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n          16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n          86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n          19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n          04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n          88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n          04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n          20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n          20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n          01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\n\nThe product of these numbers is 26 x 63 x 78 x 14 = 1788696.\n\nWhat is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20x20 grid?\n");

grid = null;

prepareGrid = function() {
  var digit, digits, i, index, j, rawDigits, _i, _j, _results;
  rawDigits = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\n67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\n24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\n21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\n78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48".replace(/[^0-9 ]/gm, " ");
  digits = (function() {
    var _i, _len, _ref, _results;
    _ref = rawDigits.split(" ");
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      digit = _ref[_i];
      _results.push(parseInt(digit));
    }
    return _results;
  })();
  grid = Array(20);
  for (i = _i = 0; _i < 20; i = ++_i) {
    grid[i] = Array(20);
  }
  index = 0;
  _results = [];
  for (j = _j = 0; _j < 20; j = ++_j) {
    _results.push((function() {
      var _k, _results1;
      _results1 = [];
      for (i = _k = 0; _k < 20; i = ++_k) {
        grid[i][j] = digits[index];
        _results1.push(index++);
      }
      return _results1;
    })());
  }
  return _results;
};

prepareGrid();

getLineProduct = function(sx, sy, dx, dy) {
  var ex, ey, i, product, x, y, _i;
  ex = sx + (4 * dx);
  if ((ex < 0) || (ex >= 20)) {
    return -1;
  }
  ey = sy + (4 * dy);
  if ((ey < 0) || (ey >= 20)) {
    return -1;
  }
  x = sx;
  y = sy;
  product = 1;
  for (i = _i = 0; _i < 4; i = ++_i) {
    product *= grid[x][y];
    x += dx;
    y += dy;
  }
  return product;
};

getLine = function(sx, sy, dx, dy) {
  var ex, ey, i, line, x, y, _i;
  ex = sx + (4 * dx);
  if ((ex < 0) || (ex >= 20)) {
    return [];
  }
  ey = sy + (4 * dy);
  if ((ey < 0) || (ey >= 20)) {
    return [];
  }
  line = [];
  x = sx;
  y = sy;
  for (i = _i = 0; _i < 4; i = ++_i) {
    line.push(grid[x][y]);
    x += dx;
    y += dy;
  }
  return line;
};

problem.test = function() {
  return equal(getLineProduct(8, 6, 1, 1), 1788696, "Diagonal value shown in example equals 1,788,696");
};

problem.answer = function() {
  var i, j, max, p, _i, _j;
  max = {
    product: 1,
    i: 0,
    j: 0,
    dir: "right"
  };
  for (j = _i = 0; _i < 20; j = ++_i) {
    for (i = _j = 0; _j < 20; i = ++_j) {
      p = getLineProduct(i, j, 1, 0);
      if (max.product < p) {
        max.product = p;
        max.i = i;
        max.j = j;
        max.dir = "right";
      }
      p = getLineProduct(i, j, 0, 1);
      if (max.product < p) {
        max.product = p;
        max.i = i;
        max.j = j;
        max.dir = "down";
      }
      p = getLineProduct(i, j, 1, 1);
      if (max.product < p) {
        max.product = p;
        max.i = i;
        max.j = j;
        max.dir = "diagonal";
      }
    }
  }
  return max;
};


},{}],"rQq+26":[function(require,module,exports){
var divisorCount, math, problem;

module.exports = problem = new Problem("\nProblem 12: Highly divisible triangular number\n----------------------------------------------\n\nThe sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be\n\n                      1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.\n\nThe first ten terms would be:\n\n                      1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n\nLet us list the factors of the first seven triangle numbers:\n\n 1: 1\n 3: 1,3\n 6: 1,2,3,6\n10: 1,2,5,10\n15: 1,3,5,15\n21: 1,3,7,21\n28: 1,2,4,7,14,28\n\nWe can see that 28 is the first triangle number to have over five divisors.\n\nWhat is the value of the first triangle number to have over five hundred divisors?\n");

math = require("math");

divisorCount = function(n) {
  var count, exponent, factor, factors, lastFactor, _i, _len;
  if (n === 1) {
    return 1;
  }
  factors = math.primeFactors(n);
  count = 1;
  lastFactor = 0;
  exponent = 1;
  for (_i = 0, _len = factors.length; _i < _len; _i++) {
    factor = factors[_i];
    if (factor === lastFactor) {
      exponent++;
    } else {
      if (lastFactor !== 0) {
        count *= exponent + 1;
      }
      lastFactor = factor;
      exponent = 1;
    }
  }
  if (lastFactor !== 0) {
    count *= exponent + 1;
  }
  return count;
};

problem.test = function() {
  equal(divisorCount(1), 1, " 1 has 1 divisors");
  equal(divisorCount(3), 2, " 3 has 2 divisors");
  equal(divisorCount(6), 4, " 6 has 4 divisors");
  equal(divisorCount(10), 4, "10 has 4 divisors");
  equal(divisorCount(15), 4, "15 has 4 divisors");
  equal(divisorCount(21), 4, "21 has 4 divisors");
  return equal(divisorCount(28), 6, "28 has 6 divisors");
};

problem.answer = function() {
  var count, n, step;
  n = 1;
  step = 2;
  while (true) {
    count = divisorCount(n);
    if (count > 500) {
      return {
        n: n,
        count: count
      };
    }
    n += step;
    step++;
  }
};


},{"math":"LOkceL"}],"e012":[function(require,module,exports){
module.exports=require('rQq+26');
},{}],"e013":[function(require,module,exports){
module.exports=require('rXvPaX');
},{}],"rXvPaX":[function(require,module,exports){
var ReallyLargeIntegerSummerInstantiation, ReallyLargeIntegerSummerInstantiationFactory, ReallyLargeIntegerSummerInterface, com, numbers, problem,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = problem = new Problem("\nProblem 13: Large sum\n---------------------\n\nWork out the first ten digits of the sum of the following one-hundred 50-digit numbers.\n\n37107287533902102798797998220837590246510135740250\n46376937677490009712648124896970078050417018260538\n74324986199524741059474233309513058123726617309629\n91942213363574161572522430563301811072406154908250\n23067588207539346171171980310421047513778063246676\n89261670696623633820136378418383684178734361726757\n28112879812849979408065481931592621691275889832738\n44274228917432520321923589422876796487670272189318\n47451445736001306439091167216856844588711603153276\n70386486105843025439939619828917593665686757934951\n62176457141856560629502157223196586755079324193331\n64906352462741904929101432445813822663347944758178\n92575867718337217661963751590579239728245598838407\n58203565325359399008402633568948830189458628227828\n80181199384826282014278194139940567587151170094390\n35398664372827112653829987240784473053190104293586\n86515506006295864861532075273371959191420517255829\n71693888707715466499115593487603532921714970056938\n54370070576826684624621495650076471787294438377604\n53282654108756828443191190634694037855217779295145\n36123272525000296071075082563815656710885258350721\n45876576172410976447339110607218265236877223636045\n17423706905851860660448207621209813287860733969412\n81142660418086830619328460811191061556940512689692\n51934325451728388641918047049293215058642563049483\n62467221648435076201727918039944693004732956340691\n15732444386908125794514089057706229429197107928209\n55037687525678773091862540744969844508330393682126\n18336384825330154686196124348767681297534375946515\n80386287592878490201521685554828717201219257766954\n78182833757993103614740356856449095527097864797581\n16726320100436897842553539920931837441497806860984\n48403098129077791799088218795327364475675590848030\n87086987551392711854517078544161852424320693150332\n59959406895756536782107074926966537676326235447210\n69793950679652694742597709739166693763042633987085\n41052684708299085211399427365734116182760315001271\n65378607361501080857009149939512557028198746004375\n35829035317434717326932123578154982629742552737307\n94953759765105305946966067683156574377167401875275\n88902802571733229619176668713819931811048770190271\n25267680276078003013678680992525463401061632866526\n36270218540497705585629946580636237993140746255962\n24074486908231174977792365466257246923322810917141\n91430288197103288597806669760892938638285025333403\n34413065578016127815921815005561868836468420090470\n23053081172816430487623791969842487255036638784583\n11487696932154902810424020138335124462181441773470\n63783299490636259666498587618221225225512486764533\n67720186971698544312419572409913959008952310058822\n95548255300263520781532296796249481641953868218774\n76085327132285723110424803456124867697064507995236\n37774242535411291684276865538926205024910326572967\n23701913275725675285653248258265463092207058596522\n29798860272258331913126375147341994889534765745501\n18495701454879288984856827726077713721403798879715\n38298203783031473527721580348144513491373226651381\n34829543829199918180278916522431027392251122869539\n40957953066405232632538044100059654939159879593635\n29746152185502371307642255121183693803580388584903\n41698116222072977186158236678424689157993532961922\n62467957194401269043877107275048102390895523597457\n23189706772547915061505504953922979530901129967519\n86188088225875314529584099251203829009407770775672\n11306739708304724483816533873502340845647058077308\n82959174767140363198008187129011875491310547126581\n97623331044818386269515456334926366572897563400500\n42846280183517070527831839425882145521227251250327\n55121603546981200581762165212827652751691296897789\n32238195734329339946437501907836945765883352399886\n75506164965184775180738168837861091527357929701337\n62177842752192623401942399639168044983993173312731\n32924185707147349566916674687634660915035914677504\n99518671430235219628894890102423325116913619626622\n73267460800591547471830798392868535206946944540724\n76841822524674417161514036427982273348055556214818\n97142617910342598647204516893989422179826088076852\n87783646182799346313767754307809363333018982642090\n10848802521674670883215120185883543223812876952786\n71329612474782464538636993009049310363619763878039\n62184073572399794223406235393808339651327408011116\n66627891981488087797941876876144230030984490851411\n60661826293682836764744779239180335110989069790714\n85786944089552990653640447425576083659976645795096\n66024396409905389607120198219976047599490197230297\n64913982680032973156037120041377903785566085089252\n16730939319872750275468906903707539413042652315011\n94809377245048795150954100921645863754710598436791\n78639167021187492431995700641917969777599028300699\n15368713711936614952811305876380278410754449733078\n40789923115535562561142322423255033685442488917353\n44889911501440648020369068063960672322193204149535\n41503128880339536053299340368006977710650566631954\n81234880673210146739058568557934581403627822703280\n82616570773948327592232845941706525094512325230608\n22918802058777319719839450180888072429661980811197\n77158542502016545090413245809786882778948721859617\n72107838435069186155435662884062257473692284509516\n20849603980134001723930671666823555245252804609722\n53503534226472524250874054075591789781264330331690\n");

numbers = [37107287533902102798797998220837590246510135740250, 46376937677490009712648124896970078050417018260538, 74324986199524741059474233309513058123726617309629, 91942213363574161572522430563301811072406154908250, 23067588207539346171171980310421047513778063246676, 89261670696623633820136378418383684178734361726757, 28112879812849979408065481931592621691275889832738, 44274228917432520321923589422876796487670272189318, 47451445736001306439091167216856844588711603153276, 70386486105843025439939619828917593665686757934951, 62176457141856560629502157223196586755079324193331, 64906352462741904929101432445813822663347944758178, 92575867718337217661963751590579239728245598838407, 58203565325359399008402633568948830189458628227828, 80181199384826282014278194139940567587151170094390, 35398664372827112653829987240784473053190104293586, 86515506006295864861532075273371959191420517255829, 71693888707715466499115593487603532921714970056938, 54370070576826684624621495650076471787294438377604, 53282654108756828443191190634694037855217779295145, 36123272525000296071075082563815656710885258350721, 45876576172410976447339110607218265236877223636045, 17423706905851860660448207621209813287860733969412, 81142660418086830619328460811191061556940512689692, 51934325451728388641918047049293215058642563049483, 62467221648435076201727918039944693004732956340691, 15732444386908125794514089057706229429197107928209, 55037687525678773091862540744969844508330393682126, 18336384825330154686196124348767681297534375946515, 80386287592878490201521685554828717201219257766954, 78182833757993103614740356856449095527097864797581, 16726320100436897842553539920931837441497806860984, 48403098129077791799088218795327364475675590848030, 87086987551392711854517078544161852424320693150332, 59959406895756536782107074926966537676326235447210, 69793950679652694742597709739166693763042633987085, 41052684708299085211399427365734116182760315001271, 65378607361501080857009149939512557028198746004375, 35829035317434717326932123578154982629742552737307, 94953759765105305946966067683156574377167401875275, 88902802571733229619176668713819931811048770190271, 25267680276078003013678680992525463401061632866526, 36270218540497705585629946580636237993140746255962, 24074486908231174977792365466257246923322810917141, 91430288197103288597806669760892938638285025333403, 34413065578016127815921815005561868836468420090470, 23053081172816430487623791969842487255036638784583, 11487696932154902810424020138335124462181441773470, 63783299490636259666498587618221225225512486764533, 67720186971698544312419572409913959008952310058822, 95548255300263520781532296796249481641953868218774, 76085327132285723110424803456124867697064507995236, 37774242535411291684276865538926205024910326572967, 23701913275725675285653248258265463092207058596522, 29798860272258331913126375147341994889534765745501, 18495701454879288984856827726077713721403798879715, 38298203783031473527721580348144513491373226651381, 34829543829199918180278916522431027392251122869539, 40957953066405232632538044100059654939159879593635, 29746152185502371307642255121183693803580388584903, 41698116222072977186158236678424689157993532961922, 62467957194401269043877107275048102390895523597457, 23189706772547915061505504953922979530901129967519, 86188088225875314529584099251203829009407770775672, 11306739708304724483816533873502340845647058077308, 82959174767140363198008187129011875491310547126581, 97623331044818386269515456334926366572897563400500, 42846280183517070527831839425882145521227251250327, 55121603546981200581762165212827652751691296897789, 32238195734329339946437501907836945765883352399886, 75506164965184775180738168837861091527357929701337, 62177842752192623401942399639168044983993173312731, 32924185707147349566916674687634660915035914677504, 99518671430235219628894890102423325116913619626622, 73267460800591547471830798392868535206946944540724, 76841822524674417161514036427982273348055556214818, 97142617910342598647204516893989422179826088076852, 87783646182799346313767754307809363333018982642090, 10848802521674670883215120185883543223812876952786, 71329612474782464538636993009049310363619763878039, 62184073572399794223406235393808339651327408011116, 66627891981488087797941876876144230030984490851411, 60661826293682836764744779239180335110989069790714, 85786944089552990653640447425576083659976645795096, 66024396409905389607120198219976047599490197230297, 64913982680032973156037120041377903785566085089252, 16730939319872750275468906903707539413042652315011, 94809377245048795150954100921645863754710598436791, 78639167021187492431995700641917969777599028300699, 15368713711936614952811305876380278410754449733078, 40789923115535562561142322423255033685442488917353, 44889911501440648020369068063960672322193204149535, 41503128880339536053299340368006977710650566631954, 81234880673210146739058568557934581403627822703280, 82616570773948327592232845941706525094512325230608, 22918802058777319719839450180888072429661980811197, 77158542502016545090413245809786882778948721859617, 72107838435069186155435662884062257473692284509516, 20849603980134001723930671666823555245252804609722, 53503534226472524250874054075591789781264330331690];

com = {
  jdrago: {
    euler: {
      types: {
        soundsLikeFoods: {
          GUAVA: "Guava",
          GUICE: "Guice",
          MOCKITO: "Mockito"
        }
      },
      math: {
        series: {
          ReallyLargeIntegerSummerInterface: ReallyLargeIntegerSummerInterface = (function() {
            function ReallyLargeIntegerSummerInterface(delegate, abstract, synchronized, transient, inject, volatile) {
              this.delegate = delegate;
              this.delegate["singleton"] = com.jdrago.euler.types.soundsLikeFoods.GUAVA;
            }

            return ReallyLargeIntegerSummerInterface;

          })(),
          ReallyLargeIntegerSummerInstantiation: ReallyLargeIntegerSummerInstantiation = (function(_super) {
            __extends(ReallyLargeIntegerSummerInstantiation, _super);

            function ReallyLargeIntegerSummerInstantiation() {
              this.sum = 0;
            }

            ReallyLargeIntegerSummerInstantiation.prototype.add = function(n) {
              return this.sum += n;
            };

            ReallyLargeIntegerSummerInstantiation.prototype.getSum = function() {
              return this.sum;
            };

            return ReallyLargeIntegerSummerInstantiation;

          })(ReallyLargeIntegerSummerInterface),
          ReallyLargeIntegerSummerInstantiationFactory: ReallyLargeIntegerSummerInstantiationFactory = (function() {
            function ReallyLargeIntegerSummerInstantiationFactory() {}

            ReallyLargeIntegerSummerInstantiationFactory.prototype.buildSummer = function() {
              return new com.jdrago.euler.math.series.ReallyLargeIntegerSummerInstantiation;
            };

            return ReallyLargeIntegerSummerInstantiationFactory;

          })()
        }
      }
    }
  }
};

problem.answer = function() {
  var n, reallyLargeIntegerSummerInterfaceImplementation, str, sum, summerFactory, _i, _len;
  summerFactory = new com.jdrago.euler.math.series.ReallyLargeIntegerSummerInstantiationFactory;
  reallyLargeIntegerSummerInterfaceImplementation = summerFactory.buildSummer();
  for (_i = 0, _len = numbers.length; _i < _len; _i++) {
    n = numbers[_i];
    reallyLargeIntegerSummerInterfaceImplementation.add(n);
  }
  sum = reallyLargeIntegerSummerInterfaceImplementation.getSum();
  str = String(sum).replace(/\./g, "").substr(0, 10);
  return str;
};


},{}],"LOkceL":[function(require,module,exports){
var IncrementalSieve, root;

root = typeof exports !== "undefined" && exports !== null ? exports : this;

IncrementalSieve = (function() {
  function IncrementalSieve() {
    this.n = 0;
  }

  IncrementalSieve.prototype.next = function() {
    var nxt, p2, s;
    this.n += 2;
    if (this.n < 7) {
      if (this.n < 3) {
        this.n = 1;
        return 2;
      }
      if (this.n < 5) {
        return 3;
      }
      this.dict = {};
      this.bps = new IncrementalSieve();
      this.bps.next();
      this.p = this.bps.next();
      this.q = this.p * this.p;
      return 5;
    } else {
      s = this.dict[this.n];
      if (!s) {
        if (this.n < this.q) {
          return this.n;
        } else {
          p2 = this.p << 1;
          this.dict[this.n + p2] = p2;
          this.p = this.bps.next();
          this.q = this.p * this.p;
          return this.next();
        }
      } else {
        delete this.dict[this.n];
        nxt = this.n + s;
        while (this.dict[nxt]) {
          nxt += s;
        }
        this.dict[nxt] = s;
        return this.next();
      }
    }
  };

  return IncrementalSieve;

})();

root.IncrementalSieve = IncrementalSieve;

root.leastFactor = function(n) {
  var i, m, _i;
  if (isNaN(n) || !isFinite(n)) {
    return NaN;
  }
  if (n === 0) {
    return 0;
  }
  if ((n % 1) !== 0 || (n * n) < 2) {
    return 1;
  }
  if ((n % 2) === 0) {
    return 2;
  }
  if ((n % 3) === 0) {
    return 3;
  }
  if ((n % 5) === 0) {
    return 5;
  }
  m = Math.sqrt(n);
  for (i = _i = 7; _i <= m; i = _i += 30) {
    if ((n % i) === 0) {
      return i;
    }
    if ((n % (i + 4)) === 0) {
      return i + 4;
    }
    if ((n % (i + 6)) === 0) {
      return i + 6;
    }
    if ((n % (i + 10)) === 0) {
      return i + 10;
    }
    if ((n % (i + 12)) === 0) {
      return i + 12;
    }
    if ((n % (i + 16)) === 0) {
      return i + 16;
    }
    if ((n % (i + 22)) === 0) {
      return i + 22;
    }
    if ((n % (i + 24)) === 0) {
      return i + 24;
    }
  }
  return n;
};

root.isPrime = function(n) {
  if (isNaN(n) || !isFinite(n) || (n % 1) !== 0 || (n < 2)) {
    return false;
  }
  if (n === root.leastFactor(n)) {
    return true;
  }
  return false;
};

root.primeFactors = function(n) {
  var factor, factors;
  if (n === 1) {
    return [1];
  }
  factors = [];
  while (!root.isPrime(n)) {
    factor = root.leastFactor(n);
    factors.push(factor);
    n /= factor;
  }
  factors.push(n);
  return factors;
};

root.factorial = function(n) {
  var f;
  f = n;
  while (n > 1) {
    n--;
    f *= n;
  }
  return f;
};


},{}],"math":[function(require,module,exports){
module.exports=require('LOkceL');
},{}],"Vazq8s":[function(require,module,exports){
var LAST_PROBLEM, Problem, root;

LAST_PROBLEM = 13;

root = window;

root.escapedStringify = function(o) {
  var str;
  str = JSON.stringify(o);
  str = str.replace("]", "\\]");
  return str;
};

root.runAll = function() {
  var lastPuzzle, loadNextScript, nextIndex;
  lastPuzzle = LAST_PROBLEM;
  nextIndex = 0;
  loadNextScript = function() {
    if (nextIndex < lastPuzzle) {
      nextIndex++;
      return runTest(nextIndex, loadNextScript);
    }
  };
  return loadNextScript();
};

root.iterateProblems = function(args) {
  var indexToProcess, iterateNext;
  indexToProcess = null;
  if (args.endIndex > 0) {
    if (args.startIndex <= args.endIndex) {
      indexToProcess = args.startIndex;
      args.startIndex++;
    }
  } else {
    if (args.list.length > 0) {
      indexToProcess = args.list.shift();
    }
  }
  if (indexToProcess !== null) {
    iterateNext = function() {
      window.args = args;
      return runTest(indexToProcess, function() {
        return iterateProblems(args);
      });
    };
    return iterateNext();
  }
};

root.runTest = function(index, cb) {
  var moduleName, problem;
  moduleName = "e" + (('000' + index).slice(-3));
  window.index = index;
  problem = require(moduleName);
  problem.process();
  if (cb) {
    return window.setTimeout(cb, 0);
  }
};

Problem = (function() {
  function Problem(description) {
    var lines;
    this.description = description;
    this.index = window.index;
    lines = this.description.split(/\n/);
    while (lines.length > 0 && lines[0].length === 0) {
      lines.shift();
    }
    this.title = lines.shift();
    this.line = lines.shift();
    this.description = lines.join("\n");
  }

  Problem.prototype.now = function() {
    if (window.performance) {
      return window.performance.now();
    } else {
      return new Date().getTime();
    }
  };

  Problem.prototype.process = function() {
    var answer, answerFunc, end, formattedTitle, ms, sourceLine, start, testFunc, url;
    if (window.args.description) {
      window.terminal.echo("[[;#444444;]_______________________________________________________________________________________________]\n");
    }
    formattedTitle = $.terminal.format("[[;#ffaa00;]" + this.title + "]");
    url = "?c=" + window.args.cmd + "_" + this.index;
    if (window.args.verbose) {
      url += "_v";
    }
    window.terminal.echo("<a href=\"" + url + "\">" + formattedTitle + "</a>", {
      raw: true
    });
    if (window.args.description) {
      window.terminal.echo("[[;#444444;]" + this.line + "]");
      window.terminal.echo("[[;#ccccee;]" + this.description + "]\n");
      sourceLine = $.terminal.format("[[;#444444;]Source:] ");
      sourceLine += (" <a href=\"src/e" + (('000' + this.index).slice(-3)) + ".coffee\">") + $.terminal.format("[[;#773300;]Local]") + "</a> ";
      sourceLine += $.terminal.format("[[;#444444;]/]");
      sourceLine += (" <a href=\"https://github.com/joedrago/euler/blob/master/src/e" + (('000' + this.index).slice(-3)) + ".coffee\">") + $.terminal.format("[[;#773300;]Github]") + "</a>";
      window.terminal.echo(sourceLine, {
        raw: true
      });
      if (window.args.test || window.args.answer) {
        window.terminal.echo("");
      }
    }
    testFunc = this.test;
    answerFunc = this.answer;
    if (window.args.test) {
      if (testFunc === void 0) {
        window.terminal.echo("[[;#444444;] (no tests)]");
      } else {
        testFunc();
      }
    }
    if (window.args.answer) {
      start = this.now();
      answer = answerFunc();
      end = this.now();
      ms = end - start;
      return window.terminal.echo("[[;#ffffff;] -> ][[;#aaffaa;]Answer:] ([[;#aaffff;]" + (ms.toFixed(1)) + "ms]): [[;#ffffff;]" + (escapedStringify(answer)) + "]");
    }
  };

  return Problem;

})();

root.Problem = Problem;

root.ok = function(v, msg) {
  return window.terminal.echo("[[;#ffffff;] *  ]" + v + ": " + msg);
};

root.equal = function(a, b, msg) {
  if (a === b) {
    return window.terminal.echo("[[;#ffffff;] *  ][[;#555555;]PASS: " + msg + "]");
  } else {
    return window.terminal.echo("[[;#ffffff;] *  ][[;#ffaaaa;]FAIL: " + msg + " (" + a + " != " + b + ")]");
  }
};

root.onCommand = (function(_this) {
  return function(command) {
    var arg, args, cmd, process, v, _i, _len, _ref;
    if (command.length === 0) {
      return;
    }
    cmd = $.terminal.parseCommand(command);
    if (cmd.name.length === 0) {
      return;
    }
    args = {
      startIndex: 0,
      endIndex: 0,
      list: [],
      verbose: false,
      description: false,
      test: false,
      answer: false
    };
    process = true;
    _ref = cmd.args;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      arg = _ref[_i];
      arg = String(arg);
      if (arg.length < 1) {
        continue;
      }
      if (arg[0] === 'v') {
        args.verbose = true;
      } else if (arg.match(/^\d+$/)) {
        v = parseInt(arg);
        if ((v >= 1) && (v <= LAST_PROBLEM)) {
          args.list.push(v);
        } else {
          process = false;
          window.terminal.echo("[[;#ffaaaa;]No such test: " + v + " (valid tests 1-" + LAST_PROBLEM + ")]");
        }
      }
    }
    if (args.list.length === 0) {
      args.startIndex = 1;
      args.endIndex = LAST_PROBLEM;
    }
    if (cmd.name[0] === 'l') {
      args.cmd = "list";
    } else if (cmd.name[0] === 'd') {
      args.cmd = "describe";
      args.description = true;
    } else if (cmd.name[0] === 't') {
      args.cmd = "test";
      args.test = true;
    } else if (cmd.name[0] === 'a') {
      args.cmd = "answer";
      args.answer = true;
    } else if (cmd.name[0] === 'r') {
      args.cmd = "run";
      args.test = true;
      args.answer = true;
    } else if (cmd.name[0] === 'd') {
      args.cmd = "describe";
      args.description = true;
    } else if (cmd.name[0] === 'h') {
      args.cmd = "help";
      process = false;
      window.terminal.echo("Commands:\n\n    list [X]     - List problem titles\n    describe [X] - Display full problem descriptions\n    test [X]     - Run unit tests\n    answer [X]   - Time and calculate answer\n    run [X]      - test and answer combined\n    help         - This help\n\n    In all of these, [X] can be a list of one or more problem numbers. (a value from 1 to " + LAST_PROBLEM + "). If absent, it implies all problems.\n    Also, adding the word \"verbose\" to some of these commands will emit the description before performing the task.\n");
    } else {
      process = false;
      window.terminal.echo("[[;#ffaaaa;]Unknown command.]");
    }
    if (args.verbose) {
      args.description = true;
    }
    if (process) {
      return iterateProblems(args);
    }
  };
})(this);


},{}],"terminal":[function(require,module,exports){
module.exports=require('Vazq8s');
},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIuLlxcbm9kZV9tb2R1bGVzXFxicm93c2VyaWZ5XFxub2RlX21vZHVsZXNcXGJyb3dzZXItcGFja1xcX3ByZWx1ZGUuanMiLCIuLlxcc3JjXFxlMDAxLmNvZmZlZSIsIi4uXFxzcmNcXGUwMDIuY29mZmVlIiwiLi5cXHNyY1xcZTAwMy5jb2ZmZWUiLCIuLlxcc3JjXFxlMDA0LmNvZmZlZSIsIi4uXFxzcmNcXGUwMDUuY29mZmVlIiwiLi5cXHNyY1xcZTAwNi5jb2ZmZWUiLCIuLlxcc3JjXFxlMDA3LmNvZmZlZSIsIi4uXFxzcmNcXGUwMDguY29mZmVlIiwiLi5cXHNyY1xcZTAwOS5jb2ZmZWUiLCIuLlxcc3JjXFxlMDEwLmNvZmZlZSIsIi4uXFxzcmNcXGUwMTEuY29mZmVlIiwiLi5cXHNyY1xcZTAxMi5jb2ZmZWUiLCIuLlxcc3JjXFxlMDEzLmNvZmZlZSIsIi4uXFxzcmNcXG1hdGguY29mZmVlIiwiLi5cXHNyY1xcdGVybWluYWwuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsSUFBQSxPQUFBOztBQUFBLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLE9BQUEsR0FBYyxJQUFBLE9BQUEsQ0FBUSx1UUFBUixDQUEvQixDQUFBOztBQUFBLE9BWU8sQ0FBQyxJQUFSLEdBQWUsU0FBQSxHQUFBO0FBQ2IsTUFBQSxVQUFBO0FBQUEsRUFBQSxHQUFBLEdBQU0sQ0FBTixDQUFBO0FBQ0EsT0FBUyw2QkFBVCxHQUFBO0FBQ0UsSUFBQSxJQUFHLENBQUMsQ0FBQSxHQUFJLENBQUosS0FBUyxDQUFWLENBQUEsSUFBZ0IsQ0FBQyxDQUFBLEdBQUksQ0FBSixLQUFTLENBQVYsQ0FBbkI7QUFDRSxNQUFBLEdBQUEsSUFBTyxDQUFQLENBREY7S0FERjtBQUFBLEdBREE7U0FJQSxLQUFBLENBQU0sR0FBTixFQUFXLEVBQVgsRUFBZ0IsK0JBQUEsR0FBOEIsR0FBOUMsRUFMYTtBQUFBLENBWmYsQ0FBQTs7QUFBQSxP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QUcsQ0FBQyxJQUFLLENBQUEsQ0FBQSxDQUFULEtBQWUsR0FBbEI7QUFDSCxNQUFBLElBQUksQ0FBQyxHQUFMLEdBQVcsS0FBWCxDQUFBO0FBQUEsTUFDQSxJQUFJLENBQUMsSUFBTCxHQUFZLElBRFosQ0FBQTtBQUFBLE1BRUEsSUFBSSxDQUFDLE1BQUwsR0FBYyxJQUZkLENBREc7S0FBQSxNQUlBLElBQUcsR0FBRyxDQUFDLElBQUssQ0FBQSxDQUFBLENBQVQsS0FBZSxHQUFsQjtBQUNILE1BQUEsSUFBSSxDQUFDLEdBQUwsR0FBVyxVQUFYLENBQUE7QUFBQSxNQUNBLElBQUksQ0FBQyxXQUFMLEdBQW1CLElBRG5CLENBREc7S0FBQSxNQUdBLElBQUcsR0FBRyxDQUFDLElBQUssQ0FBQSxDQUFBLENBQVQsS0FBZSxHQUFsQjtBQUNILE1BQUEsSUFBSSxDQUFDLEdBQUwsR0FBVyxNQUFYLENBQUE7QUFBQSxNQUNBLE9BQUEsR0FBVSxLQURWLENBQUE7QUFBQSxNQUVBLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBaEIsQ0FBd0IscVdBQUEsR0FVa0MsWUFWbEMsR0FVZ0QsaUtBVnhFLENBRkEsQ0FERztLQUFBLE1BQUE7QUFrQkgsTUFBQSxPQUFBLEdBQVUsS0FBVixDQUFBO0FBQUEsTUFDQSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQWhCLENBQXFCLCtCQUFyQixDQURBLENBbEJHO0tBbkRMO0FBd0VBLElBQUEsSUFBRyxJQUFJLENBQUMsT0FBUjtBQUNFLE1BQUEsSUFBSSxDQUFDLFdBQUwsR0FBbUIsSUFBbkIsQ0FERjtLQXhFQTtBQTJFQSxJQUFBLElBQUcsT0FBSDthQUNFLGVBQUEsQ0FBZ0IsSUFBaEIsRUFERjtLQTVFZTtFQUFBLEVBQUE7QUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBeEdqQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpfXZhciBmPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChmLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGYsZi5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJtb2R1bGUuZXhwb3J0cyA9IHByb2JsZW0gPSBuZXcgUHJvYmxlbSBcIlwiXCJcclxuXHJcblByb2JsZW0gMTogTXVsdGlwbGVzIG9mIDMgYW5kIDVcclxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuSWYgd2UgbGlzdCBhbGwgdGhlIG5hdHVyYWwgbnVtYmVycyBiZWxvdyAxMCB0aGF0IGFyZSBtdWx0aXBsZXMgb2YgMyBvciA1LCB3ZSBnZXQgMywgNSwgNiBhbmQgOS5cclxuVGhlIHN1bSBvZiB0aGVzZSBtdWx0aXBsZXMgaXMgMjMuXHJcblxyXG5GaW5kIHRoZSBzdW0gb2YgYWxsIHRoZSBtdWx0aXBsZXMgb2YgMyBvciA1IGJlbG93IDEwMDAuXHJcblxyXG5cIlwiXCJcclxuXHJcbnByb2JsZW0udGVzdCA9IC0+XHJcbiAgc3VtID0gMFxyXG4gIGZvciBpIGluIFsxLi4uMTBdXHJcbiAgICBpZiAoaSAlIDMgPT0gMCkgb3IgKGkgJSA1ID09IDApXHJcbiAgICAgIHN1bSArPSBpXHJcbiAgZXF1YWwoc3VtLCAyMywgXCJTdW0gb2YgbmF0dXJhbCBudW1iZXJzIDwgMTA6ICN7c3VtfVwiKVxyXG5cclxucHJvYmxlbS5hbnN3ZXIgPSAtPlxyXG4gIHN1bSA9IDBcclxuICBmb3IgaSBpbiBbMS4uLjEwMDBdXHJcbiAgICBpZiAoaSAlIDMgPT0gMCkgb3IgKGkgJSA1ID09IDApXHJcbiAgICAgIHN1bSArPSBpXHJcblxyXG4gIHJldHVybiBzdW1cclxuIiwibW9kdWxlLmV4cG9ydHMgPSBwcm9ibGVtID0gbmV3IFByb2JsZW0gXCJcIlwiXHJcblxyXG5Qcm9ibGVtIDI6IEV2ZW4gRmlib25hY2NpIG51bWJlcnNcclxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5FYWNoIG5ldyB0ZXJtIGluIHRoZSBGaWJvbmFjY2kgc2VxdWVuY2UgaXMgZ2VuZXJhdGVkIGJ5IGFkZGluZyB0aGUgcHJldmlvdXMgdHdvIHRlcm1zLlxyXG5CeSBzdGFydGluZyB3aXRoIDEgYW5kIDIsIHRoZSBmaXJzdCAxMCB0ZXJtcyB3aWxsIGJlOlxyXG5cclxuMSwgMiwgMywgNSwgOCwgMTMsIDIxLCAzNCwgNTUsIDg5LCAuLi5cclxuXHJcbkJ5IGNvbnNpZGVyaW5nIHRoZSB0ZXJtcyBpbiB0aGUgRmlib25hY2NpIHNlcXVlbmNlIHdob3NlIHZhbHVlcyBkbyBub3QgZXhjZWVkIGZvdXIgbWlsbGlvbixcclxuZmluZCB0aGUgc3VtIG9mIHRoZSBldmVuLXZhbHVlZCB0ZXJtcy5cclxuXHJcblwiXCJcIlxyXG5cclxucHJvYmxlbS5hbnN3ZXIgPSAtPlxyXG4gIHByZXYgPSAxXHJcbiAgY3VyciA9IDFcclxuICBzdW0gPSAwXHJcblxyXG4gIHdoaWxlIGN1cnIgPCA0MDAwMDAwXHJcbiAgICBpZiAoY3VyciAlIDIpID09IDBcclxuICAgICAgc3VtICs9IGN1cnJcclxuXHJcbiAgICBuZXh0ID0gY3VyciArIHByZXZcclxuICAgIHByZXYgPSBjdXJyXHJcbiAgICBjdXJyID0gbmV4dFxyXG5cclxuICByZXR1cm4gc3VtXHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcHJvYmxlbSA9IG5ldyBQcm9ibGVtIFwiXCJcIlxyXG5cclxuUHJvYmxlbSAzOiBMYXJnZXN0IHByaW1lIGZhY3RvclxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5UaGUgcHJpbWUgZmFjdG9ycyBvZiAxMzE5NSBhcmUgNSwgNywgMTMgYW5kIDI5LlxyXG5cclxuV2hhdCBpcyB0aGUgbGFyZ2VzdCBwcmltZSBmYWN0b3Igb2YgdGhlIG51bWJlciA2MDA4NTE0NzUxNDMgP1xyXG5cclxuXCJcIlwiXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiMgU2hhbWVsZXNzbHkgcGlsZmVyZWQvYWRvcHRlZCBmcm9tIGh0dHA6Ly93d3cuamF2YXNjcmlwdGVyLm5ldC9mYXEvbnVtYmVyaXNwcmltZS5odG1cclxuXHJcbmxlYXN0RmFjdG9yID0gKG4pIC0+XHJcbiAgcmV0dXJuIE5hTiBpZiBpc05hTihuKSBvciBub3QgaXNGaW5pdGUobilcclxuICByZXR1cm4gMCBpZiBuID09IDBcclxuICByZXR1cm4gMSBpZiAobiAlIDEpICE9IDAgb3IgKG4gKiBuKSA8IDJcclxuICByZXR1cm4gMiBpZiAobiAlIDIpID09IDBcclxuICByZXR1cm4gMyBpZiAobiAlIDMpID09IDBcclxuICByZXR1cm4gNSBpZiAobiAlIDUpID09IDBcclxuXHJcbiAgbSA9IE1hdGguc3FydCBuXHJcbiAgZm9yIGkgaW4gWzcuLm1dIGJ5IDMwXHJcbiAgICByZXR1cm4gaSAgICBpZiAobiAlIGkpICAgICAgPT0gMFxyXG4gICAgcmV0dXJuIGkrNCAgaWYgKG4gJSAoaSs0KSkgID09IDBcclxuICAgIHJldHVybiBpKzYgIGlmIChuICUgKGkrNikpICA9PSAwXHJcbiAgICByZXR1cm4gaSsxMCBpZiAobiAlIChpKzEwKSkgPT0gMFxyXG4gICAgcmV0dXJuIGkrMTIgaWYgKG4gJSAoaSsxMikpID09IDBcclxuICAgIHJldHVybiBpKzE2IGlmIChuICUgKGkrMTYpKSA9PSAwXHJcbiAgICByZXR1cm4gaSsyMiBpZiAobiAlIChpKzIyKSkgPT0gMFxyXG4gICAgcmV0dXJuIGkrMjQgaWYgKG4gJSAoaSsyNCkpID09IDBcclxuXHJcbiAgcmV0dXJuIG5cclxuXHJcbmlzUHJpbWUgPSAobikgLT5cclxuICBpZiBpc05hTihuKSBvciBub3QgaXNGaW5pdGUobikgb3IgKG4gJSAxKSAhPSAwIG9yIChuIDwgMilcclxuICAgIHJldHVybiBmYWxzZVxyXG4gIGlmIG4gPT0gbGVhc3RGYWN0b3IobilcclxuICAgIHJldHVybiB0cnVlXHJcblxyXG4gIHJldHVybiBmYWxzZVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxucHJpbWVGYWN0b3JzID0gKG4pIC0+XHJcbiAgcmV0dXJuIFsxXSBpZiBuID09IDFcclxuXHJcbiAgZmFjdG9ycyA9IFtdXHJcbiAgd2hpbGUgbm90IGlzUHJpbWUobilcclxuICAgIGZhY3RvciA9IGxlYXN0RmFjdG9yKG4pXHJcbiAgICBmYWN0b3JzLnB1c2ggZmFjdG9yXHJcbiAgICBuIC89IGZhY3RvclxyXG4gIGZhY3RvcnMucHVzaCBuXHJcbiAgcmV0dXJuIGZhY3RvcnNcclxuXHJcbmxhcmdlc3RQcmltZUZhY3RvciA9IChuKSAtPlxyXG4gIHJldHVybiAxIGlmIG4gPT0gMVxyXG5cclxuICB3aGlsZSBub3QgaXNQcmltZShuKVxyXG4gICAgZmFjdG9yID0gbGVhc3RGYWN0b3IobilcclxuICAgIG4gLz0gZmFjdG9yXHJcbiAgcmV0dXJuIG5cclxuXHJcbnByb2JsZW0uYW5zd2VyID0gLT5cclxuICByZXR1cm4gbGFyZ2VzdFByaW1lRmFjdG9yKDYwMDg1MTQ3NTE0MylcclxuIiwibW9kdWxlLmV4cG9ydHMgPSBwcm9ibGVtID0gbmV3IFByb2JsZW0gXCJcIlwiXHJcblxyXG5Qcm9ibGVtIDQ6IExhcmdlc3QgcGFsaW5kcm9tZSBwcm9kdWN0XHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbkEgcGFsaW5kcm9taWMgbnVtYmVyIHJlYWRzIHRoZSBzYW1lIGJvdGggd2F5cy5cclxuXHJcbkZpbmQgdGhlIGxhcmdlc3QgcGFsaW5kcm9tZSBtYWRlIGZyb20gdGhlIHByb2R1Y3Qgb2YgdHdvIDMtZGlnaXQgbnVtYmVycy5cclxuXHJcblwiXCJcIlxyXG5cclxuaXNQYWxpbmRyb21lID0gKG4pIC0+XHJcbiAgc3RyID0gbi50b1N0cmluZygpXHJcbiAgZm9yIGkgaW4gWzAuLi4oc3RyLmxlbmd0aCAvIDIpXVxyXG4gICAgaWYgc3RyW2ldICE9IHN0cltzdHIubGVuZ3RoIC0gMSAtIGldXHJcbiAgICAgIHJldHVybiBmYWxzZVxyXG4gIHJldHVybiB0cnVlXHJcblxyXG5wcm9ibGVtLnRlc3QgPSAtPlxyXG4gICMgTWFrZSBzdXJlIGlzUGFsaW5kcm9tZSB3b3JrcyBwcm9wZXJseSBmaXJzdFxyXG4gIGZvciB2IGluIFsxLCAxMSwgMTIxLCAxMjIxLCAxMjMyMSwgMTIzNDMyMV1cclxuICAgIGVxdWFsKGlzUGFsaW5kcm9tZSh2KSwgdHJ1ZSwgXCJpc1BhbGluZHJvbWUoI3t2fSkgcmV0dXJucyB0cnVlXCIpXHJcbiAgZm9yIHYgaW4gWzEyLCAxMjMsIDEyMzQsIDEyMzQ1LCAxMjM0NTYsIDEyMzI0XVxyXG4gICAgZXF1YWwoaXNQYWxpbmRyb21lKHYpLCBmYWxzZSwgXCJpc1BhbGluZHJvbWUoI3t2fSkgcmV0dXJucyBmYWxzZVwiKVxyXG5cclxucHJvYmxlbS5hbnN3ZXIgPSAtPlxyXG4gIGxhcmdlc3RpID0gMFxyXG4gIGxhcmdlc3RqID0gMFxyXG4gIGxhcmdlc3RwID0gMFxyXG5cclxuICBmb3IgaSBpbiBbMTAwLi45OTldXHJcbiAgICBmb3IgaiBpbiBbMTAwLi45OTldXHJcbiAgICAgIHByb2R1Y3QgPSBpICogalxyXG4gICAgICBpZiBpc1BhbGluZHJvbWUocHJvZHVjdClcclxuICAgICAgICBsYXJnZXN0aSA9IGlcclxuICAgICAgICBsYXJnZXN0aiA9IGpcclxuICAgICAgICBsYXJnZXN0cCA9IHByb2R1Y3RcclxuXHJcbiAgcmV0dXJuIGxhcmdlc3RwXHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcHJvYmxlbSA9IG5ldyBQcm9ibGVtIFwiXCJcIlxyXG5cclxuUHJvYmxlbSA1OiBTbWFsbGVzdCBtdWx0aXBsZVxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4yNTIwIGlzIHRoZSBzbWFsbGVzdCBudW1iZXIgdGhhdCBjYW4gYmUgZGl2aWRlZCBieSBlYWNoIG9mIHRoZSBudW1iZXJzIGZyb20gMSB0byAxMCB3aXRob3V0IGFueSByZW1haW5kZXIuXHJcblxyXG5XaGF0IGlzIHRoZSBzbWFsbGVzdCBwb3NpdGl2ZSBudW1iZXIgdGhhdCBpcyBldmVubHkgZGl2aXNpYmxlIGJ5IGFsbCBvZiB0aGUgbnVtYmVycyBmcm9tIDEgdG8gMjA/XHJcblxyXG5cIlwiXCJcclxuXHJcbnByb2JsZW0uYW5zd2VyID0gLT5cclxuICBuID0gMFxyXG4gIGxvb3BcclxuICAgIG4gKz0gMjAgIyBQcm9iYWJseSBjb3VsZCBiZSBzb21lIGNsZXZlciBzdW0gb2YgcHJpbWVzIGJldHdlZW4gMS0yMCBvciBzb21ldGhpbmcuIEkgZG9uJ3QgY2FyZS5cclxuICAgIGZvdW5kID0gdHJ1ZVxyXG4gICAgZm9yIGkgaW4gWzEuLjIwXVxyXG4gICAgICBpZiAobiAlIGkpICE9IDBcclxuICAgICAgICBmb3VuZCA9IGZhbHNlXHJcbiAgICAgICAgYnJlYWtcclxuXHJcbiAgICBicmVhayBpZiBmb3VuZFxyXG5cclxuICByZXR1cm4gblxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHByb2JsZW0gPSBuZXcgUHJvYmxlbSBcIlwiXCJcclxuXHJcblByb2JsZW0gNjogU3VtIHNxdWFyZSBkaWZmZXJlbmNlXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5UaGUgc3VtIG9mIHRoZSBzcXVhcmVzIG9mIHRoZSBmaXJzdCB0ZW4gbmF0dXJhbCBudW1iZXJzIGlzLFxyXG5cclxuICAgICAgICAgICAgIDFeMiArIDJeMiArIC4uLiArIDEwXjIgPSAzODVcclxuXHJcblRoZSBzcXVhcmUgb2YgdGhlIHN1bSBvZiB0aGUgZmlyc3QgdGVuIG5hdHVyYWwgbnVtYmVycyBpcyxcclxuXHJcbiAgICAgICAgICAoMSArIDIgKyAuLi4gKyAxMCleMiA9IDU1XjIgPSAzMDI1XHJcblxyXG5IZW5jZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBzdW0gb2YgdGhlIHNxdWFyZXMgb2YgdGhlIGZpcnN0IHRlbiBuYXR1cmFsIG51bWJlcnMgYW5kIHRoZSBzcXVhcmUgb2YgdGhlIHN1bSBpcyAzMDI1IOKIkiAzODUgPSAyNjQwLlxyXG5cclxuRmluZCB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBzdW0gb2YgdGhlIHNxdWFyZXMgb2YgdGhlIGZpcnN0IG9uZSBodW5kcmVkIG5hdHVyYWwgbnVtYmVycyBhbmQgdGhlIHNxdWFyZSBvZiB0aGUgc3VtLlxyXG5cclxuXCJcIlwiXHJcblxyXG5zdW1PZlNxdWFyZXMgPSAobikgLT5cclxuICBzdW0gPSAwXHJcbiAgZm9yIGkgaW4gWzEuLm5dXHJcbiAgICBzdW0gKz0gKGkgKiBpKVxyXG4gIHJldHVybiBzdW1cclxuXHJcbnNxdWFyZU9mU3VtID0gKG4pIC0+XHJcbiAgc3VtID0gMFxyXG4gIGZvciBpIGluIFsxLi5uXVxyXG4gICAgc3VtICs9IGlcclxuICByZXR1cm4gKHN1bSAqIHN1bSlcclxuXHJcbmRpZmZlcmVuY2VTdW1TcXVhcmVzID0gKG4pIC0+XHJcbiAgcmV0dXJuIHNxdWFyZU9mU3VtKG4pIC0gc3VtT2ZTcXVhcmVzKG4pXHJcblxyXG5wcm9ibGVtLnRlc3QgPSAtPlxyXG4gIGVxdWFsKHN1bU9mU3F1YXJlcygxMCksIDM4NSwgXCJTdW0gb2Ygc3F1YXJlcyBvZiBmaXJzdCB0ZW4gbmF0dXJhbCBudW1iZXJzIGlzIDM4NVwiKVxyXG4gIGVxdWFsKHNxdWFyZU9mU3VtKDEwKSwgMzAyNSwgXCJTcXVhcmUgb2Ygc3VtIG9mIGZpcnN0IHRlbiBuYXR1cmFsIG51bWJlcnMgaXMgMzAyNVwiKVxyXG4gIGVxdWFsKGRpZmZlcmVuY2VTdW1TcXVhcmVzKDEwKSwgMjY0MCwgXCJEaWZmZXJlbmNlIGluIHZhbHVlcyBmb3IgdGhlIGZpcnN0IHRlbiBuYXR1cmFsIG51bWJlcnMgaXMgMjY0MFwiKVxyXG5cclxucHJvYmxlbS5hbnN3ZXIgPSAtPlxyXG4gIHJldHVybiBkaWZmZXJlbmNlU3VtU3F1YXJlcygxMDApXHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcHJvYmxlbSA9IG5ldyBQcm9ibGVtIFwiXCJcIlxyXG5cclxuUHJvYmxlbSA3OiAxMDAwMXN0IHByaW1lXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuQnkgbGlzdGluZyB0aGUgZmlyc3Qgc2l4IHByaW1lIG51bWJlcnM6IDIsIDMsIDUsIDcsIDExLCBhbmQgMTMsIHdlIGNhbiBzZWUgdGhhdCB0aGUgNnRoIHByaW1lIGlzIDEzLlxyXG5cclxuV2hhdCBpcyB0aGUgMTAsMDAxc3QgcHJpbWUgbnVtYmVyP1xyXG5cclxuXCJcIlwiXHJcblxyXG5tYXRoID0gcmVxdWlyZSBcIm1hdGhcIlxyXG5cclxubnRoUHJpbWUgPSAobikgLT5cclxuICBzaWV2ZSA9IG5ldyBtYXRoLkluY3JlbWVudGFsU2lldmVcclxuICBmb3IgaSBpbiBbMS4uLm5dXHJcbiAgICBzaWV2ZS5uZXh0KClcclxuICByZXR1cm4gc2lldmUubmV4dCgpXHJcblxyXG5wcm9ibGVtLnRlc3QgPSAtPlxyXG4gIGVxdWFsKG50aFByaW1lKDYpLCAxMywgXCI2dGggcHJpbWUgaXMgMTNcIilcclxuXHJcbnByb2JsZW0uYW5zd2VyID0gLT5cclxuICByZXR1cm4gbnRoUHJpbWUoMTAwMDEpXHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcHJvYmxlbSA9IG5ldyBQcm9ibGVtIFwiXCJcIlxyXG5cclxuUHJvYmxlbSA4OiBMYXJnZXN0IHByb2R1Y3QgaW4gYSBzZXJpZXNcclxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcblRoZSBmb3VyIGFkamFjZW50IGRpZ2l0cyBpbiB0aGUgMTAwMC1kaWdpdCBudW1iZXIgdGhhdCBoYXZlIHRoZSBncmVhdGVzdCBwcm9kdWN0IGFyZSA5IHggOSB4IDggeCA5ID0gNTgzMi5cclxuXHJcbiAgNzMxNjcxNzY1MzEzMzA2MjQ5MTkyMjUxMTk2NzQ0MjY1NzQ3NDIzNTUzNDkxOTQ5MzRcclxuICA5Njk4MzUyMDMxMjc3NDUwNjMyNjIzOTU3ODMxODAxNjk4NDgwMTg2OTQ3ODg1MTg0M1xyXG4gIDg1ODYxNTYwNzg5MTEyOTQ5NDk1NDU5NTAxNzM3OTU4MzMxOTUyODUzMjA4ODA1NTExXHJcbiAgMTI1NDA2OTg3NDcxNTg1MjM4NjMwNTA3MTU2OTMyOTA5NjMyOTUyMjc0NDMwNDM1NTdcclxuICA2Njg5NjY0ODk1MDQ0NTI0NDUyMzE2MTczMTg1NjQwMzA5ODcxMTEyMTcyMjM4MzExM1xyXG4gIDYyMjI5ODkzNDIzMzgwMzA4MTM1MzM2Mjc2NjE0MjgyODA2NDQ0NDg2NjQ1MjM4NzQ5XHJcbiAgMzAzNTg5MDcyOTYyOTA0OTE1NjA0NDA3NzIzOTA3MTM4MTA1MTU4NTkzMDc5NjA4NjZcclxuICA3MDE3MjQyNzEyMTg4Mzk5ODc5NzkwODc5MjI3NDkyMTkwMTY5OTcyMDg4ODA5Mzc3NlxyXG4gIDY1NzI3MzMzMDAxMDUzMzY3ODgxMjIwMjM1NDIxODA5NzUxMjU0NTQwNTk0NzUyMjQzXHJcbiAgNTI1ODQ5MDc3MTE2NzA1NTYwMTM2MDQ4Mzk1ODY0NDY3MDYzMjQ0MTU3MjIxNTUzOTdcclxuICA1MzY5NzgxNzk3Nzg0NjE3NDA2NDk1NTE0OTI5MDg2MjU2OTMyMTk3ODQ2ODYyMjQ4MlxyXG4gIDgzOTcyMjQxMzc1NjU3MDU2MDU3NDkwMjYxNDA3OTcyOTY4NjUyNDE0NTM1MTAwNDc0XHJcbiAgODIxNjYzNzA0ODQ0MDMxOTk4OTAwMDg4OTUyNDM0NTA2NTg1NDEyMjc1ODg2NjY4ODFcclxuICAxNjQyNzE3MTQ3OTkyNDQ0MjkyODIzMDg2MzQ2NTY3NDgxMzkxOTEyMzE2MjgyNDU4NlxyXG4gIDE3ODY2NDU4MzU5MTI0NTY2NTI5NDc2NTQ1NjgyODQ4OTEyODgzMTQyNjA3NjkwMDQyXHJcbiAgMjQyMTkwMjI2NzEwNTU2MjYzMjExMTExMDkzNzA1NDQyMTc1MDY5NDE2NTg5NjA0MDhcclxuICAwNzE5ODQwMzg1MDk2MjQ1NTQ0NDM2Mjk4MTIzMDk4Nzg3OTkyNzI0NDI4NDkwOTE4OFxyXG4gIDg0NTgwMTU2MTY2MDk3OTE5MTMzODc1NDk5MjAwNTI0MDYzNjg5OTEyNTYwNzE3NjA2XHJcbiAgMDU4ODYxMTY0NjcxMDk0MDUwNzc1NDEwMDIyNTY5ODMxNTUyMDAwNTU5MzU3Mjk3MjVcclxuICA3MTYzNjI2OTU2MTg4MjY3MDQyODI1MjQ4MzYwMDgyMzI1NzUzMDQyMDc1Mjk2MzQ1MFxyXG5cclxuRmluZCB0aGUgdGhpcnRlZW4gYWRqYWNlbnQgZGlnaXRzIGluIHRoZSAxMDAwLWRpZ2l0IG51bWJlciB0aGF0IGhhdmUgdGhlIGdyZWF0ZXN0IHByb2R1Y3QuIFdoYXQgaXMgdGhlIHZhbHVlIG9mIHRoaXMgcHJvZHVjdD9cclxuXHJcblwiXCJcIlxyXG5cclxuc3RyID0gXCJcIlwiXHJcbiAgICAgIDczMTY3MTc2NTMxMzMwNjI0OTE5MjI1MTE5Njc0NDI2NTc0NzQyMzU1MzQ5MTk0OTM0XHJcbiAgICAgIDk2OTgzNTIwMzEyNzc0NTA2MzI2MjM5NTc4MzE4MDE2OTg0ODAxODY5NDc4ODUxODQzXHJcbiAgICAgIDg1ODYxNTYwNzg5MTEyOTQ5NDk1NDU5NTAxNzM3OTU4MzMxOTUyODUzMjA4ODA1NTExXHJcbiAgICAgIDEyNTQwNjk4NzQ3MTU4NTIzODYzMDUwNzE1NjkzMjkwOTYzMjk1MjI3NDQzMDQzNTU3XHJcbiAgICAgIDY2ODk2NjQ4OTUwNDQ1MjQ0NTIzMTYxNzMxODU2NDAzMDk4NzExMTIxNzIyMzgzMTEzXHJcbiAgICAgIDYyMjI5ODkzNDIzMzgwMzA4MTM1MzM2Mjc2NjE0MjgyODA2NDQ0NDg2NjQ1MjM4NzQ5XHJcbiAgICAgIDMwMzU4OTA3Mjk2MjkwNDkxNTYwNDQwNzcyMzkwNzEzODEwNTE1ODU5MzA3OTYwODY2XHJcbiAgICAgIDcwMTcyNDI3MTIxODgzOTk4Nzk3OTA4NzkyMjc0OTIxOTAxNjk5NzIwODg4MDkzNzc2XHJcbiAgICAgIDY1NzI3MzMzMDAxMDUzMzY3ODgxMjIwMjM1NDIxODA5NzUxMjU0NTQwNTk0NzUyMjQzXHJcbiAgICAgIDUyNTg0OTA3NzExNjcwNTU2MDEzNjA0ODM5NTg2NDQ2NzA2MzI0NDE1NzIyMTU1Mzk3XHJcbiAgICAgIDUzNjk3ODE3OTc3ODQ2MTc0MDY0OTU1MTQ5MjkwODYyNTY5MzIxOTc4NDY4NjIyNDgyXHJcbiAgICAgIDgzOTcyMjQxMzc1NjU3MDU2MDU3NDkwMjYxNDA3OTcyOTY4NjUyNDE0NTM1MTAwNDc0XHJcbiAgICAgIDgyMTY2MzcwNDg0NDAzMTk5ODkwMDA4ODk1MjQzNDUwNjU4NTQxMjI3NTg4NjY2ODgxXHJcbiAgICAgIDE2NDI3MTcxNDc5OTI0NDQyOTI4MjMwODYzNDY1Njc0ODEzOTE5MTIzMTYyODI0NTg2XHJcbiAgICAgIDE3ODY2NDU4MzU5MTI0NTY2NTI5NDc2NTQ1NjgyODQ4OTEyODgzMTQyNjA3NjkwMDQyXHJcbiAgICAgIDI0MjE5MDIyNjcxMDU1NjI2MzIxMTExMTA5MzcwNTQ0MjE3NTA2OTQxNjU4OTYwNDA4XHJcbiAgICAgIDA3MTk4NDAzODUwOTYyNDU1NDQ0MzYyOTgxMjMwOTg3ODc5OTI3MjQ0Mjg0OTA5MTg4XHJcbiAgICAgIDg0NTgwMTU2MTY2MDk3OTE5MTMzODc1NDk5MjAwNTI0MDYzNjg5OTEyNTYwNzE3NjA2XHJcbiAgICAgIDA1ODg2MTE2NDY3MTA5NDA1MDc3NTQxMDAyMjU2OTgzMTU1MjAwMDU1OTM1NzI5NzI1XHJcbiAgICAgIDcxNjM2MjY5NTYxODgyNjcwNDI4MjUyNDgzNjAwODIzMjU3NTMwNDIwNzUyOTYzNDUwXHJcbiAgICAgIFwiXCJcIlxyXG5zdHIgPSBzdHIucmVwbGFjZSgvW14wLTldL2dtLCBcIlwiKVxyXG5kaWdpdHMgPSAocGFyc2VJbnQoZGlnaXQpIGZvciBkaWdpdCBpbiBzdHIpXHJcblxyXG5sYXJnZXN0UHJvZHVjdCA9IChkaWdpdENvdW50KSAtPlxyXG4gIHJldHVybiAwIGlmIGRpZ2l0Q291bnQgPiBkaWdpdHMubGVuZ3RoXHJcblxyXG4gIGxhcmdlc3QgPSAwXHJcbiAgZm9yIHN0YXJ0IGluIFswLi4oZGlnaXRzLmxlbmd0aCAtIGRpZ2l0Q291bnQpXVxyXG4gICAgZW5kID0gc3RhcnQgKyBkaWdpdENvdW50XHJcbiAgICBwcm9kdWN0ID0gMVxyXG4gICAgZm9yIGkgaW4gW3N0YXJ0Li4uZW5kXVxyXG4gICAgICBwcm9kdWN0ICo9IGRpZ2l0c1tpXVxyXG4gICAgaWYgbGFyZ2VzdCA8IHByb2R1Y3RcclxuICAgICAgbGFyZ2VzdCA9IHByb2R1Y3RcclxuXHJcbiAgcmV0dXJuIGxhcmdlc3RcclxuXHJcbnByb2JsZW0udGVzdCA9IC0+XHJcbiAgZXF1YWwobGFyZ2VzdFByb2R1Y3QoNCksIDU4MzIsICBcIkdyZWF0ZXN0IHByb2R1Y3Qgb2YgNCBhZGphY2VudCBkaWdpdHMgaXMgNTgzMlwiKVxyXG4gIGVxdWFsKGxhcmdlc3RQcm9kdWN0KDUpLCA0MDgyNCwgXCJHcmVhdGVzdCBwcm9kdWN0IG9mIDUgYWRqYWNlbnQgZGlnaXRzIGlzIDQwODI0XCIpXHJcblxyXG5wcm9ibGVtLmFuc3dlciA9IC0+XHJcbiAgcmV0dXJuIGxhcmdlc3RQcm9kdWN0KDEzKVxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHByb2JsZW0gPSBuZXcgUHJvYmxlbSBcIlwiXCJcclxuXHJcblByb2JsZW0gOTogU3BlY2lhbCBQeXRoYWdvcmVhbiB0cmlwbGV0XHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5BIFB5dGhhZ29yZWFuIHRyaXBsZXQgaXMgYSBzZXQgb2YgdGhyZWUgbmF0dXJhbCBudW1iZXJzLCBhIDwgYiA8IGMsIGZvciB3aGljaCxcclxuXHJcbiAgICBhXjIgKyBiXjIgPSBjXjJcclxuXHJcbkZvciBleGFtcGxlLCAzXjIgKyA0XjIgPSA5ICsgMTYgPSAyNSA9IDVeMi5cclxuXHJcblRoZXJlIGV4aXN0cyBleGFjdGx5IG9uZSBQeXRoYWdvcmVhbiB0cmlwbGV0IGZvciB3aGljaCBhICsgYiArIGMgPSAxMDAwLlxyXG5cclxuRmluZCB0aGUgcHJvZHVjdCBhYmMuXHJcblxyXG5cIlwiXCJcclxuXHJcbmlzVHJpcGxldCA9IChhLCBiLCBjKSAtPlxyXG4gIHJldHVybiAoKGEqYSkgKyAoYipiKSkgPT0gKGMqYylcclxuXHJcbmZpbmRGaXJzdFRyaXBsZXQgPSAoc3VtKSAtPlxyXG4gIGZvciBhIGluIFsxLi4uMTAwMF1cclxuICAgIGZvciBiIGluIFsxLi4uMTAwMF1cclxuICAgICAgYyA9IDEwMDAgLSBhIC0gYlxyXG4gICAgICBpZiBpc1RyaXBsZXQoYSwgYiwgYylcclxuICAgICAgICByZXR1cm4gW2EsIGIsIGNdXHJcblxyXG4gIHJldHVybiBmYWxzZVxyXG5cclxuXHJcbnByb2JsZW0udGVzdCA9IC0+XHJcbiAgZXF1YWwoaXNUcmlwbGV0KDMsIDQsIDUpLCB0cnVlLCBcIigzLDQsNSkgaXMgYSBQeXRoYWdvcmVhbiB0cmlwbGV0XCIpXHJcblxyXG5wcm9ibGVtLmFuc3dlciA9IC0+XHJcbiAgcmV0dXJuIGZpbmRGaXJzdFRyaXBsZXQoMTAwMClcclxuIiwibW9kdWxlLmV4cG9ydHMgPSBwcm9ibGVtID0gbmV3IFByb2JsZW0gXCJcIlwiXHJcblxyXG5Qcm9ibGVtIDEwOiBTdW1tYXRpb24gb2YgcHJpbWVzXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcblRoZSBzdW0gb2YgdGhlIHByaW1lcyBiZWxvdyAxMCBpcyAyICsgMyArIDUgKyA3ID0gMTcuXHJcblxyXG5GaW5kIHRoZSBzdW0gb2YgYWxsIHRoZSBwcmltZXMgYmVsb3cgdHdvIG1pbGxpb24uXHJcblxyXG5cIlwiXCJcclxuXHJcbm1hdGggPSByZXF1aXJlIFwibWF0aFwiXHJcblxyXG5wcmltZVN1bSA9IChjZWlsaW5nKSAtPlxyXG4gIHNpZXZlID0gbmV3IG1hdGguSW5jcmVtZW50YWxTaWV2ZVxyXG5cclxuICBzdW0gPSAwXHJcbiAgbG9vcFxyXG4gICAgbiA9IHNpZXZlLm5leHQoKVxyXG4gICAgaWYgbiA+PSBjZWlsaW5nXHJcbiAgICAgIGJyZWFrXHJcbiAgICBzdW0gKz0gblxyXG5cclxuICByZXR1cm4gc3VtXHJcblxyXG5wcm9ibGVtLnRlc3QgPSAtPlxyXG4gIGVxdWFsKHByaW1lU3VtKDEwKSwgMTcsIFwiU3VtIG9mIHByaW1lcyBiZWxvdyAxMCBpcyAxN1wiKVxyXG5cclxucHJvYmxlbS5hbnN3ZXIgPSAtPlxyXG4gIHJldHVybiBwcmltZVN1bSgyMDAwMDAwKVxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHByb2JsZW0gPSBuZXcgUHJvYmxlbSBcIlwiXCJcclxuXHJcblByb2JsZW0gMTE6IExhcmdlc3QgcHJvZHVjdCBpbiBhIGdyaWRcclxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuSW4gdGhlIDIweDIwIGdyaWQgYmVsb3csIGZvdXIgbnVtYmVycyBhbG9uZyBhIGRpYWdvbmFsIGxpbmUgaGF2ZSBiZWVuIG1hcmtlZCBpbiByZWQuXHJcblxyXG4gICAgICAgICAgMDggMDIgMjIgOTcgMzggMTUgMDAgNDAgMDAgNzUgMDQgMDUgMDcgNzggNTIgMTIgNTAgNzcgOTEgMDhcclxuICAgICAgICAgIDQ5IDQ5IDk5IDQwIDE3IDgxIDE4IDU3IDYwIDg3IDE3IDQwIDk4IDQzIDY5IDQ4IDA0IDU2IDYyIDAwXHJcbiAgICAgICAgICA4MSA0OSAzMSA3MyA1NSA3OSAxNCAyOSA5MyA3MSA0MCA2NyA1MyA4OCAzMCAwMyA0OSAxMyAzNiA2NVxyXG4gICAgICAgICAgNTIgNzAgOTUgMjMgMDQgNjAgMTEgNDIgNjkgMjQgNjggNTYgMDEgMzIgNTYgNzEgMzcgMDIgMzYgOTFcclxuICAgICAgICAgIDIyIDMxIDE2IDcxIDUxIDY3IDYzIDg5IDQxIDkyIDM2IDU0IDIyIDQwIDQwIDI4IDY2IDMzIDEzIDgwXHJcbiAgICAgICAgICAyNCA0NyAzMiA2MCA5OSAwMyA0NSAwMiA0NCA3NSAzMyA1MyA3OCAzNiA4NCAyMCAzNSAxNyAxMiA1MFxyXG4gICAgICAgICAgMzIgOTggODEgMjggNjQgMjMgNjcgMTAgMjZfMzggNDAgNjcgNTkgNTQgNzAgNjYgMTggMzggNjQgNzBcclxuICAgICAgICAgIDY3IDI2IDIwIDY4IDAyIDYyIDEyIDIwIDk1IDYzXzk0IDM5IDYzIDA4IDQwIDkxIDY2IDQ5IDk0IDIxXHJcbiAgICAgICAgICAyNCA1NSA1OCAwNSA2NiA3MyA5OSAyNiA5NyAxNyA3OF83OCA5NiA4MyAxNCA4OCAzNCA4OSA2MyA3MlxyXG4gICAgICAgICAgMjEgMzYgMjMgMDkgNzUgMDAgNzYgNDQgMjAgNDUgMzUgMTQgMDAgNjEgMzMgOTcgMzQgMzEgMzMgOTVcclxuICAgICAgICAgIDc4IDE3IDUzIDI4IDIyIDc1IDMxIDY3IDE1IDk0IDAzIDgwIDA0IDYyIDE2IDE0IDA5IDUzIDU2IDkyXHJcbiAgICAgICAgICAxNiAzOSAwNSA0MiA5NiAzNSAzMSA0NyA1NSA1OCA4OCAyNCAwMCAxNyA1NCAyNCAzNiAyOSA4NSA1N1xyXG4gICAgICAgICAgODYgNTYgMDAgNDggMzUgNzEgODkgMDcgMDUgNDQgNDQgMzcgNDQgNjAgMjEgNTggNTEgNTQgMTcgNThcclxuICAgICAgICAgIDE5IDgwIDgxIDY4IDA1IDk0IDQ3IDY5IDI4IDczIDkyIDEzIDg2IDUyIDE3IDc3IDA0IDg5IDU1IDQwXHJcbiAgICAgICAgICAwNCA1MiAwOCA4MyA5NyAzNSA5OSAxNiAwNyA5NyA1NyAzMiAxNiAyNiAyNiA3OSAzMyAyNyA5OCA2NlxyXG4gICAgICAgICAgODggMzYgNjggODcgNTcgNjIgMjAgNzIgMDMgNDYgMzMgNjcgNDYgNTUgMTIgMzIgNjMgOTMgNTMgNjlcclxuICAgICAgICAgIDA0IDQyIDE2IDczIDM4IDI1IDM5IDExIDI0IDk0IDcyIDE4IDA4IDQ2IDI5IDMyIDQwIDYyIDc2IDM2XHJcbiAgICAgICAgICAyMCA2OSAzNiA0MSA3MiAzMCAyMyA4OCAzNCA2MiA5OSA2OSA4MiA2NyA1OSA4NSA3NCAwNCAzNiAxNlxyXG4gICAgICAgICAgMjAgNzMgMzUgMjkgNzggMzEgOTAgMDEgNzQgMzEgNDkgNzEgNDggODYgODEgMTYgMjMgNTcgMDUgNTRcclxuICAgICAgICAgIDAxIDcwIDU0IDcxIDgzIDUxIDU0IDY5IDE2IDkyIDMzIDQ4IDYxIDQzIDUyIDAxIDg5IDE5IDY3IDQ4XHJcblxyXG5UaGUgcHJvZHVjdCBvZiB0aGVzZSBudW1iZXJzIGlzIDI2IHggNjMgeCA3OCB4IDE0ID0gMTc4ODY5Ni5cclxuXHJcbldoYXQgaXMgdGhlIGdyZWF0ZXN0IHByb2R1Y3Qgb2YgZm91ciBhZGphY2VudCBudW1iZXJzIGluIHRoZSBzYW1lIGRpcmVjdGlvbiAodXAsIGRvd24sIGxlZnQsIHJpZ2h0LCBvciBkaWFnb25hbGx5KSBpbiB0aGUgMjB4MjAgZ3JpZD9cclxuXHJcblwiXCJcIlxyXG5cclxuZ3JpZCA9IG51bGxcclxuXHJcbnByZXBhcmVHcmlkID0gLT5cclxuICByYXdEaWdpdHMgPSBcIlwiXCJcclxuICAgIDA4IDAyIDIyIDk3IDM4IDE1IDAwIDQwIDAwIDc1IDA0IDA1IDA3IDc4IDUyIDEyIDUwIDc3IDkxIDA4XHJcbiAgICA0OSA0OSA5OSA0MCAxNyA4MSAxOCA1NyA2MCA4NyAxNyA0MCA5OCA0MyA2OSA0OCAwNCA1NiA2MiAwMFxyXG4gICAgODEgNDkgMzEgNzMgNTUgNzkgMTQgMjkgOTMgNzEgNDAgNjcgNTMgODggMzAgMDMgNDkgMTMgMzYgNjVcclxuICAgIDUyIDcwIDk1IDIzIDA0IDYwIDExIDQyIDY5IDI0IDY4IDU2IDAxIDMyIDU2IDcxIDM3IDAyIDM2IDkxXHJcbiAgICAyMiAzMSAxNiA3MSA1MSA2NyA2MyA4OSA0MSA5MiAzNiA1NCAyMiA0MCA0MCAyOCA2NiAzMyAxMyA4MFxyXG4gICAgMjQgNDcgMzIgNjAgOTkgMDMgNDUgMDIgNDQgNzUgMzMgNTMgNzggMzYgODQgMjAgMzUgMTcgMTIgNTBcclxuICAgIDMyIDk4IDgxIDI4IDY0IDIzIDY3IDEwIDI2IDM4IDQwIDY3IDU5IDU0IDcwIDY2IDE4IDM4IDY0IDcwXHJcbiAgICA2NyAyNiAyMCA2OCAwMiA2MiAxMiAyMCA5NSA2MyA5NCAzOSA2MyAwOCA0MCA5MSA2NiA0OSA5NCAyMVxyXG4gICAgMjQgNTUgNTggMDUgNjYgNzMgOTkgMjYgOTcgMTcgNzggNzggOTYgODMgMTQgODggMzQgODkgNjMgNzJcclxuICAgIDIxIDM2IDIzIDA5IDc1IDAwIDc2IDQ0IDIwIDQ1IDM1IDE0IDAwIDYxIDMzIDk3IDM0IDMxIDMzIDk1XHJcbiAgICA3OCAxNyA1MyAyOCAyMiA3NSAzMSA2NyAxNSA5NCAwMyA4MCAwNCA2MiAxNiAxNCAwOSA1MyA1NiA5MlxyXG4gICAgMTYgMzkgMDUgNDIgOTYgMzUgMzEgNDcgNTUgNTggODggMjQgMDAgMTcgNTQgMjQgMzYgMjkgODUgNTdcclxuICAgIDg2IDU2IDAwIDQ4IDM1IDcxIDg5IDA3IDA1IDQ0IDQ0IDM3IDQ0IDYwIDIxIDU4IDUxIDU0IDE3IDU4XHJcbiAgICAxOSA4MCA4MSA2OCAwNSA5NCA0NyA2OSAyOCA3MyA5MiAxMyA4NiA1MiAxNyA3NyAwNCA4OSA1NSA0MFxyXG4gICAgMDQgNTIgMDggODMgOTcgMzUgOTkgMTYgMDcgOTcgNTcgMzIgMTYgMjYgMjYgNzkgMzMgMjcgOTggNjZcclxuICAgIDg4IDM2IDY4IDg3IDU3IDYyIDIwIDcyIDAzIDQ2IDMzIDY3IDQ2IDU1IDEyIDMyIDYzIDkzIDUzIDY5XHJcbiAgICAwNCA0MiAxNiA3MyAzOCAyNSAzOSAxMSAyNCA5NCA3MiAxOCAwOCA0NiAyOSAzMiA0MCA2MiA3NiAzNlxyXG4gICAgMjAgNjkgMzYgNDEgNzIgMzAgMjMgODggMzQgNjIgOTkgNjkgODIgNjcgNTkgODUgNzQgMDQgMzYgMTZcclxuICAgIDIwIDczIDM1IDI5IDc4IDMxIDkwIDAxIDc0IDMxIDQ5IDcxIDQ4IDg2IDgxIDE2IDIzIDU3IDA1IDU0XHJcbiAgICAwMSA3MCA1NCA3MSA4MyA1MSA1NCA2OSAxNiA5MiAzMyA0OCA2MSA0MyA1MiAwMSA4OSAxOSA2NyA0OFxyXG4gIFwiXCJcIi5yZXBsYWNlKC9bXjAtOSBdL2dtLCBcIiBcIilcclxuXHJcbiAgZGlnaXRzID0gKHBhcnNlSW50KGRpZ2l0KSBmb3IgZGlnaXQgaW4gcmF3RGlnaXRzLnNwbGl0KFwiIFwiKSlcclxuICBncmlkID0gQXJyYXkoMjApXHJcbiAgZm9yIGkgaW4gWzAuLi4yMF1cclxuICAgIGdyaWRbaV0gPSBBcnJheSgyMClcclxuXHJcbiAgaW5kZXggPSAwXHJcbiAgZm9yIGogaW4gWzAuLi4yMF1cclxuICAgIGZvciBpIGluIFswLi4uMjBdXHJcbiAgICAgIGdyaWRbaV1bal0gPSBkaWdpdHNbaW5kZXhdXHJcbiAgICAgIGluZGV4KytcclxuXHJcbnByZXBhcmVHcmlkKClcclxuXHJcbiMgR2V0cyBhIHByb2R1Y3Qgb2YgNCB2YWx1ZXMgc3RhcnRpbmcgYXQgKHN4LCBzeSksIGhlYWRpbmcgaW4gdGhlIGRpcmVjdGlvbiAoZHgsIGR5KVxyXG4jIFJldHVybnMgLTEgaWYgdGhlcmUgaXMgbm8gcm9vbSB0byBtYWtlIGEgc3RyaXBlIG9mIDQuXHJcbmdldExpbmVQcm9kdWN0ID0gKHN4LCBzeSwgZHgsIGR5KSAtPlxyXG4gIGV4ID0gc3ggKyAoNCAqIGR4KVxyXG4gIHJldHVybiAtMSBpZiAoZXggPCAwKSBvciAoZXggPj0gMjApXHJcbiAgZXkgPSBzeSArICg0ICogZHkpXHJcbiAgcmV0dXJuIC0xIGlmIChleSA8IDApIG9yIChleSA+PSAyMClcclxuXHJcbiAgeCA9IHN4XHJcbiAgeSA9IHN5XHJcbiAgcHJvZHVjdCA9IDFcclxuICBmb3IgaSBpbiBbMC4uLjRdXHJcbiAgICBwcm9kdWN0ICo9IGdyaWRbeF1beV1cclxuICAgIHggKz0gZHhcclxuICAgIHkgKz0gZHlcclxuXHJcbiAgcmV0dXJuIHByb2R1Y3RcclxuXHJcbmdldExpbmUgPSAoc3gsIHN5LCBkeCwgZHkpIC0+XHJcbiAgZXggPSBzeCArICg0ICogZHgpXHJcbiAgcmV0dXJuIFtdIGlmIChleCA8IDApIG9yIChleCA+PSAyMClcclxuICBleSA9IHN5ICsgKDQgKiBkeSlcclxuICByZXR1cm4gW10gaWYgKGV5IDwgMCkgb3IgKGV5ID49IDIwKVxyXG5cclxuICBsaW5lID0gW11cclxuXHJcbiAgeCA9IHN4XHJcbiAgeSA9IHN5XHJcbiAgZm9yIGkgaW4gWzAuLi40XVxyXG4gICAgbGluZS5wdXNoIGdyaWRbeF1beV1cclxuICAgIHggKz0gZHhcclxuICAgIHkgKz0gZHlcclxuXHJcbiAgcmV0dXJuIGxpbmVcclxuXHJcbnByb2JsZW0udGVzdCA9IC0+XHJcbiAgIyBFeGFtcGxlIGlzIGRpYWdvbmFsIHJpZ2h0L2Rvd24gZnJvbSAoOCw2KVxyXG4gIGVxdWFsKGdldExpbmVQcm9kdWN0KDgsIDYsIDEsIDEpLCAxNzg4Njk2LCBcIkRpYWdvbmFsIHZhbHVlIHNob3duIGluIGV4YW1wbGUgZXF1YWxzIDEsNzg4LDY5NlwiKVxyXG5cclxucHJvYmxlbS5hbnN3ZXIgPSAtPlxyXG4gIG1heCA9XHJcbiAgICBwcm9kdWN0OiAxXHJcbiAgICBpOiAwXHJcbiAgICBqOiAwXHJcbiAgICBkaXI6IFwicmlnaHRcIlxyXG5cclxuICBmb3IgaiBpbiBbMC4uLjIwXVxyXG4gICAgZm9yIGkgaW4gWzAuLi4yMF1cclxuICAgICAgcCA9IGdldExpbmVQcm9kdWN0KGksIGosIDEsIDApXHJcbiAgICAgIGlmIG1heC5wcm9kdWN0IDwgcFxyXG4gICAgICAgIG1heC5wcm9kdWN0ID0gcFxyXG4gICAgICAgIG1heC5pID0gaVxyXG4gICAgICAgIG1heC5qID0galxyXG4gICAgICAgIG1heC5kaXIgPSBcInJpZ2h0XCJcclxuICAgICAgcCA9IGdldExpbmVQcm9kdWN0KGksIGosIDAsIDEpXHJcbiAgICAgIGlmIG1heC5wcm9kdWN0IDwgcFxyXG4gICAgICAgIG1heC5wcm9kdWN0ID0gcFxyXG4gICAgICAgIG1heC5pID0gaVxyXG4gICAgICAgIG1heC5qID0galxyXG4gICAgICAgIG1heC5kaXIgPSBcImRvd25cIlxyXG4gICAgICBwID0gZ2V0TGluZVByb2R1Y3QoaSwgaiwgMSwgMSlcclxuICAgICAgaWYgbWF4LnByb2R1Y3QgPCBwXHJcbiAgICAgICAgbWF4LnByb2R1Y3QgPSBwXHJcbiAgICAgICAgbWF4LmkgPSBpXHJcbiAgICAgICAgbWF4LmogPSBqXHJcbiAgICAgICAgbWF4LmRpciA9IFwiZGlhZ29uYWxcIlxyXG5cclxuICByZXR1cm4gbWF4XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcHJvYmxlbSA9IG5ldyBQcm9ibGVtIFwiXCJcIlxyXG5cclxuUHJvYmxlbSAxMjogSGlnaGx5IGRpdmlzaWJsZSB0cmlhbmd1bGFyIG51bWJlclxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5UaGUgc2VxdWVuY2Ugb2YgdHJpYW5nbGUgbnVtYmVycyBpcyBnZW5lcmF0ZWQgYnkgYWRkaW5nIHRoZSBuYXR1cmFsIG51bWJlcnMuIFNvIHRoZSA3dGggdHJpYW5nbGUgbnVtYmVyIHdvdWxkIGJlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgMSArIDIgKyAzICsgNCArIDUgKyA2ICsgNyA9IDI4LlxyXG5cclxuVGhlIGZpcnN0IHRlbiB0ZXJtcyB3b3VsZCBiZTpcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAxLCAzLCA2LCAxMCwgMTUsIDIxLCAyOCwgMzYsIDQ1LCA1NSwgLi4uXHJcblxyXG5MZXQgdXMgbGlzdCB0aGUgZmFjdG9ycyBvZiB0aGUgZmlyc3Qgc2V2ZW4gdHJpYW5nbGUgbnVtYmVyczpcclxuXHJcbiAxOiAxXHJcbiAzOiAxLDNcclxuIDY6IDEsMiwzLDZcclxuMTA6IDEsMiw1LDEwXHJcbjE1OiAxLDMsNSwxNVxyXG4yMTogMSwzLDcsMjFcclxuMjg6IDEsMiw0LDcsMTQsMjhcclxuXHJcbldlIGNhbiBzZWUgdGhhdCAyOCBpcyB0aGUgZmlyc3QgdHJpYW5nbGUgbnVtYmVyIHRvIGhhdmUgb3ZlciBmaXZlIGRpdmlzb3JzLlxyXG5cclxuV2hhdCBpcyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IHRyaWFuZ2xlIG51bWJlciB0byBoYXZlIG92ZXIgZml2ZSBodW5kcmVkIGRpdmlzb3JzP1xyXG5cclxuXCJcIlwiXHJcblxyXG5tYXRoID0gcmVxdWlyZSBcIm1hdGhcIlxyXG5cclxuIyBUaGlzIGZ1bmN0aW9uIGRvZXMgaXRzIGJlc3QgdG8gbGV2ZXJhZ2UgUmFtYW51amFuJ3MgXCJUYXUgZnVuY3Rpb25cIixcclxuIyB3aGljaCBpcyBzdXBwb3NlZCB0byBnaXZlIHRoZSBudW1iZXIgb2YgcG9zaXRpdmUgZGl2aXNvcnMuXHJcbiNcclxuIyBUaGUgaWRlYSBpczpcclxuIyAqIEZvciBwcmltZXMsIFQocF5rKSA9IGsgKyAxXHJcbiMgKiBGb3IgYW55IG51bWJlcnMgd2hvc2UgR0NEIGlzIDEsIFQobW4pID0gVChtKSAqIFQobilcclxuI1xyXG4jIEkgYWxyZWFkeSBoYXZlIGEgbWV0aG9kIHRvIHByaW1lIGZhY3RvciBhIG51bWJlciwgc28gSSdsbCBsZXZlcmFnZVxyXG4jIGV2ZXJ5IGdyb3VwaW5nIG9mIHRoZSBzYW1lIHByaW1lIG51bWJlciBhcyB0aGUgZmlyc3QgY2FzZSwgYW5kXHJcbiMgbXVsdGlwbHkgdGhlbSB0b2dldGhlci5cclxuI1xyXG4jIEV4YW1wbGU6IDI4XHJcbiNcclxuIyAyOCdzIHByaW1lIGZhY3RvcnMgYXJlIFsyLCAyLCA3XSwgb3IgKDJeMiArIDcpXHJcbiNcclxuIyBJIGNhbiBhc3N1bWUgdGhhdCB0aGUgR0NEIGJldHdlZW4gYW55IG9mIHRoZSBwcmltZSBzZXRzIGlzIGdvaW5nIHRvIGJlIDEgYmVjYXVzZSBkdWgsXHJcbiMgd2hpY2ggbWVhbnMgdGhhdDpcclxuI1xyXG4jIFQoMjgpID09IFQoMl4yKSAqIFQoNylcclxuI1xyXG4jIFQoMl4yKSA9PSAyICsgMSA9PSAzXHJcbiMgVCg3XjEpID09IDEgKyAxID09IDJcclxuIyAzICogMiA9IDZcclxuIyAyOCBoYXMgNiBkaXZpc29ycy5cclxuI1xyXG4jIFlvdSdyZSBtYWQuXHJcblxyXG5kaXZpc29yQ291bnQgPSAobikgLT5cclxuICByZXR1cm4gMSBpZiBuID09IDFcclxuXHJcbiAgZmFjdG9ycyA9IG1hdGgucHJpbWVGYWN0b3JzKG4pXHJcbiAgY291bnQgPSAxXHJcbiAgbGFzdEZhY3RvciA9IDBcclxuICBleHBvbmVudCA9IDFcclxuICBmb3IgZmFjdG9yIGluIGZhY3RvcnNcclxuICAgIGlmIGZhY3RvciA9PSBsYXN0RmFjdG9yXHJcbiAgICAgIGV4cG9uZW50KytcclxuICAgIGVsc2VcclxuICAgICAgaWYgbGFzdEZhY3RvciAhPSAwXHJcbiAgICAgICAgICBjb3VudCAqPSBleHBvbmVudCArIDFcclxuICAgICAgbGFzdEZhY3RvciA9IGZhY3RvclxyXG4gICAgICBleHBvbmVudCA9IDFcclxuXHJcbiAgaWYgbGFzdEZhY3RvciAhPSAwXHJcbiAgICAgIGNvdW50ICo9IGV4cG9uZW50ICsgMVxyXG5cclxuICByZXR1cm4gY291bnRcclxuXHJcbnByb2JsZW0udGVzdCA9IC0+XHJcbiAgZXF1YWwoZGl2aXNvckNvdW50KCAxKSwgMSwgXCIgMSBoYXMgMSBkaXZpc29yc1wiKVxyXG4gIGVxdWFsKGRpdmlzb3JDb3VudCggMyksIDIsIFwiIDMgaGFzIDIgZGl2aXNvcnNcIilcclxuICBlcXVhbChkaXZpc29yQ291bnQoIDYpLCA0LCBcIiA2IGhhcyA0IGRpdmlzb3JzXCIpXHJcbiAgZXF1YWwoZGl2aXNvckNvdW50KDEwKSwgNCwgXCIxMCBoYXMgNCBkaXZpc29yc1wiKVxyXG4gIGVxdWFsKGRpdmlzb3JDb3VudCgxNSksIDQsIFwiMTUgaGFzIDQgZGl2aXNvcnNcIilcclxuICBlcXVhbChkaXZpc29yQ291bnQoMjEpLCA0LCBcIjIxIGhhcyA0IGRpdmlzb3JzXCIpXHJcbiAgZXF1YWwoZGl2aXNvckNvdW50KDI4KSwgNiwgXCIyOCBoYXMgNiBkaXZpc29yc1wiKVxyXG5cclxucHJvYmxlbS5hbnN3ZXIgPSAtPlxyXG4gIG4gPSAxXHJcbiAgc3RlcCA9IDJcclxuXHJcbiAgbG9vcFxyXG4gICAgY291bnQgPSBkaXZpc29yQ291bnQobilcclxuICAgIGlmIGNvdW50ID4gNTAwXHJcbiAgICAgIHJldHVybiB7IG46IG4sIGNvdW50OiBjb3VudCB9XHJcblxyXG4gICAgIyBuZXh0IHRyaWFuZ3VsYXIgbnVtYmVyXHJcbiAgICBuICs9IHN0ZXBcclxuICAgIHN0ZXArK1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHByb2JsZW0gPSBuZXcgUHJvYmxlbSBcIlwiXCJcclxuXHJcblByb2JsZW0gMTM6IExhcmdlIHN1bVxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbldvcmsgb3V0IHRoZSBmaXJzdCB0ZW4gZGlnaXRzIG9mIHRoZSBzdW0gb2YgdGhlIGZvbGxvd2luZyBvbmUtaHVuZHJlZCA1MC1kaWdpdCBudW1iZXJzLlxyXG5cclxuMzcxMDcyODc1MzM5MDIxMDI3OTg3OTc5OTgyMjA4Mzc1OTAyNDY1MTAxMzU3NDAyNTBcclxuNDYzNzY5Mzc2Nzc0OTAwMDk3MTI2NDgxMjQ4OTY5NzAwNzgwNTA0MTcwMTgyNjA1MzhcclxuNzQzMjQ5ODYxOTk1MjQ3NDEwNTk0NzQyMzMzMDk1MTMwNTgxMjM3MjY2MTczMDk2MjlcclxuOTE5NDIyMTMzNjM1NzQxNjE1NzI1MjI0MzA1NjMzMDE4MTEwNzI0MDYxNTQ5MDgyNTBcclxuMjMwNjc1ODgyMDc1MzkzNDYxNzExNzE5ODAzMTA0MjEwNDc1MTM3NzgwNjMyNDY2NzZcclxuODkyNjE2NzA2OTY2MjM2MzM4MjAxMzYzNzg0MTgzODM2ODQxNzg3MzQzNjE3MjY3NTdcclxuMjgxMTI4Nzk4MTI4NDk5Nzk0MDgwNjU0ODE5MzE1OTI2MjE2OTEyNzU4ODk4MzI3MzhcclxuNDQyNzQyMjg5MTc0MzI1MjAzMjE5MjM1ODk0MjI4NzY3OTY0ODc2NzAyNzIxODkzMThcclxuNDc0NTE0NDU3MzYwMDEzMDY0MzkwOTExNjcyMTY4NTY4NDQ1ODg3MTE2MDMxNTMyNzZcclxuNzAzODY0ODYxMDU4NDMwMjU0Mzk5Mzk2MTk4Mjg5MTc1OTM2NjU2ODY3NTc5MzQ5NTFcclxuNjIxNzY0NTcxNDE4NTY1NjA2Mjk1MDIxNTcyMjMxOTY1ODY3NTUwNzkzMjQxOTMzMzFcclxuNjQ5MDYzNTI0NjI3NDE5MDQ5MjkxMDE0MzI0NDU4MTM4MjI2NjMzNDc5NDQ3NTgxNzhcclxuOTI1NzU4Njc3MTgzMzcyMTc2NjE5NjM3NTE1OTA1NzkyMzk3MjgyNDU1OTg4Mzg0MDdcclxuNTgyMDM1NjUzMjUzNTkzOTkwMDg0MDI2MzM1Njg5NDg4MzAxODk0NTg2MjgyMjc4MjhcclxuODAxODExOTkzODQ4MjYyODIwMTQyNzgxOTQxMzk5NDA1Njc1ODcxNTExNzAwOTQzOTBcclxuMzUzOTg2NjQzNzI4MjcxMTI2NTM4Mjk5ODcyNDA3ODQ0NzMwNTMxOTAxMDQyOTM1ODZcclxuODY1MTU1MDYwMDYyOTU4NjQ4NjE1MzIwNzUyNzMzNzE5NTkxOTE0MjA1MTcyNTU4MjlcclxuNzE2OTM4ODg3MDc3MTU0NjY0OTkxMTU1OTM0ODc2MDM1MzI5MjE3MTQ5NzAwNTY5MzhcclxuNTQzNzAwNzA1NzY4MjY2ODQ2MjQ2MjE0OTU2NTAwNzY0NzE3ODcyOTQ0MzgzNzc2MDRcclxuNTMyODI2NTQxMDg3NTY4Mjg0NDMxOTExOTA2MzQ2OTQwMzc4NTUyMTc3NzkyOTUxNDVcclxuMzYxMjMyNzI1MjUwMDAyOTYwNzEwNzUwODI1NjM4MTU2NTY3MTA4ODUyNTgzNTA3MjFcclxuNDU4NzY1NzYxNzI0MTA5NzY0NDczMzkxMTA2MDcyMTgyNjUyMzY4NzcyMjM2MzYwNDVcclxuMTc0MjM3MDY5MDU4NTE4NjA2NjA0NDgyMDc2MjEyMDk4MTMyODc4NjA3MzM5Njk0MTJcclxuODExNDI2NjA0MTgwODY4MzA2MTkzMjg0NjA4MTExOTEwNjE1NTY5NDA1MTI2ODk2OTJcclxuNTE5MzQzMjU0NTE3MjgzODg2NDE5MTgwNDcwNDkyOTMyMTUwNTg2NDI1NjMwNDk0ODNcclxuNjI0NjcyMjE2NDg0MzUwNzYyMDE3Mjc5MTgwMzk5NDQ2OTMwMDQ3MzI5NTYzNDA2OTFcclxuMTU3MzI0NDQzODY5MDgxMjU3OTQ1MTQwODkwNTc3MDYyMjk0MjkxOTcxMDc5MjgyMDlcclxuNTUwMzc2ODc1MjU2Nzg3NzMwOTE4NjI1NDA3NDQ5Njk4NDQ1MDgzMzAzOTM2ODIxMjZcclxuMTgzMzYzODQ4MjUzMzAxNTQ2ODYxOTYxMjQzNDg3Njc2ODEyOTc1MzQzNzU5NDY1MTVcclxuODAzODYyODc1OTI4Nzg0OTAyMDE1MjE2ODU1NTQ4Mjg3MTcyMDEyMTkyNTc3NjY5NTRcclxuNzgxODI4MzM3NTc5OTMxMDM2MTQ3NDAzNTY4NTY0NDkwOTU1MjcwOTc4NjQ3OTc1ODFcclxuMTY3MjYzMjAxMDA0MzY4OTc4NDI1NTM1Mzk5MjA5MzE4Mzc0NDE0OTc4MDY4NjA5ODRcclxuNDg0MDMwOTgxMjkwNzc3OTE3OTkwODgyMTg3OTUzMjczNjQ0NzU2NzU1OTA4NDgwMzBcclxuODcwODY5ODc1NTEzOTI3MTE4NTQ1MTcwNzg1NDQxNjE4NTI0MjQzMjA2OTMxNTAzMzJcclxuNTk5NTk0MDY4OTU3NTY1MzY3ODIxMDcwNzQ5MjY5NjY1Mzc2NzYzMjYyMzU0NDcyMTBcclxuNjk3OTM5NTA2Nzk2NTI2OTQ3NDI1OTc3MDk3MzkxNjY2OTM3NjMwNDI2MzM5ODcwODVcclxuNDEwNTI2ODQ3MDgyOTkwODUyMTEzOTk0MjczNjU3MzQxMTYxODI3NjAzMTUwMDEyNzFcclxuNjUzNzg2MDczNjE1MDEwODA4NTcwMDkxNDk5Mzk1MTI1NTcwMjgxOTg3NDYwMDQzNzVcclxuMzU4MjkwMzUzMTc0MzQ3MTczMjY5MzIxMjM1NzgxNTQ5ODI2Mjk3NDI1NTI3MzczMDdcclxuOTQ5NTM3NTk3NjUxMDUzMDU5NDY5NjYwNjc2ODMxNTY1NzQzNzcxNjc0MDE4NzUyNzVcclxuODg5MDI4MDI1NzE3MzMyMjk2MTkxNzY2Njg3MTM4MTk5MzE4MTEwNDg3NzAxOTAyNzFcclxuMjUyNjc2ODAyNzYwNzgwMDMwMTM2Nzg2ODA5OTI1MjU0NjM0MDEwNjE2MzI4NjY1MjZcclxuMzYyNzAyMTg1NDA0OTc3MDU1ODU2Mjk5NDY1ODA2MzYyMzc5OTMxNDA3NDYyNTU5NjJcclxuMjQwNzQ0ODY5MDgyMzExNzQ5Nzc3OTIzNjU0NjYyNTcyNDY5MjMzMjI4MTA5MTcxNDFcclxuOTE0MzAyODgxOTcxMDMyODg1OTc4MDY2Njk3NjA4OTI5Mzg2MzgyODUwMjUzMzM0MDNcclxuMzQ0MTMwNjU1NzgwMTYxMjc4MTU5MjE4MTUwMDU1NjE4Njg4MzY0Njg0MjAwOTA0NzBcclxuMjMwNTMwODExNzI4MTY0MzA0ODc2MjM3OTE5Njk4NDI0ODcyNTUwMzY2Mzg3ODQ1ODNcclxuMTE0ODc2OTY5MzIxNTQ5MDI4MTA0MjQwMjAxMzgzMzUxMjQ0NjIxODE0NDE3NzM0NzBcclxuNjM3ODMyOTk0OTA2MzYyNTk2NjY0OTg1ODc2MTgyMjEyMjUyMjU1MTI0ODY3NjQ1MzNcclxuNjc3MjAxODY5NzE2OTg1NDQzMTI0MTk1NzI0MDk5MTM5NTkwMDg5NTIzMTAwNTg4MjJcclxuOTU1NDgyNTUzMDAyNjM1MjA3ODE1MzIyOTY3OTYyNDk0ODE2NDE5NTM4NjgyMTg3NzRcclxuNzYwODUzMjcxMzIyODU3MjMxMTA0MjQ4MDM0NTYxMjQ4Njc2OTcwNjQ1MDc5OTUyMzZcclxuMzc3NzQyNDI1MzU0MTEyOTE2ODQyNzY4NjU1Mzg5MjYyMDUwMjQ5MTAzMjY1NzI5NjdcclxuMjM3MDE5MTMyNzU3MjU2NzUyODU2NTMyNDgyNTgyNjU0NjMwOTIyMDcwNTg1OTY1MjJcclxuMjk3OTg4NjAyNzIyNTgzMzE5MTMxMjYzNzUxNDczNDE5OTQ4ODk1MzQ3NjU3NDU1MDFcclxuMTg0OTU3MDE0NTQ4NzkyODg5ODQ4NTY4Mjc3MjYwNzc3MTM3MjE0MDM3OTg4Nzk3MTVcclxuMzgyOTgyMDM3ODMwMzE0NzM1Mjc3MjE1ODAzNDgxNDQ1MTM0OTEzNzMyMjY2NTEzODFcclxuMzQ4Mjk1NDM4MjkxOTk5MTgxODAyNzg5MTY1MjI0MzEwMjczOTIyNTExMjI4Njk1MzlcclxuNDA5NTc5NTMwNjY0MDUyMzI2MzI1MzgwNDQxMDAwNTk2NTQ5MzkxNTk4Nzk1OTM2MzVcclxuMjk3NDYxNTIxODU1MDIzNzEzMDc2NDIyNTUxMjExODM2OTM4MDM1ODAzODg1ODQ5MDNcclxuNDE2OTgxMTYyMjIwNzI5NzcxODYxNTgyMzY2Nzg0MjQ2ODkxNTc5OTM1MzI5NjE5MjJcclxuNjI0Njc5NTcxOTQ0MDEyNjkwNDM4NzcxMDcyNzUwNDgxMDIzOTA4OTU1MjM1OTc0NTdcclxuMjMxODk3MDY3NzI1NDc5MTUwNjE1MDU1MDQ5NTM5MjI5Nzk1MzA5MDExMjk5Njc1MTlcclxuODYxODgwODgyMjU4NzUzMTQ1Mjk1ODQwOTkyNTEyMDM4MjkwMDk0MDc3NzA3NzU2NzJcclxuMTEzMDY3Mzk3MDgzMDQ3MjQ0ODM4MTY1MzM4NzM1MDIzNDA4NDU2NDcwNTgwNzczMDhcclxuODI5NTkxNzQ3NjcxNDAzNjMxOTgwMDgxODcxMjkwMTE4NzU0OTEzMTA1NDcxMjY1ODFcclxuOTc2MjMzMzEwNDQ4MTgzODYyNjk1MTU0NTYzMzQ5MjYzNjY1NzI4OTc1NjM0MDA1MDBcclxuNDI4NDYyODAxODM1MTcwNzA1Mjc4MzE4Mzk0MjU4ODIxNDU1MjEyMjcyNTEyNTAzMjdcclxuNTUxMjE2MDM1NDY5ODEyMDA1ODE3NjIxNjUyMTI4Mjc2NTI3NTE2OTEyOTY4OTc3ODlcclxuMzIyMzgxOTU3MzQzMjkzMzk5NDY0Mzc1MDE5MDc4MzY5NDU3NjU4ODMzNTIzOTk4ODZcclxuNzU1MDYxNjQ5NjUxODQ3NzUxODA3MzgxNjg4Mzc4NjEwOTE1MjczNTc5Mjk3MDEzMzdcclxuNjIxNzc4NDI3NTIxOTI2MjM0MDE5NDIzOTk2MzkxNjgwNDQ5ODM5OTMxNzMzMTI3MzFcclxuMzI5MjQxODU3MDcxNDczNDk1NjY5MTY2NzQ2ODc2MzQ2NjA5MTUwMzU5MTQ2Nzc1MDRcclxuOTk1MTg2NzE0MzAyMzUyMTk2Mjg4OTQ4OTAxMDI0MjMzMjUxMTY5MTM2MTk2MjY2MjJcclxuNzMyNjc0NjA4MDA1OTE1NDc0NzE4MzA3OTgzOTI4Njg1MzUyMDY5NDY5NDQ1NDA3MjRcclxuNzY4NDE4MjI1MjQ2NzQ0MTcxNjE1MTQwMzY0Mjc5ODIyNzMzNDgwNTU1NTYyMTQ4MThcclxuOTcxNDI2MTc5MTAzNDI1OTg2NDcyMDQ1MTY4OTM5ODk0MjIxNzk4MjYwODgwNzY4NTJcclxuODc3ODM2NDYxODI3OTkzNDYzMTM3Njc3NTQzMDc4MDkzNjMzMzMwMTg5ODI2NDIwOTBcclxuMTA4NDg4MDI1MjE2NzQ2NzA4ODMyMTUxMjAxODU4ODM1NDMyMjM4MTI4NzY5NTI3ODZcclxuNzEzMjk2MTI0NzQ3ODI0NjQ1Mzg2MzY5OTMwMDkwNDkzMTAzNjM2MTk3NjM4NzgwMzlcclxuNjIxODQwNzM1NzIzOTk3OTQyMjM0MDYyMzUzOTM4MDgzMzk2NTEzMjc0MDgwMTExMTZcclxuNjY2Mjc4OTE5ODE0ODgwODc3OTc5NDE4NzY4NzYxNDQyMzAwMzA5ODQ0OTA4NTE0MTFcclxuNjA2NjE4MjYyOTM2ODI4MzY3NjQ3NDQ3NzkyMzkxODAzMzUxMTA5ODkwNjk3OTA3MTRcclxuODU3ODY5NDQwODk1NTI5OTA2NTM2NDA0NDc0MjU1NzYwODM2NTk5NzY2NDU3OTUwOTZcclxuNjYwMjQzOTY0MDk5MDUzODk2MDcxMjAxOTgyMTk5NzYwNDc1OTk0OTAxOTcyMzAyOTdcclxuNjQ5MTM5ODI2ODAwMzI5NzMxNTYwMzcxMjAwNDEzNzc5MDM3ODU1NjYwODUwODkyNTJcclxuMTY3MzA5MzkzMTk4NzI3NTAyNzU0Njg5MDY5MDM3MDc1Mzk0MTMwNDI2NTIzMTUwMTFcclxuOTQ4MDkzNzcyNDUwNDg3OTUxNTA5NTQxMDA5MjE2NDU4NjM3NTQ3MTA1OTg0MzY3OTFcclxuNzg2MzkxNjcwMjExODc0OTI0MzE5OTU3MDA2NDE5MTc5Njk3Nzc1OTkwMjgzMDA2OTlcclxuMTUzNjg3MTM3MTE5MzY2MTQ5NTI4MTEzMDU4NzYzODAyNzg0MTA3NTQ0NDk3MzMwNzhcclxuNDA3ODk5MjMxMTU1MzU1NjI1NjExNDIzMjI0MjMyNTUwMzM2ODU0NDI0ODg5MTczNTNcclxuNDQ4ODk5MTE1MDE0NDA2NDgwMjAzNjkwNjgwNjM5NjA2NzIzMjIxOTMyMDQxNDk1MzVcclxuNDE1MDMxMjg4ODAzMzk1MzYwNTMyOTkzNDAzNjgwMDY5Nzc3MTA2NTA1NjY2MzE5NTRcclxuODEyMzQ4ODA2NzMyMTAxNDY3MzkwNTg1Njg1NTc5MzQ1ODE0MDM2Mjc4MjI3MDMyODBcclxuODI2MTY1NzA3NzM5NDgzMjc1OTIyMzI4NDU5NDE3MDY1MjUwOTQ1MTIzMjUyMzA2MDhcclxuMjI5MTg4MDIwNTg3NzczMTk3MTk4Mzk0NTAxODA4ODgwNzI0Mjk2NjE5ODA4MTExOTdcclxuNzcxNTg1NDI1MDIwMTY1NDUwOTA0MTMyNDU4MDk3ODY4ODI3Nzg5NDg3MjE4NTk2MTdcclxuNzIxMDc4Mzg0MzUwNjkxODYxNTU0MzU2NjI4ODQwNjIyNTc0NzM2OTIyODQ1MDk1MTZcclxuMjA4NDk2MDM5ODAxMzQwMDE3MjM5MzA2NzE2NjY4MjM1NTUyNDUyNTI4MDQ2MDk3MjJcclxuNTM1MDM1MzQyMjY0NzI1MjQyNTA4NzQwNTQwNzU1OTE3ODk3ODEyNjQzMzAzMzE2OTBcclxuXHJcblwiXCJcIlxyXG5cclxubnVtYmVycyA9IFtcclxuXHJcbiAgMzcxMDcyODc1MzM5MDIxMDI3OTg3OTc5OTgyMjA4Mzc1OTAyNDY1MTAxMzU3NDAyNTBcclxuICA0NjM3NjkzNzY3NzQ5MDAwOTcxMjY0ODEyNDg5Njk3MDA3ODA1MDQxNzAxODI2MDUzOFxyXG4gICMjIyMjIyMjIyAgICAgICAgICMjIyMjIyMjIyMgICAgICAgICAgICAgIyMjIyMjIyMjXHJcbiAgIyMjIyMjIyMjICAgICAgICAgIyMjIyMjIyMjIyAgICAgICAgICAgICAjIyMjIyMjIyNcclxuICAjIyMjIyMjIyMgICAgICAgICAjIyMjIyMjIyMjICAgICAgICAgICAgICMjIyMjIyMjI1xyXG4gICMjIyMjIyMjIyAgICAgICAgICMjIyMjIyMjIyMgICAgICAgICAgICAgIyMjIyMjIyMjXHJcbiAgIyMjIyMjIyMjICAgICAgICAgIyMjIyMjIyMjIyAgICAgICAgICAgICAjIyMjIyMjIyNcclxuICAjIyMjIyMjIyMgICAgICAgICAjIyMjIyMjIyMjICAgICAgICAgICAgICMjIyMjIyMjI1xyXG4gICMjIyMjIyMjIyAgICAgICAgICMjIyMjIyMjIyMgICAgICAgICAgICAgIyMjIyMjIyMjXHJcbiAgIyMjIyMjIyMjICAgICAgICAgIyMjIyMjIyMjIyAgICAgICAgICAgICAjIyMjIyMjIyNcclxuICAjIyMjIyMjIyMgICAgICAgICAjIyMjIyMjIyMjICAgICAgICAgICAgICMjIyMjIyMjI1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjXHJcbiAgICAgICAgICAgICAgICAjIyMjIyMjIyMjIyMjIyMjIyNcclxuICAgICAgICAgICAgIyMjIyMjIyMgICAgICAgICAgIyMjIyMjIyNcclxuICAgICAgICAjIyMjIyMjIyMjIyMgICAgICAgICAgIyMjIyMjIyMjIyMjXHJcbiAgICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuICA3NDMyNDk4NjE5OTUyNDc0MTA1OTQ3NDIzMzMwOTUxMzA1ODEyMzcyNjYxNzMwOTYyOVxyXG4gIDkxOTQyMjEzMzYzNTc0MTYxNTcyNTIyNDMwNTYzMzAxODExMDcyNDA2MTU0OTA4MjUwXHJcbiAgIyMjIyMjIyMjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyNcclxuICAjIyMjIyMjIyMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjIyMjIyMjI1xyXG4gICMjIyMjIyMjIyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjXHJcbiAgIyMjIyMjIyMjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyNcclxuICAjIyMjIyMjIyMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjIyMjIyMjI1xyXG4gICMjIyMjIyMjIyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjXHJcbiAgIyMjIyMjIyMjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyNcclxuICAjIyMjIyMjIyMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjIyMjIyMjI1xyXG5cclxuICAyMzA2NzU4ODIwNzUzOTM0NjE3MTE3MTk4MDMxMDQyMTA0NzUxMzc3ODA2MzI0NjY3NlxyXG4gIDg5MjYxNjcwNjk2NjIzNjMzODIwMTM2Mzc4NDE4MzgzNjg0MTc4NzM0MzYxNzI2NzU3XHJcbiAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyNcclxuICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjI1xyXG4gICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjXHJcbiAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyNcclxuICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjI1xyXG4gICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjXHJcbiAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyNcclxuICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjI1xyXG4gICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjXHJcbiAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyNcclxuXHJcbiAgMjgxMTI4Nzk4MTI4NDk5Nzk0MDgwNjU0ODE5MzE1OTI2MjE2OTEyNzU4ODk4MzI3MzhcclxuICA0NDI3NDIyODkxNzQzMjUyMDMyMTkyMzU4OTQyMjg3Njc5NjQ4NzY3MDI3MjE4OTMxOFxyXG4gICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjXHJcbiAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyNcclxuICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjI1xyXG4gICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjXHJcbiAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyNcclxuICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjI1xyXG4gICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjXHJcbiAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyNcclxuICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjI1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICA0NzQ1MTQ0NTczNjAwMTMwNjQzOTA5MTE2NzIxNjg1Njg0NDU4ODcxMTYwMzE1MzI3NlxyXG4gIDcwMzg2NDg2MTA1ODQzMDI1NDM5OTM5NjE5ODI4OTE3NTkzNjY1Njg2NzU3OTM0OTUxXHJcbiAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyNcclxuICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjI1xyXG4gICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjXHJcbiAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyNcclxuICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjI1xyXG4gICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjXHJcbiAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyNcclxuICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjI1xyXG4gICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjXHJcbiAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyNcclxuICA2MjE3NjQ1NzE0MTg1NjU2MDYyOTUwMjE1NzIyMzE5NjU4Njc1NTA3OTMyNDE5MzMzMVxyXG4gIDY0OTA2MzUyNDYyNzQxOTA0OTI5MTAxNDMyNDQ1ODEzODIyNjYzMzQ3OTQ0NzU4MTc4XHJcblxyXG4gIDkyNTc1ODY3NzE4MzM3MjE3NjYxOTYzNzUxNTkwNTc5MjM5NzI4MjQ1NTk4ODM4NDA3XHJcbiAgNTgyMDM1NjUzMjUzNTkzOTkwMDg0MDI2MzM1Njg5NDg4MzAxODk0NTg2MjgyMjc4MjhcclxuICAjIyMjIyMjIyMjI1xyXG4gICMjIyMjIyMjIyMjXHJcbiAgIyMjIyMjIyMjIyNcclxuICAjIyMjIyMjIyMjI1xyXG4gICMjIyMjIyMjIyMjXHJcbiAgIyMjIyMjIyMjIyNcclxuICAjIyMjIyMjIyMjI1xyXG4gIDgwMTgxMTk5Mzg0ODI2MjgyMDE0Mjc4MTk0MTM5OTQwNTY3NTg3MTUxMTcwMDk0MzkwXHJcbiAgMzUzOTg2NjQzNzI4MjcxMTI2NTM4Mjk5ODcyNDA3ODQ0NzMwNTMxOTAxMDQyOTM1ODZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjI1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjI1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjI1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjXHJcbiAgODY1MTU1MDYwMDYyOTU4NjQ4NjE1MzIwNzUyNzMzNzE5NTkxOTE0MjA1MTcyNTU4MjlcclxuICA3MTY5Mzg4ODcwNzcxNTQ2NjQ5OTExNTU5MzQ4NzYwMzUzMjkyMTcxNDk3MDA1NjkzOFxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICA1NDM3MDA3MDU3NjgyNjY4NDYyNDYyMTQ5NTY1MDA3NjQ3MTc4NzI5NDQzODM3NzYwNFxyXG4gIDUzMjgyNjU0MTA4NzU2ODI4NDQzMTkxMTkwNjM0Njk0MDM3ODU1MjE3Nzc5Mjk1MTQ1XHJcbiAgIyMjIyMjIyMjIyNcclxuICAjIyMjIyMjIyMjI1xyXG4gICMjIyMjIyMjIyMjXHJcbiAgIyMjIyMjIyMjIyNcclxuICAjIyMjIyMjIyMjI1xyXG4gICMjIyMjIyMjIyMjXHJcbiAgIyMjIyMjIyMjIyNcclxuICAzNjEyMzI3MjUyNTAwMDI5NjA3MTA3NTA4MjU2MzgxNTY1NjcxMDg4NTI1ODM1MDcyMVxyXG4gIDQ1ODc2NTc2MTcyNDEwOTc2NDQ3MzM5MTEwNjA3MjE4MjY1MjM2ODc3MjIzNjM2MDQ1XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjI1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjI1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjI1xyXG4gIDE3NDIzNzA2OTA1ODUxODYwNjYwNDQ4MjA3NjIxMjA5ODEzMjg3ODYwNzMzOTY5NDEyXHJcbiAgODExNDI2NjA0MTgwODY4MzA2MTkzMjg0NjA4MTExOTEwNjE1NTY5NDA1MTI2ODk2OTJcclxuXHJcbiAgNTE5MzQzMjU0NTE3MjgzODg2NDE5MTgwNDcwNDkyOTMyMTUwNTg2NDI1NjMwNDk0ODNcclxuICA2MjQ2NzIyMTY0ODQzNTA3NjIwMTcyNzkxODAzOTk0NDY5MzAwNDczMjk1NjM0MDY5MVxyXG4gICMjIyMjIyMjIyMjICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjXHJcbiAgIyMjIyMjIyMjIyMgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyNcclxuICAjIyMjIyMjIyMjIyAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjI1xyXG4gICMjIyMjIyMjIyMjICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjXHJcbiAgIyMjIyMjIyMjIyMgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyNcclxuICAjIyMjIyMjIyMjIyAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjI1xyXG4gICMjIyMjIyMjIyMjICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjIyMjIyMjIyMjXHJcbiAgIyMjIyMjIyMjIyMgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjIyNcclxuICAjIyMjIyMjIyMjIyAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjI1xyXG4gIDE1NzMyNDQ0Mzg2OTA4MTI1Nzk0NTE0MDg5MDU3NzA2MjI5NDI5MTk3MTA3OTI4MjA5XHJcbiAgNTUwMzc2ODc1MjU2Nzg3NzMwOTE4NjI1NDA3NDQ5Njk4NDQ1MDgzMzAzOTM2ODIxMjZcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgMTgzMzYzODQ4MjUzMzAxNTQ2ODYxOTYxMjQzNDg3Njc2ODEyOTc1MzQzNzU5NDY1MTVcclxuICA4MDM4NjI4NzU5Mjg3ODQ5MDIwMTUyMTY4NTU1NDgyODcxNzIwMTIxOTI1Nzc2Njk1NFxyXG4gICMjIyMjIyMjIyAgICAgICAgICMjIyMjIyMjIyMgICAgICAgICAgICAgIyMjIyMjIyMjXHJcbiAgIyMjIyMjIyMjICAgICAgICAgIyMjIyMjIyMjIyAgICAgICAgICAgICAjIyMjIyMjIyNcclxuICAjIyMjIyMjIyMgICAgICAgICAjIyMjIyMjIyMjICAgICAgICAgICAgICMjIyMjIyMjI1xyXG4gICMjIyMjIyMjIyAgICAgICAgICMjIyMjIyMjIyMgICAgICAgICAgICAgIyMjIyMjIyMjXHJcbiAgIyMjIyMjIyMjICAgICAgICAgIyMjIyMjIyMjIyAgICAgICAgICAgICAjIyMjIyMjIyNcclxuICAjIyMjIyMjIyMgICAgICAgICAjIyMjIyMjIyMjICAgICAgICAgICAgICMjIyMjIyMjI1xyXG4gICMjIyMjIyMjIyAgICAgICAgICMjIyMjIyMjIyMgICAgICAgICAgICAgIyMjIyMjIyMjXHJcbiAgIyMjIyMjIyMjICAgICAgICAgIyMjIyMjIyMjIyAgICAgICAgICAgICAjIyMjIyMjIyNcclxuICAjIyMjIyMjIyMgICAgICAgICAjIyMjIyMjIyMjICAgICAgICAgICAgICMjIyMjIyMjI1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyMjXHJcbiAgICAgICAgICAgICAgICAjIyMjIyMjIyMjIyMjIyMjIyNcclxuICAgICAgICAgICAgIyMjIyMjIyMgICAgICAgICAgIyMjIyMjIyNcclxuICAgICAgICAjIyMjIyMjIyMjIyMgICAgICAgICAgIyMjIyMjIyMjIyMjXHJcbiAgICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuICA3ODE4MjgzMzc1Nzk5MzEwMzYxNDc0MDM1Njg1NjQ0OTA5NTUyNzA5Nzg2NDc5NzU4MVxyXG4gIDE2NzI2MzIwMTAwNDM2ODk3ODQyNTUzNTM5OTIwOTMxODM3NDQxNDk3ODA2ODYwOTg0XHJcbiAgIyMjIyMjIyMjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyNcclxuICAjIyMjIyMjIyMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjIyMjIyMjI1xyXG4gICMjIyMjIyMjIyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjXHJcbiAgIyMjIyMjIyMjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyNcclxuICAjIyMjIyMjIyMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjIyMjIyMjI1xyXG4gICMjIyMjIyMjIyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyMjIyMjIyMjXHJcbiAgIyMjIyMjIyMjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIyMjIyMjIyNcclxuICAjIyMjIyMjIyMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjIyMjIyMjI1xyXG5cclxuICA0ODQwMzA5ODEyOTA3Nzc5MTc5OTA4ODIxODc5NTMyNzM2NDQ3NTY3NTU5MDg0ODAzMCMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG4gIDg3MDg2OTg3NTUxMzkyNzExODU0NTE3MDc4NTQ0MTYxODUyNDI0MzIwNjkzMTUwMzMyICAgICAgICAgICAgICAgICAgICAgICAgICAjI1xyXG4gIDU5OTU5NDA2ODk1NzU2NTM2NzgyMTA3MDc0OTI2OTY2NTM3Njc2MzI2MjM1NDQ3MjEwICAgICAgICAgICAgICAgICAgICAgICAgICAgIyNcclxuICA2OTc5Mzk1MDY3OTY1MjY5NDc0MjU5NzcwOTczOTE2NjY5Mzc2MzA0MjYzMzk4NzA4NSAgICAgICAgICAgICAgICAgICAgICAgICAgICAjI1xyXG4gIDQxMDUyNjg0NzA4Mjk5MDg1MjExMzk5NDI3MzY1NzM0MTE2MTgyNzYwMzE1MDAxMjcxICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjXHJcbiAgNjUzNzg2MDczNjE1MDEwODA4NTcwMDkxNDk5Mzk1MTI1NTcwMjgxOTg3NDYwMDQzNzUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjXHJcbiAgMzU4MjkwMzUzMTc0MzQ3MTczMjY5MzIxMjM1NzgxNTQ5ODI2Mjk3NDI1NTI3MzczMDcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjXHJcbiAgOTQ5NTM3NTk3NjUxMDUzMDU5NDY5NjYwNjc2ODMxNTY1NzQzNzcxNjc0MDE4NzUyNzUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjXHJcbiAgODg5MDI4MDI1NzE3MzMyMjk2MTkxNzY2Njg3MTM4MTk5MzE4MTEwNDg3NzAxOTAyNzEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjXHJcbiAgMjUyNjc2ODAyNzYwNzgwMDMwMTM2Nzg2ODA5OTI1MjU0NjM0MDEwNjE2MzI4NjY1MjYgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjXHJcbiAgMzYyNzAyMTg1NDA0OTc3MDU1ODU2Mjk5NDY1ODA2MzYyMzc5OTMxNDA3NDYyNTU5NjIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjXHJcbiAgMjQwNzQ0ODY5MDgyMzExNzQ5Nzc3OTIzNjU0NjYyNTcyNDY5MjMzMjI4MTA5MTcxNDEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjXHJcbiAgOTE0MzAyODgxOTcxMDMyODg1OTc4MDY2Njk3NjA4OTI5Mzg2MzgyODUwMjUzMzM0MDMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjXHJcbiAgMzQ0MTMwNjU1NzgwMTYxMjc4MTU5MjE4MTUwMDU1NjE4Njg4MzY0Njg0MjAwOTA0NzAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyNcclxuICAyMzA1MzA4MTE3MjgxNjQzMDQ4NzYyMzc5MTk2OTg0MjQ4NzI1NTAzNjYzODc4NDU4MyAgICAgICAgICAgICAgICAgICAgICAgICAgICMjXHJcbiAgMTE0ODc2OTY5MzIxNTQ5MDI4MTA0MjQwMjAxMzgzMzUxMjQ0NjIxODE0NDE3NzM0NzAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcblxyXG5cclxuXHJcbiAgNjM3ODMyOTk0OTA2MzYyNTk2NjY0OTg1ODc2MTgyMjEyMjUyMjU1MTI0ODY3NjQ1MzNcclxuICA2NzcyMDE4Njk3MTY5ODU0NDMxMjQxOTU3MjQwOTkxMzk1OTAwODk1MjMxMDA1ODgyMlxyXG4gIDk1NTQ4MjU1MzAwMjYzNTIwNzgxNTMyMjk2Nzk2MjQ5NDgxNjQxOTUzODY4MjE4Nzc0XHJcbiAgNzYwODUzMjcxMzIyODU3MjMxMTA0MjQ4MDM0NTYxMjQ4Njc2OTcwNjQ1MDc5OTUyMzZcclxuICAzNzc3NDI0MjUzNTQxMTI5MTY4NDI3Njg2NTUzODkyNjIwNTAyNDkxMDMyNjU3Mjk2N1xyXG4gIDIzNzAxOTEzMjc1NzI1Njc1Mjg1NjUzMjQ4MjU4MjY1NDYzMDkyMjA3MDU4NTk2NTIyXHJcbiAgMjk3OTg4NjAyNzIyNTgzMzE5MTMxMjYzNzUxNDczNDE5OTQ4ODk1MzQ3NjU3NDU1MDFcclxuICAxODQ5NTcwMTQ1NDg3OTI4ODk4NDg1NjgyNzcyNjA3NzcxMzcyMTQwMzc5ODg3OTcxNVxyXG4gIDM4Mjk4MjAzNzgzMDMxNDczNTI3NzIxNTgwMzQ4MTQ0NTEzNDkxMzczMjI2NjUxMzgxXHJcbiMgICAgICAgICAgICAgICAgICAgIF9fX19fICAgICAgICAgICAgICBfXyAgIC5fXyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuX19fXHJcbiMgICAgIF9fX19fX19fX18gICBfLyBfX19fXFxfIF9fICAgX19fXyB8ICB8IF98X198IF9fX18gICAgX19fXyAgICAgX19fX18gX19fX18gICAgIF9ffCBfL1xyXG4jICAgIC8gIF9fXy8gIF8gXFwgIFxcICAgX19cXCAgfCAgXFxfLyBfX19cXHwgIHwvIC8gIHwvICAgIFxcICAvIF9fX1xcICAgLyAgICAgXFxcXF9fICBcXCAgIC8gX18gfFxyXG4jICAgIFxcX19fICggIDxfPiApICB8ICB8IHwgIHwgIC9cXCAgXFxfX198ICAgIDx8ICB8ICAgfCAgXFwvIC9fLyAgPiB8ICBZIFkgIFxcLyBfXyBcXF8vIC9fLyB8XHJcbiMgICAvX19fXyAgPl9fX18vICAgfF9ffCB8X19fXy8gIFxcX19fICA+X198XyBcXF9ffF9fX3wgIC9cXF9fXyAgLyAgfF9ffF98ICAoX19fXyAgL1xcX19fXyB8XHJcbiMgICAgICAgIFxcLyAgICAgICAgICAgICAgICAgICAgICAgICAgXFwvICAgICBcXC8gICAgICAgXFwvL19fX19fLyAgICAgICAgIFxcLyAgICAgXFwvICAgICAgXFwvXHJcbiAgMzQ4Mjk1NDM4MjkxOTk5MTgxODAyNzg5MTY1MjI0MzEwMjczOTIyNTExMjI4Njk1MzlcclxuICA0MDk1Nzk1MzA2NjQwNTIzMjYzMjUzODA0NDEwMDA1OTY1NDkzOTE1OTg3OTU5MzYzNVxyXG4gIDI5NzQ2MTUyMTg1NTAyMzcxMzA3NjQyMjU1MTIxMTgzNjkzODAzNTgwMzg4NTg0OTAzXHJcbiAgNDE2OTgxMTYyMjIwNzI5NzcxODYxNTgyMzY2Nzg0MjQ2ODkxNTc5OTM1MzI5NjE5MjJcclxuICA2MjQ2Nzk1NzE5NDQwMTI2OTA0Mzg3NzEwNzI3NTA0ODEwMjM5MDg5NTUyMzU5NzQ1N1xyXG4gIDIzMTg5NzA2NzcyNTQ3OTE1MDYxNTA1NTA0OTUzOTIyOTc5NTMwOTAxMTI5OTY3NTE5XHJcbiAgODYxODgwODgyMjU4NzUzMTQ1Mjk1ODQwOTkyNTEyMDM4MjkwMDk0MDc3NzA3NzU2NzJcclxuICAxMTMwNjczOTcwODMwNDcyNDQ4MzgxNjUzMzg3MzUwMjM0MDg0NTY0NzA1ODA3NzMwOFxyXG4gIDgyOTU5MTc0NzY3MTQwMzYzMTk4MDA4MTg3MTI5MDExODc1NDkxMzEwNTQ3MTI2NTgxXHJcbiAgOTc2MjMzMzEwNDQ4MTgzODYyNjk1MTU0NTYzMzQ5MjYzNjY1NzI4OTc1NjM0MDA1MDBcclxuICA0Mjg0NjI4MDE4MzUxNzA3MDUyNzgzMTgzOTQyNTg4MjE0NTUyMTIyNzI1MTI1MDMyN1xyXG4gIDU1MTIxNjAzNTQ2OTgxMjAwNTgxNzYyMTY1MjEyODI3NjUyNzUxNjkxMjk2ODk3Nzg5XHJcbiAgMzIyMzgxOTU3MzQzMjkzMzk5NDY0Mzc1MDE5MDc4MzY5NDU3NjU4ODMzNTIzOTk4ODZcclxuICA3NTUwNjE2NDk2NTE4NDc3NTE4MDczODE2ODgzNzg2MTA5MTUyNzM1NzkyOTcwMTMzN1xyXG4gIDYyMTc3ODQyNzUyMTkyNjIzNDAxOTQyMzk5NjM5MTY4MDQ0OTgzOTkzMTczMzEyNzMxXHJcbiAgMzI5MjQxODU3MDcxNDczNDk1NjY5MTY2NzQ2ODc2MzQ2NjA5MTUwMzU5MTQ2Nzc1MDRcclxuIyAgIC5fXyAgICAgICAgICAuX18gICAgICBfX18uICAgICAgICAgICAgICAgICAgLl9fICAgX19cclxuIyAgIHwgIHxfXyAgX18gX198ICB8X18gICBcXF8gfF9fX19fX19fXyAgX19fXyAgIHxfX3wgfCAgfCBfXyBfX19fICAgX19fX19fICBfICBfX1xyXG4jICAgfCAgfCAgXFx8ICB8ICBcXCAgfCAgXFwgICB8IF9fIFxcXyAgX18gXFwvICBfIFxcICB8ICB8IHwgIHwvIC8vICAgIFxcIC8gIF8gXFwgXFwvIFxcLyAvXHJcbiMgICB8ICAgWSAgXFwgIHwgIC8gICBZICBcXCAgfCBcXF9cXCBcXCAgfCBcXCggIDxfPiApIHwgIHwgfCAgICA8fCAgIHwgICggIDxfPiApICAgICAvXHJcbiMgICB8X19ffCAgL19fX18vfF9fX3wgIC8gIHxfX18gIC9fX3wgICBcXF9fX18vICB8X198IHxfX3xfIFxcX19ffCAgL1xcX19fXy8gXFwvXFxfL1xyXG4jICAgICAgICBcXC8gICAgICAgICAgIFxcLyAgICAgICBcXC8gICAgICAgICAgICAgICAgICAgICAgICAgXFwvICAgIFxcL1xyXG4gIDk5NTE4NjcxNDMwMjM1MjE5NjI4ODk0ODkwMTAyNDIzMzI1MTE2OTEzNjE5NjI2NjIyXHJcbiAgNzMyNjc0NjA4MDA1OTE1NDc0NzE4MzA3OTgzOTI4Njg1MzUyMDY5NDY5NDQ1NDA3MjRcclxuICA3Njg0MTgyMjUyNDY3NDQxNzE2MTUxNDAzNjQyNzk4MjI3MzM0ODA1NTU1NjIxNDgxOFxyXG4gIDk3MTQyNjE3OTEwMzQyNTk4NjQ3MjA0NTE2ODkzOTg5NDIyMTc5ODI2MDg4MDc2ODUyXHJcbiAgODc3ODM2NDYxODI3OTkzNDYzMTM3Njc3NTQzMDc4MDkzNjMzMzMwMTg5ODI2NDIwOTBcclxuICAxMDg0ODgwMjUyMTY3NDY3MDg4MzIxNTEyMDE4NTg4MzU0MzIyMzgxMjg3Njk1Mjc4NlxyXG4gIDcxMzI5NjEyNDc0NzgyNDY0NTM4NjM2OTkzMDA5MDQ5MzEwMzYzNjE5NzYzODc4MDM5XHJcbiAgNjIxODQwNzM1NzIzOTk3OTQyMjM0MDYyMzUzOTM4MDgzMzk2NTEzMjc0MDgwMTExMTZcclxuICA2NjYyNzg5MTk4MTQ4ODA4Nzc5Nzk0MTg3Njg3NjE0NDIzMDAzMDk4NDQ5MDg1MTQxMVxyXG4gIDYwNjYxODI2MjkzNjgyODM2NzY0NzQ0Nzc5MjM5MTgwMzM1MTEwOTg5MDY5NzkwNzE0XHJcbiAgODU3ODY5NDQwODk1NTI5OTA2NTM2NDA0NDc0MjU1NzYwODM2NTk5NzY2NDU3OTUwOTZcclxuICA2NjAyNDM5NjQwOTkwNTM4OTYwNzEyMDE5ODIxOTk3NjA0NzU5OTQ5MDE5NzIzMDI5N1xyXG4gIDY0OTEzOTgyNjgwMDMyOTczMTU2MDM3MTIwMDQxMzc3OTAzNzg1NTY2MDg1MDg5MjUyXHJcbiMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuX18gICAgICAgICAuX18gICAgICAgICAgIC5fX1xyXG4jICAgIF9fXy5fXy4gX19fXyAgX18gX18gIF9fX19fIF9fX19fX18gICBfX19fICAgfCAgfCAgIF9fX18gfCAgfCAgIF9fX19fXyB8ICB8IF9fX19fICBfX18uX18uX19fX19fX19cclxuIyAgIDwgICB8ICB8LyAgXyBcXHwgIHwgIFxcIFxcX18gIFxcXFxfICBfXyBcXF8vIF9fIFxcICB8ICB8IF8vIF9fIFxcfCAgfCAgIFxcX19fXyBcXHwgIHwgXFxfXyAgXFw8ICAgfCAgfFxcX19fICAgL1xyXG4jICAgIFxcX19fICAoICA8Xz4gKSAgfCAgLyAgLyBfXyBcXHwgIHwgXFwvXFwgIF9fXy8gIHwgIHxfXFwgIF9fXy98ICB8X18gfCAgfF8+ID4gIHxfXy8gX18gXFxcXF9fXyAgfCAvICAgIC9cclxuIyAgICAvIF9fX198XFxfX19fL3xfX19fLyAgKF9fX18gIC9fX3wgICAgXFxfX18gID4gfF9fX18vXFxfX18gID5fX19fLyB8ICAgX18vfF9fX18oX19fXyAgLyBfX19ffC9fX19fXyBcXFxyXG4jICAgIFxcLyAgICAgICAgICAgICAgICAgICAgICAgIFxcLyAgICAgICAgICAgIFxcLyAgICAgICAgICAgIFxcLyAgICAgICB8X198ICAgICAgICAgICAgIFxcL1xcLyAgICAgICAgICAgXFwvXHJcblxyXG4gIDE2NzMwOTM5MzE5ODcyNzUwMjc1NDY4OTA2OTAzNzA3NTM5NDEzMDQyNjUyMzE1MDExXHJcbiAgOTQ4MDkzNzcyNDUwNDg3OTUxNTA5NTQxMDA5MjE2NDU4NjM3NTQ3MTA1OTg0MzY3OTFcclxuICA3ODYzOTE2NzAyMTE4NzQ5MjQzMTk5NTcwMDY0MTkxNzk2OTc3NzU5OTAyODMwMDY5OVxyXG4gIDE1MzY4NzEzNzExOTM2NjE0OTUyODExMzA1ODc2MzgwMjc4NDEwNzU0NDQ5NzMzMDc4XHJcbiAgNDA3ODk5MjMxMTU1MzU1NjI1NjExNDIzMjI0MjMyNTUwMzM2ODU0NDI0ODg5MTczNTNcclxuICA0NDg4OTkxMTUwMTQ0MDY0ODAyMDM2OTA2ODA2Mzk2MDY3MjMyMjE5MzIwNDE0OTUzNVxyXG4gIDQxNTAzMTI4ODgwMzM5NTM2MDUzMjk5MzQwMzY4MDA2OTc3NzEwNjUwNTY2NjMxOTU0XHJcbiAgODEyMzQ4ODA2NzMyMTAxNDY3MzkwNTg1Njg1NTc5MzQ1ODE0MDM2Mjc4MjI3MDMyODBcclxuICA4MjYxNjU3MDc3Mzk0ODMyNzU5MjIzMjg0NTk0MTcwNjUyNTA5NDUxMjMyNTIzMDYwOFxyXG4gIDIyOTE4ODAyMDU4Nzc3MzE5NzE5ODM5NDUwMTgwODg4MDcyNDI5NjYxOTgwODExMTk3XHJcbiAgNzcxNTg1NDI1MDIwMTY1NDUwOTA0MTMyNDU4MDk3ODY4ODI3Nzg5NDg3MjE4NTk2MTdcclxuICA3MjEwNzgzODQzNTA2OTE4NjE1NTQzNTY2Mjg4NDA2MjI1NzQ3MzY5MjI4NDUwOTUxNlxyXG4gIDIwODQ5NjAzOTgwMTM0MDAxNzIzOTMwNjcxNjY2ODIzNTU1MjQ1MjUyODA0NjA5NzIyXHJcbiAgNTM1MDM1MzQyMjY0NzI1MjQyNTA4NzQwNTQwNzU1OTE3ODk3ODEyNjQzMzAzMzE2OTBcclxuXVxyXG5cclxuXHJcbiMqKlxyXG4jKiBUb3AtbGV2ZWwgbmFtZXNwYWNlIHBhY2thZ2VzIHByb2N1cmVkIGZyb20gY29tcGFuaWVzIHRoYXQgdXNlIHRoZSBjb252ZW50aW9ucyBkZXNjcmliZWRcclxuIyogaW4gdGhlIEphdmEgTGFuZ3VhZ2UgU3BlY2lmaWNhdGlvbiwgdmVyc2lvbiA4LCBzZWN0aW9uIDYuMS4gUGxlYXNlIGNvbnN1bHQgdGhpcyBQREYgZm9yXHJcbiMqIGFkZGl0aW9uYWwgZGV0YWlsczpcclxuIypcclxuIyogaHR0cDovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2Uvc3BlY3MvamxzL3NlOC9qbHM4LnBkZlxyXG4jKlxyXG4jKiBAYXV0aG9yIGpkcmFnb1xyXG4jKlxyXG4jKiBMYXN0IGNoYW5nZSB0aW1lc3RhbXAgZm9yIHRoaXMgY29tbWVudDogRnJpZGF5LCBKdW5lIDIwLCAyMDE0IDEyOjIwOjQ3YW1cclxuIypcclxuY29tID1cclxuXHJcbiAgIyoqXHJcbiAgIyogTmFtZXNwYWNlIGNvbnRhaW5pbmcgcHJldHR5IG11Y2ggZXZlcnl0aGluZyBiYWRhc3MgaW4gdGhlIHVuaXZlcnNlLCBhbmQgaGFzIHZlcnkgbGl0dGxlXHJcbiAgIyogdG8gZG8gd2l0aCBKYXZhIGl0c2VsZi4gTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC5cclxuICAjKiBBZW5lYW4gZXQgdGVtcHVzIHVybmEuIERvbmVjIGZhdWNpYnVzIHVsbGFtY29ycGVyIHNhcGllbiBlZ2V0IGN1cnN1cy4gTG9yZW0gaXBzdW1cclxuICAjKiBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBWZXN0aWJ1bHVtIGFjY3Vtc2FuLCB0ZWxsdXMgYWMgc29kYWxlc1xyXG4gICMqIHBvc3VlcmUsIHNhcGllbiBsZWN0dXMgdGVtcHVzIHRvcnRvciwgbm9uIHBvcnR0aXRvciB0b3J0b3IgbGVjdHVzIHF1aXMgZG9sb3IuIE51bGxhbVxyXG4gICMqIHNvbGxpY2l0dWRpbiBzZWQgbWF1cmlzIHZpdGFlIHNhZ2l0dGlzLiBOdWxsYW0gdml2ZXJyYSwgZHVpIHNlZCBibGFuZGl0IGZyaW5naWxsYSxcclxuICAjKiBlcmF0IGVyYXQgdmVuZW5hdGlzIGVsaXQsIHZlbCB2aXZlcnJhIGVyYXQgZXN0IGFjIGxvcmVtLiBVdCB2aXRhZSBlcm9zIGRpY3R1bSxcclxuICAjKiBmcmluZ2lsbGEgbWFzc2EgcnV0cnVtLCBwZWxsZW50ZXNxdWUgZXJhdC4gRG9uZWMgbGFjaW5pYSwgZHVpIGV1IGhlbmRyZXJpdFxyXG4gICMqIHVsbGFtY29ycGVyLCBkaWFtIHVybmEgdmVzdGlidWx1bSBhdWd1ZSwgbm9uIHNjZWxlcmlzcXVlIHF1YW0gZXN0IGF0IHNhcGllbi5cclxuICAjKiBTdXNwZW5kaXNzZSBpZCBkdWkgdmVsIGxhY3VzIHZhcml1cyBzb2RhbGVzLiBVdCBwbGFjZXJhdCBudW5jIHF1aXMgb2RpbyBzY2VsZXJpc3F1ZSxcclxuICAjKiB2ZWwgZnJpbmdpbGxhIGxlY3R1cyBzdXNjaXBpdC4gRXRpYW0gZWdlc3RhcyBlbGVpZmVuZCBpcHN1bSwgZXQgc3VzY2lwaXQgdG9ydG9yLlxyXG4gICMqIFZpdmFtdXMgY29uc2VjdGV0dXIgaWQgcmlzdXMgZWdldCBwb3N1ZXJlLiBEdWlzIG1hbGVzdWFkYSBzb2xsaWNpdHVkaW4gZWxlbWVudHVtLlxyXG4gICMqIFN1c3BlbmRpc3NlIHBvdGVudGkuIE51bGxhbSBpYWN1bGlzIGF1Z3VlIGV1IGNvbnNlcXVhdCB0ZW1wdXMuIERvbmVjIHVsbGFtY29ycGVyXHJcbiAgIyogbGFjdXMgYWMgbWFnbmEgYWRpcGlzY2luZyBsb2JvcnRpcy5cclxuICAjKlxyXG4gICMqIEBhdXRob3IgamRyYWdvXHJcbiAgIypcclxuICAjKiBMYXN0IGNoYW5nZSB0aW1lc3RhbXAgZm9yIHRoaXMgY29tbWVudDogRnJpZGF5LCBKdW5lIDIwLCAyMDE0IDEyOjIzOjUwYW1cclxuICAjKlxyXG4gIGpkcmFnbzpcclxuXHJcblxyXG4gICAgIyoqXHJcbiAgICAjKlxyXG4gICAgIyogU2NyaXB0IC8gVGV4dCBvZiBBY3QgSSBIYW1sZXRcclxuICAgICMqXHJcbiAgICAjKiBBQ1QgSVxyXG4gICAgIyogU0NFTkUgSS4gRWxzaW5vcmUuIEEgcGxhdGZvcm0gYmVmb3JlIHRoZSBjYXN0bGUuXHJcbiAgICAjKlxyXG4gICAgIyogRlJBTkNJU0NPIGF0IGhpcyBwb3N0LiBFbnRlciB0byBoaW0gQkVSTkFSRE9cclxuICAgICMqIEJFUk5BUkRPXHJcbiAgICAjKiBXaG8ncyB0aGVyZT9cclxuICAgICMqXHJcbiAgICAjKiBGUkFOQ0lTQ09cclxuICAgICMqIE5heSwgYW5zd2VyIG1lOiBzdGFuZCwgYW5kIHVuZm9sZCB5b3Vyc2VsZi5cclxuICAgICMqXHJcbiAgICAjKiBCRVJOQVJET1xyXG4gICAgIyogTG9uZyBsaXZlIHRoZSBraW5nIVxyXG4gICAgIypcclxuICAgICMqIEZSQU5DSVNDT1xyXG4gICAgIyogQmVybmFyZG8/XHJcbiAgICAjKlxyXG4gICAgIyogQkVSTkFSRE9cclxuICAgICMqIEhlLlxyXG4gICAgIypcclxuICAgICMqIEZSQU5DSVNDT1xyXG4gICAgIyogWW91IGNvbWUgbW9zdCBjYXJlZnVsbHkgdXBvbiB5b3VyIGhvdXIuXHJcbiAgICAjKlxyXG4gICAgIyogQkVSTkFSRE9cclxuICAgICMqICdUaXMgbm93IHN0cnVjayB0d2VsdmU7IGdldCB0aGVlIHRvIGJlZCwgRnJhbmNpc2NvLlxyXG4gICAgIypcclxuICAgICMqIEZSQU5DSVNDT1xyXG4gICAgIyogRm9yIHRoaXMgcmVsaWVmIG11Y2ggdGhhbmtzOiAndGlzIGJpdHRlciBjb2xkLFxyXG4gICAgIyogQW5kIEkgYW0gc2ljayBhdCBoZWFydC5cclxuICAgICMqXHJcbiAgICAjKiBCRVJOQVJET1xyXG4gICAgIyogSGF2ZSB5b3UgaGFkIHF1aWV0IGd1YXJkP1xyXG4gICAgIypcclxuICAgICMqIEZSQU5DSVNDT1xyXG4gICAgIyogTm90IGEgbW91c2Ugc3RpcnJpbmcuXHJcbiAgICAjKlxyXG4gICAgIyogQkVSTkFSRE9cclxuICAgICMqIFdlbGwsIGdvb2QgbmlnaHQuXHJcbiAgICAjKiBJZiB5b3UgZG8gbWVldCBIb3JhdGlvIGFuZCBNYXJjZWxsdXMsXHJcbiAgICAjKiBUaGUgcml2YWxzIG9mIG15IHdhdGNoLCBiaWQgdGhlbSBtYWtlIGhhc3RlLlxyXG4gICAgIypcclxuICAgICMqIEZSQU5DSVNDT1xyXG4gICAgIyogSSB0aGluayBJIGhlYXIgdGhlbS4gU3RhbmQsIGhvISBXaG8ncyB0aGVyZT9cclxuICAgICMqXHJcbiAgICAjKiBFbnRlciBIT1JBVElPIGFuZCBNQVJDRUxMVVNcclxuICAgICMqXHJcbiAgICAjKiBIT1JBVElPXHJcbiAgICAjKiBGcmllbmRzIHRvIHRoaXMgZ3JvdW5kLlxyXG4gICAgIypcclxuICAgICMqIE1BUkNFTExVU1xyXG4gICAgIyogQW5kIGxpZWdlbWVuIHRvIHRoZSBEYW5lLlxyXG4gICAgIypcclxuICAgICMqIEZSQU5DSVNDT1xyXG4gICAgIyogR2l2ZSB5b3UgZ29vZCBuaWdodC5cclxuICAgICMqXHJcbiAgICAjKiBNQVJDRUxMVVNcclxuICAgICMqIE8sIGZhcmV3ZWxsLCBob25lc3Qgc29sZGllcjpcclxuICAgICMqIFdobyBoYXRoIHJlbGlldmVkIHlvdT9cclxuICAgICMqXHJcbiAgICAjKiBGUkFOQ0lTQ09cclxuICAgICMqIEJlcm5hcmRvIGhhcyBteSBwbGFjZS5cclxuICAgICMqIEdpdmUgeW91IGdvb2QgbmlnaHQuXHJcbiAgICAjKlxyXG4gICAgIyogRXhpdFxyXG4gICAgIypcclxuICAgICMqIE1BUkNFTExVU1xyXG4gICAgIyogSG9sbGEhIEJlcm5hcmRvIVxyXG4gICAgIypcclxuICAgICMqIEJFUk5BUkRPXHJcbiAgICAjKiBTYXksXHJcbiAgICAjKiBXaGF0LCBpcyBIb3JhdGlvIHRoZXJlP1xyXG4gICAgIypcclxuICAgICMqIEhPUkFUSU9cclxuICAgICMqIEEgcGllY2Ugb2YgaGltLlxyXG4gICAgIypcclxuICAgICMqIEJFUk5BUkRPXHJcbiAgICAjKiBXZWxjb21lLCBIb3JhdGlvOiB3ZWxjb21lLCBnb29kIE1hcmNlbGx1cy5cclxuICAgICMqXHJcbiAgICAjKiBNQVJDRUxMVVNcclxuICAgICMqIFdoYXQsIGhhcyB0aGlzIHRoaW5nIGFwcGVhcidkIGFnYWluIHRvLW5pZ2h0P1xyXG4gICAgIypcclxuICAgICMqIEJFUk5BUkRPXHJcbiAgICAjKiBJIGhhdmUgc2VlbiBub3RoaW5nLlxyXG4gICAgIypcclxuICAgICMqIE1BUkNFTExVU1xyXG4gICAgIyogSG9yYXRpbyBzYXlzICd0aXMgYnV0IG91ciBmYW50YXN5LFxyXG4gICAgIyogQW5kIHdpbGwgbm90IGxldCBiZWxpZWYgdGFrZSBob2xkIG9mIGhpbVxyXG4gICAgIyogVG91Y2hpbmcgdGhpcyBkcmVhZGVkIHNpZ2h0LCB0d2ljZSBzZWVuIG9mIHVzOlxyXG4gICAgIyogVGhlcmVmb3JlIEkgaGF2ZSBlbnRyZWF0ZWQgaGltIGFsb25nXHJcbiAgICAjKiBXaXRoIHVzIHRvIHdhdGNoIHRoZSBtaW51dGVzIG9mIHRoaXMgbmlnaHQ7XHJcbiAgICAjKiBUaGF0IGlmIGFnYWluIHRoaXMgYXBwYXJpdGlvbiBjb21lLFxyXG4gICAgIyogSGUgbWF5IGFwcHJvdmUgb3VyIGV5ZXMgYW5kIHNwZWFrIHRvIGl0LlxyXG4gICAgIypcclxuICAgICMqIEhPUkFUSU9cclxuICAgICMqIFR1c2gsIHR1c2gsICd0d2lsbCBub3QgYXBwZWFyLlxyXG4gICAgIypcclxuICAgICMqIEJFUk5BUkRPXHJcbiAgICAjKiBTaXQgZG93biBhd2hpbGU7XHJcbiAgICAjKiBBbmQgbGV0IHVzIG9uY2UgYWdhaW4gYXNzYWlsIHlvdXIgZWFycyxcclxuICAgICMqIFRoYXQgYXJlIHNvIGZvcnRpZmllZCBhZ2FpbnN0IG91ciBzdG9yeVxyXG4gICAgIyogV2hhdCB3ZSBoYXZlIHR3byBuaWdodHMgc2Vlbi5cclxuICAgICMqXHJcbiAgICAjKiBIT1JBVElPXHJcbiAgICAjKiBXZWxsLCBzaXQgd2UgZG93bixcclxuICAgICMqIEFuZCBsZXQgdXMgaGVhciBCZXJuYXJkbyBzcGVhayBvZiB0aGlzLlxyXG4gICAgIypcclxuICAgICMqIEJFUk5BUkRPXHJcbiAgICAjKiBMYXN0IG5pZ2h0IG9mIGFsbCxcclxuICAgICMqIFdoZW4geW9uZCBzYW1lIHN0YXIgdGhhdCdzIHdlc3R3YXJkIGZyb20gdGhlIHBvbGVcclxuICAgICMqIEhhZCBtYWRlIGhpcyBjb3Vyc2UgdG8gaWxsdW1lIHRoYXQgcGFydCBvZiBoZWF2ZW5cclxuICAgICMqIFdoZXJlIG5vdyBpdCBidXJucywgTWFyY2VsbHVzIGFuZCBteXNlbGYsXHJcbiAgICAjKiBUaGUgYmVsbCB0aGVuIGJlYXRpbmcgb25lLC0tXHJcbiAgICAjKlxyXG4gICAgIyogRW50ZXIgR2hvc3RcclxuICAgICMqXHJcbiAgICAjKiBNQVJDRUxMVVNcclxuICAgICMqIFBlYWNlLCBicmVhayB0aGVlIG9mZjsgbG9vaywgd2hlcmUgaXQgY29tZXMgYWdhaW4hXHJcbiAgICAjKlxyXG4gICAgIyogQkVSTkFSRE9cclxuICAgICMqIEluIHRoZSBzYW1lIGZpZ3VyZSwgbGlrZSB0aGUga2luZyB0aGF0J3MgZGVhZC5cclxuICAgICMqXHJcbiAgICAjKiBNQVJDRUxMVVNcclxuICAgICMqIFRob3UgYXJ0IGEgc2Nob2xhcjsgc3BlYWsgdG8gaXQsIEhvcmF0aW8uXHJcbiAgICAjKlxyXG4gICAgIyogQkVSTkFSRE9cclxuICAgICMqIExvb2tzIGl0IG5vdCBsaWtlIHRoZSBraW5nPyBtYXJrIGl0LCBIb3JhdGlvLlxyXG4gICAgIypcclxuICAgICMqIEhPUkFUSU9cclxuICAgICMqIE1vc3QgbGlrZTogaXQgaGFycm93cyBtZSB3aXRoIGZlYXIgYW5kIHdvbmRlci5cclxuICAgICMqXHJcbiAgICAjKiBCRVJOQVJET1xyXG4gICAgIyogSXQgd291bGQgYmUgc3Bva2UgdG8uXHJcbiAgICAjKlxyXG4gICAgIyogTUFSQ0VMTFVTXHJcbiAgICAjKiBRdWVzdGlvbiBpdCwgSG9yYXRpby5cclxuICAgICMqXHJcbiAgICAjKiBIT1JBVElPXHJcbiAgICAjKiBXaGF0IGFydCB0aG91IHRoYXQgdXN1cnAnc3QgdGhpcyB0aW1lIG9mIG5pZ2h0LFxyXG4gICAgIyogVG9nZXRoZXIgd2l0aCB0aGF0IGZhaXIgYW5kIHdhcmxpa2UgZm9ybVxyXG4gICAgIyogSW4gd2hpY2ggdGhlIG1hamVzdHkgb2YgYnVyaWVkIERlbm1hcmtcclxuICAgICMqIERpZCBzb21ldGltZXMgbWFyY2g/IGJ5IGhlYXZlbiBJIGNoYXJnZSB0aGVlLCBzcGVhayFcclxuICAgICMqXHJcbiAgICAjKiBNQVJDRUxMVVNcclxuICAgICMqIEl0IGlzIG9mZmVuZGVkLlxyXG4gICAgIypcclxuICAgICMqIEJFUk5BUkRPXHJcbiAgICAjKiBTZWUsIGl0IHN0YWxrcyBhd2F5IVxyXG4gICAgIypcclxuICAgICMqIEhPUkFUSU9cclxuICAgICMqIFN0YXkhIHNwZWFrLCBzcGVhayEgSSBjaGFyZ2UgdGhlZSwgc3BlYWshXHJcbiAgICAjKlxyXG4gICAgIyogRXhpdCBHaG9zdFxyXG4gICAgIypcclxuICAgICMqIE1BUkNFTExVU1xyXG4gICAgIyogJ1RpcyBnb25lLCBhbmQgd2lsbCBub3QgYW5zd2VyLlxyXG4gICAgIypcclxuICAgICMqIEJFUk5BUkRPXHJcbiAgICAjKiBIb3cgbm93LCBIb3JhdGlvISB5b3UgdHJlbWJsZSBhbmQgbG9vayBwYWxlOlxyXG4gICAgIyogSXMgbm90IHRoaXMgc29tZXRoaW5nIG1vcmUgdGhhbiBmYW50YXN5P1xyXG4gICAgIyogV2hhdCB0aGluayB5b3Ugb24ndD9cclxuICAgICMqXHJcbiAgICAjKiBIT1JBVElPXHJcbiAgICAjKiBCZWZvcmUgbXkgR29kLCBJIG1pZ2h0IG5vdCB0aGlzIGJlbGlldmVcclxuICAgICMqIFdpdGhvdXQgdGhlIHNlbnNpYmxlIGFuZCB0cnVlIGF2b3VjaFxyXG4gICAgIyogT2YgbWluZSBvd24gZXllcy5cclxuICAgICMqXHJcbiAgICAjKiBNQVJDRUxMVVNcclxuICAgICMqIElzIGl0IG5vdCBsaWtlIHRoZSBraW5nP1xyXG4gICAgIypcclxuICAgICMqIEhPUkFUSU9cclxuICAgICMqIEFzIHRob3UgYXJ0IHRvIHRoeXNlbGY6XHJcbiAgICAjKiBTdWNoIHdhcyB0aGUgdmVyeSBhcm1vdXIgaGUgaGFkIG9uXHJcbiAgICAjKiBXaGVuIGhlIHRoZSBhbWJpdGlvdXMgTm9yd2F5IGNvbWJhdGVkO1xyXG4gICAgIyogU28gZnJvd24nZCBoZSBvbmNlLCB3aGVuLCBpbiBhbiBhbmdyeSBwYXJsZSxcclxuICAgICMqIEhlIHNtb3RlIHRoZSBzbGVkZGVkIFBvbGFja3Mgb24gdGhlIGljZS5cclxuICAgICMqICdUaXMgc3RyYW5nZS5cclxuICAgICMqXHJcbiAgICAjKiBNQVJDRUxMVVNcclxuICAgICMqIFRodXMgdHdpY2UgYmVmb3JlLCBhbmQganVtcCBhdCB0aGlzIGRlYWQgaG91cixcclxuICAgICMqIFdpdGggbWFydGlhbCBzdGFsayBoYXRoIGhlIGdvbmUgYnkgb3VyIHdhdGNoLlxyXG4gICAgIypcclxuICAgICMqIEhPUkFUSU9cclxuICAgICMqIEluIHdoYXQgcGFydGljdWxhciB0aG91Z2h0IHRvIHdvcmsgSSBrbm93IG5vdDtcclxuICAgICMqIEJ1dCBpbiB0aGUgZ3Jvc3MgYW5kIHNjb3BlIG9mIG15IG9waW5pb24sXHJcbiAgICAjKiBUaGlzIGJvZGVzIHNvbWUgc3RyYW5nZSBlcnVwdGlvbiB0byBvdXIgc3RhdGUuXHJcbiAgICAjKlxyXG4gICAgIyogTUFSQ0VMTFVTXHJcbiAgICAjKiBHb29kIG5vdywgc2l0IGRvd24sIGFuZCB0ZWxsIG1lLCBoZSB0aGF0IGtub3dzLFxyXG4gICAgIyogV2h5IHRoaXMgc2FtZSBzdHJpY3QgYW5kIG1vc3Qgb2JzZXJ2YW50IHdhdGNoXHJcbiAgICAjKiBTbyBuaWdodGx5IHRvaWxzIHRoZSBzdWJqZWN0IG9mIHRoZSBsYW5kLFxyXG4gICAgIyogQW5kIHdoeSBzdWNoIGRhaWx5IGNhc3Qgb2YgYnJhemVuIGNhbm5vbixcclxuICAgICMqIEFuZCBmb3JlaWduIG1hcnQgZm9yIGltcGxlbWVudHMgb2Ygd2FyO1xyXG4gICAgIyogV2h5IHN1Y2ggaW1wcmVzcyBvZiBzaGlwd3JpZ2h0cywgd2hvc2Ugc29yZSB0YXNrXHJcbiAgICAjKiBEb2VzIG5vdCBkaXZpZGUgdGhlIFN1bmRheSBmcm9tIHRoZSB3ZWVrO1xyXG4gICAgIyogV2hhdCBtaWdodCBiZSB0b3dhcmQsIHRoYXQgdGhpcyBzd2VhdHkgaGFzdGVcclxuICAgICMqIERvdGggbWFrZSB0aGUgbmlnaHQgam9pbnQtbGFib3VyZXIgd2l0aCB0aGUgZGF5OlxyXG4gICAgIyogV2hvIGlzJ3QgdGhhdCBjYW4gaW5mb3JtIG1lP1xyXG4gICAgIypcclxuICAgICMqIEhPUkFUSU9cclxuICAgICMqIFRoYXQgY2FuIEk7XHJcbiAgICAjKiBBdCBsZWFzdCwgdGhlIHdoaXNwZXIgZ29lcyBzby4gT3VyIGxhc3Qga2luZyxcclxuICAgICMqIFdob3NlIGltYWdlIGV2ZW4gYnV0IG5vdyBhcHBlYXInZCB0byB1cyxcclxuICAgICMqIFdhcywgYXMgeW91IGtub3csIGJ5IEZvcnRpbmJyYXMgb2YgTm9yd2F5LFxyXG4gICAgIyogVGhlcmV0byBwcmljaydkIG9uIGJ5IGEgbW9zdCBlbXVsYXRlIHByaWRlLFxyXG4gICAgIyogRGFyZWQgdG8gdGhlIGNvbWJhdDsgaW4gd2hpY2ggb3VyIHZhbGlhbnQgSGFtbGV0LS1cclxuICAgICMqIEZvciBzbyB0aGlzIHNpZGUgb2Ygb3VyIGtub3duIHdvcmxkIGVzdGVlbSdkIGhpbS0tXHJcbiAgICAjKiBEaWQgc2xheSB0aGlzIEZvcnRpbmJyYXM7IHdobyBieSBhIHNlYWwnZCBjb21wYWN0LFxyXG4gICAgIyogV2VsbCByYXRpZmllZCBieSBsYXcgYW5kIGhlcmFsZHJ5LFxyXG4gICAgIyogRGlkIGZvcmZlaXQsIHdpdGggaGlzIGxpZmUsIGFsbCB0aG9zZSBoaXMgbGFuZHNcclxuICAgICMqIFdoaWNoIGhlIHN0b29kIHNlaXplZCBvZiwgdG8gdGhlIGNvbnF1ZXJvcjpcclxuICAgICMqIEFnYWluc3QgdGhlIHdoaWNoLCBhIG1vaWV0eSBjb21wZXRlbnRcclxuICAgICMqIFdhcyBnYWdlZCBieSBvdXIga2luZzsgd2hpY2ggaGFkIHJldHVybidkXHJcbiAgICAjKiBUbyB0aGUgaW5oZXJpdGFuY2Ugb2YgRm9ydGluYnJhcyxcclxuICAgICMqIEhhZCBoZSBiZWVuIHZhbnF1aXNoZXI7IGFzLCBieSB0aGUgc2FtZSBjb3ZlbmFudCxcclxuICAgICMqIEFuZCBjYXJyaWFnZSBvZiB0aGUgYXJ0aWNsZSBkZXNpZ24nZCxcclxuICAgICMqIEhpcyBmZWxsIHRvIEhhbWxldC4gTm93LCBzaXIsIHlvdW5nIEZvcnRpbmJyYXMsXHJcbiAgICAjKiBPZiB1bmltcHJvdmVkIG1ldHRsZSBob3QgYW5kIGZ1bGwsXHJcbiAgICAjKiBIYXRoIGluIHRoZSBza2lydHMgb2YgTm9yd2F5IGhlcmUgYW5kIHRoZXJlXHJcbiAgICAjKiBTaGFyaydkIHVwIGEgbGlzdCBvZiBsYXdsZXNzIHJlc29sdXRlcyxcclxuICAgICMqIEZvciBmb29kIGFuZCBkaWV0LCB0byBzb21lIGVudGVycHJpc2VcclxuICAgICMqIFRoYXQgaGF0aCBhIHN0b21hY2ggaW4ndDsgd2hpY2ggaXMgbm8gb3RoZXItLVxyXG4gICAgIyogQXMgaXQgZG90aCB3ZWxsIGFwcGVhciB1bnRvIG91ciBzdGF0ZS0tXHJcbiAgICAjKiBCdXQgdG8gcmVjb3ZlciBvZiB1cywgYnkgc3Ryb25nIGhhbmRcclxuICAgICMqIEFuZCB0ZXJtcyBjb21wdWxzYXRvcnksIHRob3NlIGZvcmVzYWlkIGxhbmRzXHJcbiAgICAjKiBTbyBieSBoaXMgZmF0aGVyIGxvc3Q6IGFuZCB0aGlzLCBJIHRha2UgaXQsXHJcbiAgICAjKiBJcyB0aGUgbWFpbiBtb3RpdmUgb2Ygb3VyIHByZXBhcmF0aW9ucyxcclxuICAgICMqIFRoZSBzb3VyY2Ugb2YgdGhpcyBvdXIgd2F0Y2ggYW5kIHRoZSBjaGllZiBoZWFkXHJcbiAgICAjKiBPZiB0aGlzIHBvc3QtaGFzdGUgYW5kIHJvbWFnZSBpbiB0aGUgbGFuZC5cclxuICAgICMqXHJcbiAgICAjKiBCRVJOQVJET1xyXG4gICAgIyogSSB0aGluayBpdCBiZSBubyBvdGhlciBidXQgZSdlbiBzbzpcclxuICAgICMqIFdlbGwgbWF5IGl0IHNvcnQgdGhhdCB0aGlzIHBvcnRlbnRvdXMgZmlndXJlXHJcbiAgICAjKiBDb21lcyBhcm1lZCB0aHJvdWdoIG91ciB3YXRjaDsgc28gbGlrZSB0aGUga2luZ1xyXG4gICAgIyogVGhhdCB3YXMgYW5kIGlzIHRoZSBxdWVzdGlvbiBvZiB0aGVzZSB3YXJzLlxyXG4gICAgIypcclxuICAgICMqIEhPUkFUSU9cclxuICAgICMqIEEgbW90ZSBpdCBpcyB0byB0cm91YmxlIHRoZSBtaW5kJ3MgZXllLlxyXG4gICAgIyogSW4gdGhlIG1vc3QgaGlnaCBhbmQgcGFsbXkgc3RhdGUgb2YgUm9tZSxcclxuICAgICMqIEEgbGl0dGxlIGVyZSB0aGUgbWlnaHRpZXN0IEp1bGl1cyBmZWxsLFxyXG4gICAgIyogVGhlIGdyYXZlcyBzdG9vZCB0ZW5hbnRsZXNzIGFuZCB0aGUgc2hlZXRlZCBkZWFkXHJcbiAgICAjKiBEaWQgc3F1ZWFrIGFuZCBnaWJiZXIgaW4gdGhlIFJvbWFuIHN0cmVldHM6XHJcbiAgICAjKiBBcyBzdGFycyB3aXRoIHRyYWlucyBvZiBmaXJlIGFuZCBkZXdzIG9mIGJsb29kLFxyXG4gICAgIyogRGlzYXN0ZXJzIGluIHRoZSBzdW47IGFuZCB0aGUgbW9pc3Qgc3RhclxyXG4gICAgIyogVXBvbiB3aG9zZSBpbmZsdWVuY2UgTmVwdHVuZSdzIGVtcGlyZSBzdGFuZHNcclxuICAgICMqIFdhcyBzaWNrIGFsbW9zdCB0byBkb29tc2RheSB3aXRoIGVjbGlwc2U6XHJcbiAgICAjKiBBbmQgZXZlbiB0aGUgbGlrZSBwcmVjdXJzZSBvZiBmaWVyY2UgZXZlbnRzLFxyXG4gICAgIyogQXMgaGFyYmluZ2VycyBwcmVjZWRpbmcgc3RpbGwgdGhlIGZhdGVzXHJcbiAgICAjKiBBbmQgcHJvbG9ndWUgdG8gdGhlIG9tZW4gY29taW5nIG9uLFxyXG4gICAgIyogSGF2ZSBoZWF2ZW4gYW5kIGVhcnRoIHRvZ2V0aGVyIGRlbW9uc3RyYXRlZFxyXG4gICAgIyogVW50byBvdXIgY2xpbWF0dXJlcyBhbmQgY291bnRyeW1lbi4tLVxyXG4gICAgIyogQnV0IHNvZnQsIGJlaG9sZCEgbG8sIHdoZXJlIGl0IGNvbWVzIGFnYWluIVxyXG4gICAgIypcclxuICAgICMqIFJlLWVudGVyIEdob3N0XHJcbiAgICAjKlxyXG4gICAgIyogSSdsbCBjcm9zcyBpdCwgdGhvdWdoIGl0IGJsYXN0IG1lLiBTdGF5LCBpbGx1c2lvbiFcclxuICAgICMqIElmIHRob3UgaGFzdCBhbnkgc291bmQsIG9yIHVzZSBvZiB2b2ljZSxcclxuICAgICMqIFNwZWFrIHRvIG1lOlxyXG4gICAgIyogSWYgdGhlcmUgYmUgYW55IGdvb2QgdGhpbmcgdG8gYmUgZG9uZSxcclxuICAgICMqIFRoYXQgbWF5IHRvIHRoZWUgZG8gZWFzZSBhbmQgZ3JhY2UgdG8gbWUsXHJcbiAgICAjKiBTcGVhayB0byBtZTpcclxuICAgICMqXHJcbiAgICAjKiBDb2NrIGNyb3dzXHJcbiAgICAjKlxyXG4gICAgIyogSWYgdGhvdSBhcnQgcHJpdnkgdG8gdGh5IGNvdW50cnkncyBmYXRlLFxyXG4gICAgIyogV2hpY2gsIGhhcHBpbHksIGZvcmVrbm93aW5nIG1heSBhdm9pZCwgTywgc3BlYWshXHJcbiAgICAjKiBPciBpZiB0aG91IGhhc3QgdXBob2FyZGVkIGluIHRoeSBsaWZlXHJcbiAgICAjKiBFeHRvcnRlZCB0cmVhc3VyZSBpbiB0aGUgd29tYiBvZiBlYXJ0aCxcclxuICAgICMqIEZvciB3aGljaCwgdGhleSBzYXksIHlvdSBzcGlyaXRzIG9mdCB3YWxrIGluIGRlYXRoLFxyXG4gICAgIyogU3BlYWsgb2YgaXQ6IHN0YXksIGFuZCBzcGVhayEgU3RvcCBpdCwgTWFyY2VsbHVzLlxyXG4gICAgIypcclxuICAgICMqIE1BUkNFTExVU1xyXG4gICAgIyogU2hhbGwgSSBzdHJpa2UgYXQgaXQgd2l0aCBteSBwYXJ0aXNhbj9cclxuICAgICMqXHJcbiAgICAjKiBIT1JBVElPXHJcbiAgICAjKiBEbywgaWYgaXQgd2lsbCBub3Qgc3RhbmQuXHJcbiAgICAjKlxyXG4gICAgIyogQkVSTkFSRE9cclxuICAgICMqICdUaXMgaGVyZSFcclxuICAgICMqXHJcbiAgICAjKiBIT1JBVElPXHJcbiAgICAjKiAnVGlzIGhlcmUhXHJcbiAgICAjKlxyXG4gICAgIyogTUFSQ0VMTFVTXHJcbiAgICAjKiAnVGlzIGdvbmUhXHJcbiAgICAjKlxyXG4gICAgIyogRXhpdCBHaG9zdFxyXG4gICAgIypcclxuICAgICMqIFdlIGRvIGl0IHdyb25nLCBiZWluZyBzbyBtYWplc3RpY2FsLFxyXG4gICAgIyogVG8gb2ZmZXIgaXQgdGhlIHNob3cgb2YgdmlvbGVuY2U7XHJcbiAgICAjKiBGb3IgaXQgaXMsIGFzIHRoZSBhaXIsIGludnVsbmVyYWJsZSxcclxuICAgICMqIEFuZCBvdXIgdmFpbiBibG93cyBtYWxpY2lvdXMgbW9ja2VyeS5cclxuICAgICMqXHJcbiAgICAjKiBCRVJOQVJET1xyXG4gICAgIyogSXQgd2FzIGFib3V0IHRvIHNwZWFrLCB3aGVuIHRoZSBjb2NrIGNyZXcuXHJcbiAgICAjKlxyXG4gICAgIyogSE9SQVRJT1xyXG4gICAgIyogQW5kIHRoZW4gaXQgc3RhcnRlZCBsaWtlIGEgZ3VpbHR5IHRoaW5nXHJcbiAgICAjKiBVcG9uIGEgZmVhcmZ1bCBzdW1tb25zLiBJIGhhdmUgaGVhcmQsXHJcbiAgICAjKiBUaGUgY29jaywgdGhhdCBpcyB0aGUgdHJ1bXBldCB0byB0aGUgbW9ybixcclxuICAgICMqIERvdGggd2l0aCBoaXMgbG9mdHkgYW5kIHNocmlsbC1zb3VuZGluZyB0aHJvYXRcclxuICAgICMqIEF3YWtlIHRoZSBnb2Qgb2YgZGF5OyBhbmQsIGF0IGhpcyB3YXJuaW5nLFxyXG4gICAgIyogV2hldGhlciBpbiBzZWEgb3IgZmlyZSwgaW4gZWFydGggb3IgYWlyLFxyXG4gICAgIyogVGhlIGV4dHJhdmFnYW50IGFuZCBlcnJpbmcgc3Bpcml0IGhpZXNcclxuICAgICMqIFRvIGhpcyBjb25maW5lOiBhbmQgb2YgdGhlIHRydXRoIGhlcmVpblxyXG4gICAgIyogVGhpcyBwcmVzZW50IG9iamVjdCBtYWRlIHByb2JhdGlvbi5cclxuICAgICMqXHJcbiAgICAjKiBNQVJDRUxMVVNcclxuICAgICMqIEl0IGZhZGVkIG9uIHRoZSBjcm93aW5nIG9mIHRoZSBjb2NrLlxyXG4gICAgIyogU29tZSBzYXkgdGhhdCBldmVyICdnYWluc3QgdGhhdCBzZWFzb24gY29tZXNcclxuICAgICMqIFdoZXJlaW4gb3VyIFNhdmlvdXIncyBiaXJ0aCBpcyBjZWxlYnJhdGVkLFxyXG4gICAgIyogVGhlIGJpcmQgb2YgZGF3bmluZyBzaW5nZXRoIGFsbCBuaWdodCBsb25nOlxyXG4gICAgIyogQW5kIHRoZW4sIHRoZXkgc2F5LCBubyBzcGlyaXQgZGFyZXMgc3RpciBhYnJvYWQ7XHJcbiAgICAjKiBUaGUgbmlnaHRzIGFyZSB3aG9sZXNvbWU7IHRoZW4gbm8gcGxhbmV0cyBzdHJpa2UsXHJcbiAgICAjKiBObyBmYWlyeSB0YWtlcywgbm9yIHdpdGNoIGhhdGggcG93ZXIgdG8gY2hhcm0sXHJcbiAgICAjKiBTbyBoYWxsb3cnZCBhbmQgc28gZ3JhY2lvdXMgaXMgdGhlIHRpbWUuXHJcbiAgICAjKlxyXG4gICAgIyogSE9SQVRJT1xyXG4gICAgIyogU28gaGF2ZSBJIGhlYXJkIGFuZCBkbyBpbiBwYXJ0IGJlbGlldmUgaXQuXHJcbiAgICAjKiBCdXQsIGxvb2ssIHRoZSBtb3JuLCBpbiBydXNzZXQgbWFudGxlIGNsYWQsXHJcbiAgICAjKiBXYWxrcyBvJ2VyIHRoZSBkZXcgb2YgeW9uIGhpZ2ggZWFzdHdhcmQgaGlsbDpcclxuICAgICMqIEJyZWFrIHdlIG91ciB3YXRjaCB1cDsgYW5kIGJ5IG15IGFkdmljZSxcclxuICAgICMqIExldCB1cyBpbXBhcnQgd2hhdCB3ZSBoYXZlIHNlZW4gdG8tbmlnaHRcclxuICAgICMqIFVudG8geW91bmcgSGFtbGV0OyBmb3IsIHVwb24gbXkgbGlmZSxcclxuICAgICMqIFRoaXMgc3Bpcml0LCBkdW1iIHRvIHVzLCB3aWxsIHNwZWFrIHRvIGhpbS5cclxuICAgICMqIERvIHlvdSBjb25zZW50IHdlIHNoYWxsIGFjcXVhaW50IGhpbSB3aXRoIGl0LFxyXG4gICAgIyogQXMgbmVlZGZ1bCBpbiBvdXIgbG92ZXMsIGZpdHRpbmcgb3VyIGR1dHk/XHJcbiAgICAjKlxyXG4gICAgIyogTUFSQ0VMTFVTXHJcbiAgICAjKiBMZXQncyBkbyd0LCBJIHByYXk7IGFuZCBJIHRoaXMgbW9ybmluZyBrbm93XHJcbiAgICAjKiBXaGVyZSB3ZSBzaGFsbCBmaW5kIGhpbSBtb3N0IGNvbnZlbmllbnRseS5cclxuICAgICMqXHJcbiAgICAjKiBFeGV1bnRcclxuICAgICMqXHJcbiAgICAjKiBAYXV0aG9yIGJzaGFrZXNwZWFyZVxyXG4gICAgIypcclxuICAgICMqIExhc3QgY2hhbmdlIHRpbWVzdGFtcCBmb3IgdGhpcyBjb21tZW50OiBNb25kYXksIFNlcHRlbWJlciAxMywgMTU5OSAwMzoxODoyMmFtXHJcbiAgICAjKlxyXG4gICAgZXVsZXI6XHJcblxyXG4gICAgICAjKipcclxuICAgICAgIyogTmFtZXNwYWNlIGZvciBhbGwgcmVhbGx5IGltcG9ydGFudCBlbnVtcyB0aGF0IGFyZSBpbXBvcnRhbnQuXHJcbiAgICAgICMqIEFsc28gY29udGFpbnMgYnV6endvcmRzLlxyXG4gICAgICAjKlxyXG4gICAgICAjKiBAYXV0aG9yIGpkcmFnb1xyXG4gICAgICAjKlxyXG4gICAgICAjKiBMYXN0IGNoYW5nZSB0aW1lc3RhbXAgZm9yIHRoaXMgY29tbWVudDogRnJpZGF5LCBKdW5lIDIwLCAyMDE0IDEyOjI5OjAyYW1cclxuICAgICAgIypcclxuICAgICAgdHlwZXM6XHJcbiAgICAgICAgc291bmRzTGlrZUZvb2RzOlxyXG4gICAgICAgICAgR1VBVkE6ICAgXCJHdWF2YVwiXHJcbiAgICAgICAgICBHVUlDRTogICBcIkd1aWNlXCJcclxuICAgICAgICAgIE1PQ0tJVE86IFwiTW9ja2l0b1wiXHJcblxyXG4gICAgICAjKipcclxuICAgICAgIyogTmFtZXNwYWNlIGZvciBtYXRoLiBGb3IgZGV0YWlscywgcmVmZXIgdG8gdGhlc2UgcmVmZXJlbmNlczpcclxuICAgICAgIypcclxuICAgICAgIyogVGhlIE1hdGggRm9ydW0gYXQgRHJleGVsXHJcbiAgICAgICMqICAgICBodHRwOi8vbWF0aGZvcnVtLm9yZy9cclxuICAgICAgIyogICAgIGdyYWRlcyBLLTIgaHR0cDovL21hdGhmb3J1bS5vcmcvdGVhY2hlcnMvZWxlbS9rLTIvXHJcbiAgICAgICMqICAgICBncmFkZXMgMy01IGh0dHA6Ly9tYXRoZm9ydW0ub3JnL3RlYWNoZXJzL2VsZW0vMy01L1xyXG4gICAgICAjKiAgICAgbWlkZGxlIHNjaG9vbCBodHRwOi8vbWF0aGZvcnVtLm9yZy90ZWFjaGVycy9taWRkbGUvXHJcbiAgICAgICMqICAgICBoaWdoIHNjaG9vbCBodHRwOi8vbWF0aGZvcnVtLm9yZy90ZWFjaGVycy9oaWdoL1xyXG4gICAgICAjKlxyXG4gICAgICAjKiBJbGx1bWluYXRpb25zIGZyb20gTkNUTVxyXG4gICAgICAjKiAgICAgaHR0cDovL2lsbHVtaW5hdGlvbnMubmN0bS5vcmcvXHJcbiAgICAgICMqXHJcbiAgICAgICMqIEFBQSBNYXRoIC0gaHR0cDovL3d3dy5hYWFtYXRoLmNvbS9CL2FhYW1hdGhpLmh0bVxyXG4gICAgICAjKlxyXG4gICAgICAjKiBBSU1TXHJcbiAgICAgICMqICAgICBodHRwOi8vd3d3LmFpbXNlZHUub3JnXHJcbiAgICAgICMqXHJcbiAgICAgICMqIENTSTogTWF0aGVtYXRpY3MgLSBodHRwczovL3d3dy5jZWlzbWMuZ2F0ZWNoLmVkdS9jc2kvXHJcbiAgICAgICMqXHJcbiAgICAgICMqIEV2ZXJ5ZGF5IE1hdGhlbWF0aWNzIENlbnRlciBmb3IgZWR1Y2F0b3JzLCBwYXJlbnRzLCBhbmQgc3R1ZGVudHNcclxuICAgICAgIyogICAgIGh0dHA6Ly9ldmVyeWRheW1hdGgudWNoaWNhZ28uZWR1L1xyXG4gICAgICAjKlxyXG4gICAgICAjKiAgICAgRWR1Y2F0b3JzIC0gQWJvdXQgRU0sIHNhbXBsZSBsZXNzb25zLCB3ZWIgcmVzb3VyY2VzXHJcbiAgICAgICMqICAgICBodHRwOi8vZXZlcnlkYXltYXRoLnVjaGljYWdvLmVkdS90ZWFjaGVycy9cclxuICAgICAgIypcclxuICAgICAgIyogICAgIFBhcmVudHMgLSBBYm91dCBFTSwgZ2FtZXMsIGdsb3NzYXJ5LCByZXNvdXJjZXNcclxuICAgICAgIyogICAgIGh0dHA6Ly9ldmVyeWRheW1hdGgudWNoaWNhZ28uZWR1L3BhcmVudHMvXHJcbiAgICAgICMqXHJcbiAgICAgICMqICAgICBTdHVkZW50cyAtIGh0dHA6Ly9ldmVyeWRheW1hdGgudWNoaWNhZ28uZWR1L3BhcmVudHMvc3R1ZGVudC1saW5rcy9cclxuICAgICAgIypcclxuICAgICAgIyogICAgIE1hdGggR2FtZXMgb25saW5lIC1cclxuICAgICAgIyogICAgIGh0dHA6Ly93d3cuaG9sbGlzLmsxMi5uaC51cy9odWVzMDcwOC9tYXRoX2dhbWVzLmh0bVxyXG4gICAgICAjKlxyXG4gICAgICAjKiBFeHBsb3JlciAtIGxpbmtzIHRvIG9ubGluZSBsZXNzb24gcGxhbnMgYW5kIGFjdGl2aXRpZXNcclxuICAgICAgIyogICAgaHR0cDovL3RyYWNrc3Rhci40dGVhY2hlcnMub3JnL3RyYWNrc3Rhci9pbmRleC5qc3BcclxuICAgICAgIypcclxuICAgICAgIyogRnVuIEJyYWluIE1hdGggR2FtZXMgZm9yIEdyYWRlcyAxLTVcclxuICAgICAgIyogICAgaHR0cDovL3d3dy5mdW5icmFpbi5jb20vbnVtYmVycy5odG1sXHJcbiAgICAgICMqXHJcbiAgICAgICMqIEdlb21ldHJ5IENlbnRlciAtIGh0dHA6Ly93d3cuZ2VvbS51aXVjLmVkdS9cclxuICAgICAgIyogICAgIFByb2plY3QgdG8gdHJ5IC0gQnVpbGRpbmcgQW4gSWNvc2FoZWRyb25cclxuICAgICAgIypcclxuICAgICAgIyogSW50ZXJuZXQgTWF0aGVtYXRpY3MgTGlicmFyeVxyXG4gICAgICAjKiAgICBodHRwOi8vbWF0aGZvcnVtLm9yZy9saWJyYXJ5L1xyXG4gICAgICAjKlxyXG4gICAgICAjKiBUaGUgSm95IG9mIFBpIG9yIGxpbmtzIHRvIHBpIHBhZ2VzXHJcbiAgICAgICMqICBodHRwOi8vd3d3LmpveW9mcGkuY29tL3BpbGlua3MuaHRtbFxyXG4gICAgICAjKlxyXG4gICAgICAjKiBLYXRoeSBTY2hyb2NrJ3MgTWF0aCBMaW5rcyAtXHJcbiAgICAgICMqICBodHRwOi8vc2Nob29sLmRpc2NvdmVyeWVkdWNhdGlvbi5jb20vc2Nocm9ja2d1aWRlL21hdGguaHRtbFxyXG4gICAgICAjKlxyXG4gICAgICAjKiBMb3MgQWxhbW9zIE1lZ2EtTWF0aFxyXG4gICAgICAjKiAgaHR0cDovL3d3dy5jY3MzLmxhbmwuZ292L21lZ2EtbWF0aC9cclxuICAgICAgIypcclxuICAgICAgIyogTWF0aCBBcmNoaXZlcyBLLTEyIFRlYWNoaW5nIE1hdGVyaWFscyBmcm9tIHRoZVxyXG4gICAgICAjKiAgIFVuaXZlcnNpdHkgb2YgVGVubmVzc2VlIGF0IEtub3h2aWxsZVxyXG4gICAgICAjKiAgIGh0dHA6Ly9hcmNoaXZlcy5tYXRoLnV0ay5lZHUvazEyLmh0bWxcclxuICAgICAgIypcclxuICAgICAgIyogTWF0aGVtYXRpY3MgTGVzc29ucyBUaGF0IEFyZSBGdW4gLSBHcmFkZXMgMi0xMlxyXG4gICAgICAjKiAgaHR0cDovL21hdGgucmljZS5lZHUvfmxhbml1cy9MZXNzb25zL1xyXG4gICAgICAjKlxyXG4gICAgICAjKiBNYXRoIEdvb2RpZXMgLSBwdXp6bGVzLCBsZXNzb25zLCBob21ld29yayBoZWxwXHJcbiAgICAgICMqICBodHRwOi8vd3d3Lm1hdGhnb29kaWVzLmNvbS9cclxuICAgICAgIypcclxuICAgICAgIyogTWF0aCBsZXNzb24gUGxhbnMgZnJvbSBEaXNjb3ZlcnkgLVxyXG4gICAgICAjKiAgaHR0cDovL3d3dy5kaXNjb3ZlcnllZHVjYXRpb24uY29tL3NlYXJjaC9wYWdlLy0vLS9sZXNzb24tcGxhbi9tYXRoZW1hdGljcy9pbmRleC5jZm1cclxuICAgICAgIypcclxuICAgICAgIyogTWF0aCBTdG9yaWVzIGFuZCBNYWdpYyBXaXRoIE51bWJlcnMgLSB3b3JkIHByb2JsZW1zIGZvciBLLTggc3R1ZGVudHNcclxuICAgICAgIyogIGh0dHA6Ly93d3cubWF0aHN0b3JpZXMuY29tXHJcbiAgICAgICMqXHJcbiAgICAgICMqIE1hdGggTGlua3MgZm9yIFRlYWNoZXJzIC1cclxuICAgICAgIyogIGh0dHA6Ly93d3cua2VudC5rMTIud2EudXMvUGFnZS8yNTcxXHJcbiAgICAgICMqICAgU3R1ZGVudCByZXNvdXJjZXMgLSBodHRwOi8vd3d3LmtlbnQuazEyLndhLnVzL1BhZ2UvMjU2MVxyXG4gICAgICAjKlxyXG4gICAgICAjKiBOYXRpb25hbCBDb3VuY2lsIG9mIFRlYWNoZXJzIG9mIE1hdGhcclxuICAgICAgIyogICAgaHR0cDovL3d3dy5uY3RtLm9yZ1xyXG4gICAgICAjKiAgT25saW5lIG1hdGggYWN0aXZpdGllcyAgLSBodHRwOi8vaWxsdW1pbmF0aW9ucy5uY3RtLm9yZy9BY3Rpdml0eVNlYXJjaC5hc3B4XHJcbiAgICAgICMqICBMZXNzb25zIC0gaHR0cDovL2lsbHVtaW5hdGlvbnMubmN0bS5vcmcvTGVzc29ucy5hc3B4XHJcbiAgICAgICMqICBXZWIgTGlua3MgLSBodHRwOi8vaWxsdW1pbmF0aW9ucy5uY3RtLm9yZy9XZWJMaW5rcy5hc3B4XHJcbiAgICAgICMqXHJcbiAgICAgICMqIE5hdGlvbmFsIExpYnJhcnkgb2YgVmlydHVhbCBNYW5pcHVsYXRpdmVzX1xyXG4gICAgICAjKiBodHRwOi8vbmx2bS51c3UuZWR1L2VuL25hdi92bGlicmFyeS5odG1sXHJcbiAgICAgICMqXHJcbiAgICAgICMqIE5ldyBaZWFsYW5kIE1hdGhzIC0gaHR0cDovL3d3dy5uem1hdGhzLmNvLm56L3RlYWNoaW5nLW1hdGVyaWFsXHJcbiAgICAgICMqXHJcbiAgICAgICMqIFBpIERheSBhdCB0aGUgRXhwbG9yYXRvcml1bSAtIGEgdGVycmlmaWMgd2F5IHRvIGNlbGVicmF0ZSBtYXRoIC1cclxuICAgICAgIyogIGh0dHA6Ly93d3cuZXhwbG9yYXRvcml1bS5lZHUvcGkvaW5kZXguaHRtbFxyXG4gICAgICAjKlxyXG4gICAgICAjKiBQaSBUcml2aWEgKG1vcmUgdGhhbiB5b3Ugd2FudCB0byBrbm93IGFib3V0IHBpKVxyXG4gICAgICAjKiAgaHR0cDovL3d3dy5ldmVhbmRlcnNzb24uY29tL3BpL2luZGV4MlxyXG4gICAgICAjKlxyXG4gICAgICAjKiBTQ09SRSBNYXRoZW1hdGljcyBmcm9tIENhbGlmb3JuaWFcclxuICAgICAgIyogICAgaHR0cDovL3Njb3JlLmtpbmdzLmsxMi5jYS51cy9cclxuICAgICAgIypcclxuICAgICAgIyogU2hvZG9yIC0gaHR0cDovL3d3dy5zaG9kb3Iub3JnL2FjdGl2aXRpZXMvXHJcbiAgICAgICMqXHJcbiAgICAgICMqIFVuaXZlcnNpdHkgb2YgSWxsaW5vaXMgLSBSZXNvdXJjZXNcclxuICAgICAgIyogIGh0dHA6Ly9tc3RlLmlsbGlub2lzLmVkdS9yZXNvdXJjZXMvXHJcbiAgICAgICMqXHJcbiAgICAgICMqIFdlYk1hdGggLSBHcmFkZXMgMy0xMiAtIG1hbnkgbWF0aCB0b3BpY3NcclxuICAgICAgIyogUHJhY3RpY2FsLCBnZW5lcmFsLCBhbGdlYnJhLCBncmFwaGluZywgb25saW5lIHF1aXpcclxuICAgICAgIyogICAgaHR0cDovL3d3dy53ZWJtYXRoLmNvbS9cclxuICAgICAgIypcclxuICAgICAgIyogTXJzLiBNaXRjaGVsbCdzIG1hdGggcGFnZSAtIGdhbWVzIGFuZCBhY3Rpdml0aWVzIGZvciBraWRzXHJcbiAgICAgICMqICAgIGh0dHA6Ly93d3cua2F0aGltaXRjaGVsbC5jb20vbWF0aC5odG1cclxuICAgICAgIyogICAgYWxnZWJyYSAtIGh0dHA6Ly93d3cua2F0aGltaXRjaGVsbC5jb20vYWxnZWJyYS5odG1cclxuICAgICAgIyogICAgMTAwIERheSAtIGh0dHA6Ly93d3cua2F0aGltaXRjaGVsbC5jb20vaHVuZHJlZGRheS5odG1cclxuICAgICAgIyogICAgbWF0aCBtYW5pcHVsYXRpdmVzIC0gaHR0cDovL3d3dy5rYXRoaW1pdGNoZWxsLmNvbS9tYXRoZm9sZGVyL21hdGhwYWdlLmh0bVxyXG4gICAgICAjKiAgICAgcGkgZGF5IC0gaHR0cDovL3d3dy5rYXRoaW1pdGNoZWxsLmNvbS9waS5odG1sXHJcbiAgICAgICMqXHJcbiAgICAgICMqIExhc3QgY2hhbmdlIHRpbWVzdGFtcCBmb3IgdGhpcyBjb21tZW50OiBGcmlkYXksIEp1bmUgMjAsIDIwMTQgMTI6MzI6MDRhbVxyXG4gICAgICAjKlxyXG4gICAgICBtYXRoOlxyXG5cclxuICAgICAgICAjKipcclxuICAgICAgICAjKiBDb250YWlucyBvYmplY3RzIGZvciBzdXBlciBjb21wbGljYXRlZCBtYXRoZW1hdGljYWwgc2VyaWVzLCBzdWNoIGFzIHN1bXMuXHJcbiAgICAgICAgIypcclxuICAgICAgICAjKiBAYXV0aG9yIGpkcmFnb1xyXG4gICAgICAgICMqXHJcbiAgICAgICAgIyogTGFzdCBjaGFuZ2UgdGltZXN0YW1wIGZvciB0aGlzIGNvbW1lbnQ6IEZyaWRheSwgSnVuZSAyMCwgMjAxNCAxMjozMjo1NmFtXHJcbiAgICAgICAgIypcclxuICAgICAgICBzZXJpZXM6XHJcblxyXG4gICAgICAgICAgIyoqXHJcbiAgICAgICAgICAjKiBJbnRlcmZhY2UgZm9yIHN1bW1pbmcgYW55IHR5cGUgb2YgdmFsdWUsIGFzIGxvbmcgYXMgaXQgaXMgYSBsYXJnZSBpbnRlZ2VyLlxyXG4gICAgICAgICAgIypcclxuICAgICAgICAgICMqIEBhdXRob3IgamRyYWdvXHJcbiAgICAgICAgICAjKlxyXG4gICAgICAgICAgUmVhbGx5TGFyZ2VJbnRlZ2VyU3VtbWVySW50ZXJmYWNlOiBjbGFzcyBSZWFsbHlMYXJnZUludGVnZXJTdW1tZXJJbnRlcmZhY2VcclxuICAgICAgICAgICAgY29uc3RydWN0b3I6IChAZGVsZWdhdGUsIGFic3RyYWN0LCBzeW5jaHJvbml6ZWQsIHRyYW5zaWVudCwgaW5qZWN0LCB2b2xhdGlsZSkgLT5cclxuICAgICAgICAgICAgICB0aGlzLmRlbGVnYXRlW1wic2luZ2xldG9uXCJdID0gY29tLmpkcmFnby5ldWxlci50eXBlcy5zb3VuZHNMaWtlRm9vZHMuR1VBVkFcclxuXHJcbiAgICAgICAgICAjKipcclxuICAgICAgICAgICMqIENvbXBsZXRlIGltcGxlbWVudGF0aW9uIG9mIGNvbS5qZHJhZ28uZXVsZXIubWF0aC5zZXJpZXMuUmVhbGx5TGFyZ2VJbnRlZ2VyU3VtbWVySW50ZXJmYWNlXHJcbiAgICAgICAgICAjKlxyXG4gICAgICAgICAgIyogQGF1dGhvciBqZHJhZ29cclxuICAgICAgICAgICMqXHJcbiAgICAgICAgICBSZWFsbHlMYXJnZUludGVnZXJTdW1tZXJJbnN0YW50aWF0aW9uOiBjbGFzcyBSZWFsbHlMYXJnZUludGVnZXJTdW1tZXJJbnN0YW50aWF0aW9uIGV4dGVuZHMgUmVhbGx5TGFyZ2VJbnRlZ2VyU3VtbWVySW50ZXJmYWNlXHJcbiAgICAgICAgICAgICMqKlxyXG4gICAgICAgICAgICAjKiBCYXNpYyBjb25zdHJ1Y3RvciBmb3IgY29tLmpkcmFnby5ldWxlci5tYXRoLnNlcmllcy5SZWFsbHlMYXJnZUludGVnZXJTdW1tZXJJbnRlcmZhY2VcclxuICAgICAgICAgICAgIypcclxuICAgICAgICAgICAgIyogQGF1dGhvciBqZHJhZ29cclxuICAgICAgICAgICAgIypcclxuICAgICAgICAgICAgY29uc3RydWN0b3I6IC0+XHJcbiAgICAgICAgICAgICAgIyoqXHJcbiAgICAgICAgICAgICAgIyogSW5pdGlhbGl6ZSB0aGUgc3VtIHRvIHplcm8uXHJcbiAgICAgICAgICAgICAgIypcclxuICAgICAgICAgICAgICAjKiBAYXV0aG9yIGpkcmFnb1xyXG4gICAgICAgICAgICAgICMqXHJcbiAgICAgICAgICAgICAgQHN1bSA9IDBcclxuXHJcbiAgICAgICAgICAgICMqKlxyXG4gICAgICAgICAgICAjKiBBZGRzIGEgbmV3IHJlYWxseSBsYXJnZSBpbnRlZ2VyIHZhbHVlIHRvIHRoZSBjdXJyZW50IHN1bS5cclxuICAgICAgICAgICAgIypcclxuICAgICAgICAgICAgIyogQGF1dGhvciBqZHJhZ29cclxuICAgICAgICAgICAgIypcclxuICAgICAgICAgICAgYWRkOiAobikgLT5cclxuICAgICAgICAgICAgICAjKipcclxuICAgICAgICAgICAgICAjKiBOb3cgYWRkIG4gdG8gc3VtLlxyXG4gICAgICAgICAgICAgICMqXHJcbiAgICAgICAgICAgICAgIyogQGF1dGhvciBqZHJhZ29cclxuICAgICAgICAgICAgICAjKlxyXG4gICAgICAgICAgICAgIEBzdW0gKz0gblxyXG5cclxuICAgICAgICAgICAgIyoqXHJcbiAgICAgICAgICAgICMqIFJldHVybnMgdGhlIHN1bS5cclxuICAgICAgICAgICAgIypcclxuICAgICAgICAgICAgIyogQGF1dGhvciBqZHJhZ29cclxuICAgICAgICAgICAgIypcclxuICAgICAgICAgICAgZ2V0U3VtOiAtPlxyXG4gICAgICAgICAgICAgIHJldHVybiBAc3VtXHJcblxyXG5cclxuICAgICAgICAgICMqKlxyXG4gICAgICAgICAgIyogR2VuZXJhdGVzIGFuIG9iamVjdCB3aGljaCBpbXBsZW1lbnRzIHRoZSBpbnRlcmZhY2UgY29tLmpkcmFnby5ldWxlci5tYXRoLnNlcmllcy5SZWFsbHlMYXJnZUludGVnZXJTdW1tZXJJbnRlcmZhY2VcclxuICAgICAgICAgICMqXHJcbiAgICAgICAgICAjKiBAYXV0aG9yIGpkcmFnb1xyXG4gICAgICAgICAgIypcclxuICAgICAgICAgIFJlYWxseUxhcmdlSW50ZWdlclN1bW1lckluc3RhbnRpYXRpb25GYWN0b3J5OiBjbGFzcyBSZWFsbHlMYXJnZUludGVnZXJTdW1tZXJJbnN0YW50aWF0aW9uRmFjdG9yeVxyXG4gICAgICAgICAgICAjKipcclxuICAgICAgICAgICAgIyogQmFzaWMgY29uc3RydWN0b3IgZm9yIGNvbS5qZHJhZ28uZXVsZXIubWF0aC5zZXJpZXMuUmVhbGx5TGFyZ2VJbnRlZ2VyU3VtbWVySW5zdGFudGlhdGlvbkZhY3RvcnlcclxuICAgICAgICAgICAgIypcclxuICAgICAgICAgICAgIyogQGF1dGhvciBqZHJhZ29cclxuICAgICAgICAgICAgIypcclxuICAgICAgICAgICAgY29uc3RydWN0b3I6IC0+XHJcblxyXG4gICAgICAgICAgICAjKipcclxuICAgICAgICAgICAgIyogQ29uc3RydWN0cyBhbiBvYmplY3Qgd2hpY2ggaW1wbGVtZW50cyB0aGUgaW50ZXJmYWNlIGNvbS5qZHJhZ28uZXVsZXIubWF0aC5zZXJpZXMuUmVhbGx5TGFyZ2VJbnRlZ2VyU3VtbWVySW50ZXJmYWNlXHJcbiAgICAgICAgICAgICMqXHJcbiAgICAgICAgICAgICMqIEBhdXRob3IgamRyYWdvXHJcbiAgICAgICAgICAgICMqXHJcbiAgICAgICAgICAgIGJ1aWxkU3VtbWVyOiAtPlxyXG4gICAgICAgICAgICAgICMqKlxyXG4gICAgICAgICAgICAgICMqIE5vdyBjb25zdHJ1Y3QgYW4gb2JqZWN0IHRoYXQgaW1wbGVtZW50cyB0aGUgaW50ZXJmYWNlIGNvbS5qZHJhZ28uZXVsZXIubWF0aC5zZXJpZXMuUmVhbGx5TGFyZ2VJbnRlZ2VyU3VtbWVySW50ZXJmYWNlIGFuZCByZXR1cm4gaXQuXHJcbiAgICAgICAgICAgICAgIypcclxuICAgICAgICAgICAgICAjKiBAYXV0aG9yIGpkcmFnb1xyXG4gICAgICAgICAgICAgICMqXHJcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBjb20uamRyYWdvLmV1bGVyLm1hdGguc2VyaWVzLlJlYWxseUxhcmdlSW50ZWdlclN1bW1lckluc3RhbnRpYXRpb25cclxuXHJcblxyXG5wcm9ibGVtLmFuc3dlciA9IC0+XHJcblxyXG4gIHN1bW1lckZhY3RvcnkgPSBuZXcgY29tLmpkcmFnby5ldWxlci5tYXRoLnNlcmllcy5SZWFsbHlMYXJnZUludGVnZXJTdW1tZXJJbnN0YW50aWF0aW9uRmFjdG9yeVxyXG4gIHJlYWxseUxhcmdlSW50ZWdlclN1bW1lckludGVyZmFjZUltcGxlbWVudGF0aW9uID0gc3VtbWVyRmFjdG9yeS5idWlsZFN1bW1lcigpXHJcblxyXG4gIGZvciBuIGluIG51bWJlcnNcclxuICAgIHJlYWxseUxhcmdlSW50ZWdlclN1bW1lckludGVyZmFjZUltcGxlbWVudGF0aW9uLmFkZChuKVxyXG4gIHN1bSA9IHJlYWxseUxhcmdlSW50ZWdlclN1bW1lckludGVyZmFjZUltcGxlbWVudGF0aW9uLmdldFN1bSgpXHJcblxyXG4gICMgSkRSQUdPIDIwMTQvMDYvMjAgZGlzYWJsZWQvcmVwbGFjZWQgc2xvcHB5IGNvZGUgd2hpY2ggd2FzIGJlcmVmdCBvZiBsYXllcnMgb2YgYnVyZWF1Y3JhY3lcclxuICAjIyBzdW0gPSAwXHJcbiAgIyMgZm9yIG4gaW4gbnVtYmVyc1xyXG4gICMjICAgc3VtICs9IG5cclxuXHJcbiAgc3RyID0gU3RyaW5nKHN1bSkucmVwbGFjZSgvXFwuL2csIFwiXCIpLnN1YnN0cigwLCAxMClcclxuICByZXR1cm4gc3RyXHJcbiIsInJvb3QgPSBleHBvcnRzID8gdGhpc1xyXG5cclxuIyBTaWV2ZSB3YXMgYmxpbmRseSB0YWtlbi9hZGFwdGVkIGZyb20gUm9zZXR0YUNvZGUuIERPTlQgRVZFTiBDQVJFXHJcbmNsYXNzIEluY3JlbWVudGFsU2lldmVcclxuICBjb25zdHJ1Y3RvcjogLT5cclxuICAgIEBuID0gMFxyXG5cclxuICBuZXh0OiAtPlxyXG4gICAgQG4gKz0gMlxyXG4gICAgaWYgQG4gPCA3XHJcbiAgICAgIGlmIEBuIDwgM1xyXG4gICAgICAgIEBuID0gMVxyXG4gICAgICAgIHJldHVybiAyXHJcbiAgICAgIGlmIEBuIDwgNVxyXG4gICAgICAgIHJldHVybiAzXHJcbiAgICAgIEBkaWN0ID0ge31cclxuICAgICAgQGJwcyA9IG5ldyBJbmNyZW1lbnRhbFNpZXZlKClcclxuICAgICAgQGJwcy5uZXh0KClcclxuICAgICAgQHAgPSBAYnBzLm5leHQoKVxyXG4gICAgICBAcSA9IEBwICogQHBcclxuICAgICAgcmV0dXJuIDVcclxuICAgIGVsc2VcclxuICAgICAgcyA9IEBkaWN0W0BuXVxyXG4gICAgICBpZiBub3Qgc1xyXG4gICAgICAgIGlmIEBuIDwgQHFcclxuICAgICAgICAgIHJldHVybiBAblxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgIHAyID0gQHAgPDwgMVxyXG4gICAgICAgICAgQGRpY3RbQG4gKyBwMl0gPSBwMlxyXG4gICAgICAgICAgQHAgPSBAYnBzLm5leHQoKVxyXG4gICAgICAgICAgQHEgPSBAcCAqIEBwXHJcbiAgICAgICAgICByZXR1cm4gQG5leHQoKVxyXG4gICAgICBlbHNlXHJcbiAgICAgICAgZGVsZXRlIEBkaWN0W0BuXVxyXG4gICAgICAgIG54dCA9IEBuICsgc1xyXG4gICAgICAgIHdoaWxlIChAZGljdFtueHRdKVxyXG4gICAgICAgICAgbnh0ICs9IHNcclxuICAgICAgICBAZGljdFtueHRdID0gc1xyXG4gICAgICAgIHJldHVybiBAbmV4dCgpXHJcblxyXG5yb290LkluY3JlbWVudGFsU2lldmUgPSBJbmNyZW1lbnRhbFNpZXZlXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiMgU2hhbWVsZXNzbHkgcGlsZmVyZWQvYWRvcHRlZCBmcm9tIGh0dHA6Ly93d3cuamF2YXNjcmlwdGVyLm5ldC9mYXEvbnVtYmVyaXNwcmltZS5odG1cclxuXHJcbnJvb3QubGVhc3RGYWN0b3IgPSAobikgLT5cclxuICByZXR1cm4gTmFOIGlmIGlzTmFOKG4pIG9yIG5vdCBpc0Zpbml0ZShuKVxyXG4gIHJldHVybiAwIGlmIG4gPT0gMFxyXG4gIHJldHVybiAxIGlmIChuICUgMSkgIT0gMCBvciAobiAqIG4pIDwgMlxyXG4gIHJldHVybiAyIGlmIChuICUgMikgPT0gMFxyXG4gIHJldHVybiAzIGlmIChuICUgMykgPT0gMFxyXG4gIHJldHVybiA1IGlmIChuICUgNSkgPT0gMFxyXG5cclxuICBtID0gTWF0aC5zcXJ0IG5cclxuICBmb3IgaSBpbiBbNy4ubV0gYnkgMzBcclxuICAgIHJldHVybiBpICAgIGlmIChuICUgaSkgICAgICA9PSAwXHJcbiAgICByZXR1cm4gaSs0ICBpZiAobiAlIChpKzQpKSAgPT0gMFxyXG4gICAgcmV0dXJuIGkrNiAgaWYgKG4gJSAoaSs2KSkgID09IDBcclxuICAgIHJldHVybiBpKzEwIGlmIChuICUgKGkrMTApKSA9PSAwXHJcbiAgICByZXR1cm4gaSsxMiBpZiAobiAlIChpKzEyKSkgPT0gMFxyXG4gICAgcmV0dXJuIGkrMTYgaWYgKG4gJSAoaSsxNikpID09IDBcclxuICAgIHJldHVybiBpKzIyIGlmIChuICUgKGkrMjIpKSA9PSAwXHJcbiAgICByZXR1cm4gaSsyNCBpZiAobiAlIChpKzI0KSkgPT0gMFxyXG5cclxuICByZXR1cm4gblxyXG5cclxucm9vdC5pc1ByaW1lID0gKG4pIC0+XHJcbiAgaWYgaXNOYU4obikgb3Igbm90IGlzRmluaXRlKG4pIG9yIChuICUgMSkgIT0gMCBvciAobiA8IDIpXHJcbiAgICByZXR1cm4gZmFsc2VcclxuICBpZiBuID09IHJvb3QubGVhc3RGYWN0b3IobilcclxuICAgIHJldHVybiB0cnVlXHJcblxyXG4gIHJldHVybiBmYWxzZVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxucm9vdC5wcmltZUZhY3RvcnMgPSAobikgLT5cclxuICByZXR1cm4gWzFdIGlmIG4gPT0gMVxyXG5cclxuICBmYWN0b3JzID0gW11cclxuICB3aGlsZSBub3Qgcm9vdC5pc1ByaW1lKG4pXHJcbiAgICBmYWN0b3IgPSByb290LmxlYXN0RmFjdG9yKG4pXHJcbiAgICBmYWN0b3JzLnB1c2ggZmFjdG9yXHJcbiAgICBuIC89IGZhY3RvclxyXG4gIGZhY3RvcnMucHVzaCBuXHJcbiAgcmV0dXJuIGZhY3RvcnNcclxuXHJcbnJvb3QuZmFjdG9yaWFsID0gKG4pIC0+XHJcbiAgZiA9IG5cclxuICB3aGlsZSBuID4gMVxyXG4gICAgbi0tXHJcbiAgICBmICo9IG5cclxuICByZXR1cm4gZlxyXG4iLCJMQVNUX1BST0JMRU0gPSAxM1xyXG5cclxucm9vdCA9IHdpbmRvdyAjIGV4cG9ydHMgPyB0aGlzXHJcblxyXG5yb290LmVzY2FwZWRTdHJpbmdpZnkgPSAobykgLT5cclxuICBzdHIgPSBKU09OLnN0cmluZ2lmeShvKVxyXG4gIHN0ciA9IHN0ci5yZXBsYWNlKFwiXVwiLCBcIlxcXFxdXCIpXHJcbiAgcmV0dXJuIHN0clxyXG5cclxucm9vdC5ydW5BbGwgPSAtPlxyXG4gIGxhc3RQdXp6bGUgPSBMQVNUX1BST0JMRU1cclxuICBuZXh0SW5kZXggPSAwXHJcblxyXG4gIGxvYWROZXh0U2NyaXB0ID0gLT5cclxuICAgIGlmIG5leHRJbmRleCA8IGxhc3RQdXp6bGVcclxuICAgICAgbmV4dEluZGV4KytcclxuICAgICAgcnVuVGVzdChuZXh0SW5kZXgsIGxvYWROZXh0U2NyaXB0KVxyXG4gIGxvYWROZXh0U2NyaXB0KClcclxuXHJcbnJvb3QuaXRlcmF0ZVByb2JsZW1zID0gKGFyZ3MpIC0+XHJcblxyXG4gIGluZGV4VG9Qcm9jZXNzID0gbnVsbFxyXG4gIGlmIGFyZ3MuZW5kSW5kZXggPiAwXHJcbiAgICBpZiBhcmdzLnN0YXJ0SW5kZXggPD0gYXJncy5lbmRJbmRleFxyXG4gICAgICBpbmRleFRvUHJvY2VzcyA9IGFyZ3Muc3RhcnRJbmRleFxyXG4gICAgICBhcmdzLnN0YXJ0SW5kZXgrK1xyXG4gIGVsc2VcclxuICAgIGlmIGFyZ3MubGlzdC5sZW5ndGggPiAwXHJcbiAgICAgIGluZGV4VG9Qcm9jZXNzID0gYXJncy5saXN0LnNoaWZ0KClcclxuXHJcbiAgaWYgaW5kZXhUb1Byb2Nlc3MgIT0gbnVsbFxyXG4gICAgaXRlcmF0ZU5leHQgPSAtPlxyXG4gICAgICB3aW5kb3cuYXJncyA9IGFyZ3NcclxuICAgICAgcnVuVGVzdCBpbmRleFRvUHJvY2VzcywgLT5cclxuICAgICAgICBpdGVyYXRlUHJvYmxlbXMoYXJncylcclxuICAgIGl0ZXJhdGVOZXh0KClcclxuXHJcbnJvb3QucnVuVGVzdCA9IChpbmRleCwgY2IpIC0+XHJcbiAgbW9kdWxlTmFtZSA9IFwiZSN7KCcwMDAnK2luZGV4KS5zbGljZSgtMyl9XCJcclxuICB3aW5kb3cuaW5kZXggPSBpbmRleFxyXG4gIHByb2JsZW0gPSByZXF1aXJlKG1vZHVsZU5hbWUpXHJcbiAgcHJvYmxlbS5wcm9jZXNzKClcclxuICB3aW5kb3cuc2V0VGltZW91dChjYiwgMCkgaWYgY2JcclxuXHJcbmNsYXNzIFByb2JsZW1cclxuICBjb25zdHJ1Y3RvcjogKEBkZXNjcmlwdGlvbikgLT5cclxuICAgIEBpbmRleCA9IHdpbmRvdy5pbmRleFxyXG4gICAgbGluZXMgPSBAZGVzY3JpcHRpb24uc3BsaXQoL1xcbi8pXHJcbiAgICBsaW5lcy5zaGlmdCgpIHdoaWxlIGxpbmVzLmxlbmd0aCA+IDAgYW5kIGxpbmVzWzBdLmxlbmd0aCA9PSAwXHJcbiAgICBAdGl0bGUgPSBsaW5lcy5zaGlmdCgpXHJcbiAgICBAbGluZSA9IGxpbmVzLnNoaWZ0KClcclxuICAgIEBkZXNjcmlwdGlvbiA9IGxpbmVzLmpvaW4oXCJcXG5cIilcclxuXHJcbiAgbm93OiAtPlxyXG4gICAgcmV0dXJuIGlmIHdpbmRvdy5wZXJmb3JtYW5jZSB0aGVuIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSBlbHNlIG5ldyBEYXRlKCkuZ2V0VGltZSgpXHJcblxyXG4gIHByb2Nlc3M6IC0+XHJcbiAgICBpZiB3aW5kb3cuYXJncy5kZXNjcmlwdGlvblxyXG4gICAgICB3aW5kb3cudGVybWluYWwuZWNobyBcIltbOyM0NDQ0NDQ7XV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXVxcblwiXHJcblxyXG4gICAgZm9ybWF0dGVkVGl0bGUgPSAkLnRlcm1pbmFsLmZvcm1hdChcIltbOyNmZmFhMDA7XSN7QHRpdGxlfV1cIilcclxuICAgIHVybCA9IFwiP2M9I3t3aW5kb3cuYXJncy5jbWR9XyN7QGluZGV4fVwiXHJcbiAgICBpZiB3aW5kb3cuYXJncy52ZXJib3NlXHJcbiAgICAgIHVybCArPSBcIl92XCJcclxuICAgIHdpbmRvdy50ZXJtaW5hbC5lY2hvIFwiPGEgaHJlZj1cXFwiI3t1cmx9XFxcIj4je2Zvcm1hdHRlZFRpdGxlfTwvYT5cIiwgeyByYXc6IHRydWUgfVxyXG5cclxuICAgIGlmIHdpbmRvdy5hcmdzLmRlc2NyaXB0aW9uXHJcbiAgICAgIHdpbmRvdy50ZXJtaW5hbC5lY2hvIFwiW1s7IzQ0NDQ0NDtdI3tAbGluZX1dXCJcclxuICAgICAgd2luZG93LnRlcm1pbmFsLmVjaG8gXCJbWzsjY2NjY2VlO10je0BkZXNjcmlwdGlvbn1dXFxuXCJcclxuICAgICAgc291cmNlTGluZSA9ICQudGVybWluYWwuZm9ybWF0KFwiW1s7IzQ0NDQ0NDtdU291cmNlOl0gXCIpXHJcbiAgICAgIHNvdXJjZUxpbmUgKz0gXCIgPGEgaHJlZj1cXFwic3JjL2UjeygnMDAwJytAaW5kZXgpLnNsaWNlKC0zKX0uY29mZmVlXFxcIj5cIiArICQudGVybWluYWwuZm9ybWF0KFwiW1s7Izc3MzMwMDtdTG9jYWxdXCIpICsgXCI8L2E+IFwiXHJcbiAgICAgIHNvdXJjZUxpbmUgKz0gJC50ZXJtaW5hbC5mb3JtYXQoXCJbWzsjNDQ0NDQ0O10vXVwiKVxyXG4gICAgICBzb3VyY2VMaW5lICs9IFwiIDxhIGhyZWY9XFxcImh0dHBzOi8vZ2l0aHViLmNvbS9qb2VkcmFnby9ldWxlci9ibG9iL21hc3Rlci9zcmMvZSN7KCcwMDAnK0BpbmRleCkuc2xpY2UoLTMpfS5jb2ZmZWVcXFwiPlwiICsgJC50ZXJtaW5hbC5mb3JtYXQoXCJbWzsjNzczMzAwO11HaXRodWJdXCIpICsgXCI8L2E+XCJcclxuICAgICAgd2luZG93LnRlcm1pbmFsLmVjaG8gc291cmNlTGluZSwgeyByYXc6IHRydWUgfVxyXG4gICAgICBpZiB3aW5kb3cuYXJncy50ZXN0IG9yIHdpbmRvdy5hcmdzLmFuc3dlclxyXG4gICAgICAgIHdpbmRvdy50ZXJtaW5hbC5lY2hvIFwiXCJcclxuXHJcbiAgICB0ZXN0RnVuYyA9IEB0ZXN0XHJcbiAgICBhbnN3ZXJGdW5jID0gQGFuc3dlclxyXG5cclxuICAgIGlmIHdpbmRvdy5hcmdzLnRlc3RcclxuICAgICAgaWYgdGVzdEZ1bmMgPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgd2luZG93LnRlcm1pbmFsLmVjaG8gXCJbWzsjNDQ0NDQ0O10gKG5vIHRlc3RzKV1cIlxyXG4gICAgICBlbHNlXHJcbiAgICAgICAgdGVzdEZ1bmMoKVxyXG5cclxuICAgIGlmIHdpbmRvdy5hcmdzLmFuc3dlclxyXG4gICAgICBzdGFydCA9IEBub3coKVxyXG4gICAgICBhbnN3ZXIgPSBhbnN3ZXJGdW5jKClcclxuICAgICAgZW5kID0gQG5vdygpXHJcbiAgICAgIG1zID0gZW5kIC0gc3RhcnRcclxuICAgICAgd2luZG93LnRlcm1pbmFsLmVjaG8gXCJbWzsjZmZmZmZmO10gLT4gXVtbOyNhYWZmYWE7XUFuc3dlcjpdIChbWzsjYWFmZmZmO10je21zLnRvRml4ZWQoMSl9bXNdKTogW1s7I2ZmZmZmZjtdI3tlc2NhcGVkU3RyaW5naWZ5KGFuc3dlcil9XVwiXHJcblxyXG5yb290LlByb2JsZW0gPSBQcm9ibGVtXHJcblxyXG5yb290Lm9rID0gKHYsIG1zZykgLT5cclxuICB3aW5kb3cudGVybWluYWwuZWNobyBcIltbOyNmZmZmZmY7XSAqICBdI3t2fTogI3ttc2d9XCJcclxuXHJcbnJvb3QuZXF1YWwgPSAoYSwgYiwgbXNnKSAtPlxyXG4gIGlmIGEgPT0gYlxyXG4gICAgd2luZG93LnRlcm1pbmFsLmVjaG8gXCJbWzsjZmZmZmZmO10gKiAgXVtbOyM1NTU1NTU7XVBBU1M6ICN7bXNnfV1cIlxyXG4gIGVsc2VcclxuICAgIHdpbmRvdy50ZXJtaW5hbC5lY2hvIFwiW1s7I2ZmZmZmZjtdICogIF1bWzsjZmZhYWFhO11GQUlMOiAje21zZ30gKCN7YX0gIT0gI3tifSldXCJcclxuXHJcbnJvb3Qub25Db21tYW5kID0gKGNvbW1hbmQpID0+XHJcbiAgcmV0dXJuIGlmIGNvbW1hbmQubGVuZ3RoID09IDBcclxuICBjbWQgPSAkLnRlcm1pbmFsLnBhcnNlQ29tbWFuZChjb21tYW5kKVxyXG4gIHJldHVybiBpZiBjbWQubmFtZS5sZW5ndGggPT0gMFxyXG5cclxuICBhcmdzID1cclxuICAgIHN0YXJ0SW5kZXg6IDBcclxuICAgIGVuZEluZGV4OiAwXHJcbiAgICBsaXN0OiBbXVxyXG4gICAgdmVyYm9zZTogZmFsc2VcclxuICAgIGRlc2NyaXB0aW9uOiBmYWxzZVxyXG4gICAgdGVzdDogZmFsc2VcclxuICAgIGFuc3dlcjogZmFsc2VcclxuXHJcbiAgcHJvY2VzcyA9IHRydWVcclxuXHJcbiAgZm9yIGFyZyBpbiBjbWQuYXJnc1xyXG4gICAgYXJnID0gU3RyaW5nKGFyZylcclxuICAgIGNvbnRpbnVlIGlmIGFyZy5sZW5ndGggPCAxXHJcbiAgICBpZiBhcmdbMF0gPT0gJ3YnXHJcbiAgICAgIGFyZ3MudmVyYm9zZSA9IHRydWVcclxuICAgIGVsc2UgaWYgYXJnLm1hdGNoKC9eXFxkKyQvKVxyXG4gICAgICB2ID0gcGFyc2VJbnQoYXJnKVxyXG4gICAgICBpZiAodiA+PSAxKSBhbmQgKHYgPD0gTEFTVF9QUk9CTEVNKVxyXG4gICAgICAgIGFyZ3MubGlzdC5wdXNoKHYpXHJcbiAgICAgIGVsc2VcclxuICAgICAgICBwcm9jZXNzID0gZmFsc2VcclxuICAgICAgICB3aW5kb3cudGVybWluYWwuZWNobyBcIltbOyNmZmFhYWE7XU5vIHN1Y2ggdGVzdDogI3t2fSAodmFsaWQgdGVzdHMgMS0je0xBU1RfUFJPQkxFTX0pXVwiXHJcblxyXG4gIGlmIGFyZ3MubGlzdC5sZW5ndGggPT0gMFxyXG4gICAgYXJncy5zdGFydEluZGV4ID0gMVxyXG4gICAgYXJncy5lbmRJbmRleCA9IExBU1RfUFJPQkxFTVxyXG5cclxuICAjIFNpbmNlIGFsbCBvZiBvdXIgY29tbWFuZHMgaGFwcGVuIHRvIGhhdmUgdW5pcXVlIGZpcnN0IGxldHRlcnMsIGxldCBwZW9wbGUgYmUgc3VwZXIgbGF6eS9zaWxseVxyXG4gIGlmIGNtZC5uYW1lWzBdID09ICdsJ1xyXG4gICAgYXJncy5jbWQgPSBcImxpc3RcIlxyXG4gIGVsc2UgaWYgY21kLm5hbWVbMF0gPT0gJ2QnXHJcbiAgICBhcmdzLmNtZCA9IFwiZGVzY3JpYmVcIlxyXG4gICAgYXJncy5kZXNjcmlwdGlvbiA9IHRydWVcclxuICBlbHNlIGlmIGNtZC5uYW1lWzBdID09ICd0J1xyXG4gICAgYXJncy5jbWQgPSBcInRlc3RcIlxyXG4gICAgYXJncy50ZXN0ID0gdHJ1ZVxyXG4gIGVsc2UgaWYgY21kLm5hbWVbMF0gPT0gJ2EnXHJcbiAgICBhcmdzLmNtZCA9IFwiYW5zd2VyXCJcclxuICAgIGFyZ3MuYW5zd2VyID0gdHJ1ZVxyXG4gIGVsc2UgaWYgY21kLm5hbWVbMF0gPT0gJ3InXHJcbiAgICBhcmdzLmNtZCA9IFwicnVuXCJcclxuICAgIGFyZ3MudGVzdCA9IHRydWVcclxuICAgIGFyZ3MuYW5zd2VyID0gdHJ1ZVxyXG4gIGVsc2UgaWYgY21kLm5hbWVbMF0gPT0gJ2QnXHJcbiAgICBhcmdzLmNtZCA9IFwiZGVzY3JpYmVcIlxyXG4gICAgYXJncy5kZXNjcmlwdGlvbiA9IHRydWVcclxuICBlbHNlIGlmIGNtZC5uYW1lWzBdID09ICdoJ1xyXG4gICAgYXJncy5jbWQgPSBcImhlbHBcIlxyXG4gICAgcHJvY2VzcyA9IGZhbHNlXHJcbiAgICB3aW5kb3cudGVybWluYWwuZWNobyBcIlwiXCJcclxuICAgIENvbW1hbmRzOlxyXG5cclxuICAgICAgICBsaXN0IFtYXSAgICAgLSBMaXN0IHByb2JsZW0gdGl0bGVzXHJcbiAgICAgICAgZGVzY3JpYmUgW1hdIC0gRGlzcGxheSBmdWxsIHByb2JsZW0gZGVzY3JpcHRpb25zXHJcbiAgICAgICAgdGVzdCBbWF0gICAgIC0gUnVuIHVuaXQgdGVzdHNcclxuICAgICAgICBhbnN3ZXIgW1hdICAgLSBUaW1lIGFuZCBjYWxjdWxhdGUgYW5zd2VyXHJcbiAgICAgICAgcnVuIFtYXSAgICAgIC0gdGVzdCBhbmQgYW5zd2VyIGNvbWJpbmVkXHJcbiAgICAgICAgaGVscCAgICAgICAgIC0gVGhpcyBoZWxwXHJcblxyXG4gICAgICAgIEluIGFsbCBvZiB0aGVzZSwgW1hdIGNhbiBiZSBhIGxpc3Qgb2Ygb25lIG9yIG1vcmUgcHJvYmxlbSBudW1iZXJzLiAoYSB2YWx1ZSBmcm9tIDEgdG8gI3tMQVNUX1BST0JMRU19KS4gSWYgYWJzZW50LCBpdCBpbXBsaWVzIGFsbCBwcm9ibGVtcy5cclxuICAgICAgICBBbHNvLCBhZGRpbmcgdGhlIHdvcmQgXCJ2ZXJib3NlXCIgdG8gc29tZSBvZiB0aGVzZSBjb21tYW5kcyB3aWxsIGVtaXQgdGhlIGRlc2NyaXB0aW9uIGJlZm9yZSBwZXJmb3JtaW5nIHRoZSB0YXNrLlxyXG5cclxuICAgIFwiXCJcIlxyXG4gIGVsc2VcclxuICAgIHByb2Nlc3MgPSBmYWxzZVxyXG4gICAgd2luZG93LnRlcm1pbmFsLmVjaG8gXCJbWzsjZmZhYWFhO11Vbmtub3duIGNvbW1hbmQuXVwiXHJcblxyXG4gIGlmIGFyZ3MudmVyYm9zZVxyXG4gICAgYXJncy5kZXNjcmlwdGlvbiA9IHRydWVcclxuXHJcbiAgaWYgcHJvY2Vzc1xyXG4gICAgaXRlcmF0ZVByb2JsZW1zKGFyZ3MpXHJcbiJdfQ==
